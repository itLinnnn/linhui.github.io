{"meta":{"title":"林晖的个人博客","subtitle":null,"description":null,"author":"林晖","url":"https://itlinnnn.github.io/linhui.github.io"},"pages":[],"posts":[{"title":"Promise的作用以及基本使用","slug":"Promise的作用以及基本使用","date":"2018-10-15T18:28:06.000Z","updated":"2018-10-15T18:28:47.744Z","comments":true,"path":"Promise的作用以及基本使用/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/Promise的作用以及基本使用/","excerpt":"","text":"Promise的作用以及基本使用关于Promise的概念，在实际使用之前对其的理解一直比较模糊，只是停留在一些文档上的描述。在使用中其实可以根据其特性进行一些更佳的实践。在这里简单介绍一下其作用以及基础用法。作用 Promise对象可以理解为一次执行的异步操作，使用promise对象之后可以使用一种链式调用的方式来组织代码；让代码更加的直观。也就是说，有了Promise对象，就可以将异步操作以同步的操作的流程表达出来，避免了层层嵌套的回调函数。总结一下就是可以将原先不可控的回调通过promise转为更加可控更清晰的方式表达，更加高效，更便于维护。 示例：未使用promise，回调必须层层嵌套123456789$.ajax(url1, function(data1)&#123; // do something1... $.ajax(url2, function(data2)&#123; // do something2... $.ajax(url3, function(data3)&#123; // do something3... &#125;) &#125;);&#125;); 如果有多个嵌套，导致代码不够直观，逻辑梳理上会更加的困难。并且这几个操作都是有执行的一个依赖关系，需要等待上一个请求完成才可以进行下一个请求，而这些本身就是异步，这样的等待是没有必要的。所以promise可以帮助我们解决这一部分痛点。 了解一下Promise的特点1、对象的状态不受外界影响（Promise对象代表一个异步操作，有三种状态）。 pending（执行中） Resolved（成功，又称Fulfilled） rejected（拒绝） 其中pending为初始状态，fulfilled和rejected为结束状态（结束状态表示promise的生命周期已结束）。promise只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态.。 2、一旦状态改变，就不会再变，任何时候都可以得到这个结果。 Promise对象的状态改变，只有两种可能： 从Pending变为Resolved 从Pending变为Rejected 只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果 3、Promise对象的缺点： 无法取消Promise，一旦新建它就会立即执行，无法中途取消。 如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。 当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成。 4、promise兼容性：除了IE这种古老的浏览器和一些低版本的安卓外，大部分的浏览器对于promise的兼容性还是很友好的，所以我们可以在谷歌的控制台直接测试我们的代码。 接下来用一些例子来看看具体的使用方法 基本用法 1、首先我们new一个Promise,将Promise实例化2、然后在实例化的promise可以传两个参数，一个是成功之后的resolve，一个是失败之后的reject3、Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数12345678910111213141516171819var promise = function(isReady)&#123; return new Promise(function(resolve, reject)&#123; // do somthing, maybe async if (isReady)&#123; return resolve('成功执行'); &#125; else &#123; return reject('出错了'); &#125; &#125;);&#125; //Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。promise(true).then(function(value)&#123; // success,这里是resolve的回调函数 console.log(value); //hello world&#125;, function(err)&#123; // failure，这里是reject的回调函数 console.log(err)&#125;) 上述代码是执行成功，返回成功执行,如果想测试一下失败后的返回值，可以把promise(true).then…这里改为 promise(false).then…在控制台试下 链式操作 Promise并不只是简化层层回调的写法，更重要的在于是通过传递状态的方式来使回调方式能够及时的调用，因此，相比于callback，它更灵活，更简单。下面我们来看看Promise的链式操作：12345678910111213141516171819202122232425262728293031323334353637383940414243makePromise1().then(function(value)&#123; console.log(value); return makePromise2();&#125;).then(function(value)&#123; console.log(value); return makePromise3();&#125;).then(function(value)&#123; console.log(value);&#125;);function makePromise1()&#123; var p = new Promise(function(resolve, reject)&#123; //异步操作 setTimeout(function()&#123; console.log('异步1'); resolve('异步1参数'); &#125;, 2000); &#125;); return p; &#125;function makePromise2()&#123; var p = new Promise(function(resolve, reject)&#123; //异步操作 setTimeout(function()&#123; console.log('异步2'); resolve('异步2参数'); &#125;, 2000); &#125;); return p; &#125;function makePromise3()&#123; var p = new Promise(function(resolve, reject)&#123; //异步操作 setTimeout(function()&#123; console.log('异步3'); resolve('异步3参数'); &#125;, 2000); &#125;); return p; &#125; 上面的代码中，有三个异步操作，makePromise1,makePromise2,makePromise3。其中第二个和第三个依次执行，也就是上一个操作完成之后才可以进行。会相继的打印出异步1，异步1参数··· Promise的catch方法 12345678910111213141516171819var promise = function(isReady)&#123; return new Promise(function(resolve, reject)&#123; if (isReady)&#123; return resolve('成功执行'); &#125; else &#123; return reject('失败'); &#125; &#125;);&#125;promise(true).then(function(value)&#123; console.log('resolved'); console.log(value); console.log(wawa); //此处的wawa未定义&#125;).catch(function(error)&#123; console.log('rejected'); console.log(error);&#125;); catch 方法是 then(onFulfilled, onRejected) 方法当中 onRejected 函数的一个简单的写法，也就是说可以写成 then(fn).catch(fn),相当于 then(fn).then(null, fn)使用 catch 的写法比一般的写法更加清晰明确，其实可以类比成try/catch，这样，其中有报错的地方不会阻塞运行。比如定义了一个未定义wawa,正常来说它上面的代码也不会运行，因为被这个报错阻塞了，有了catch,它上面的代码可以正常运行下去 promise.all方法 Promise.all 可以接收一个元素为 Promise 对象的数组作为参数，当这个数组里面所有的 Promise 对象都变为 resolve 时，该方法才会返回。 123456789101112131415 var p1 = new Promise(function (resolve) &#123; setTimeout(function () &#123; resolve(\"第一个promise\"); &#125;, 3000);&#125;);var p2 = new Promise(function (resolve) &#123; setTimeout(function () &#123; resolve(\"第二个promise\"); &#125;, 1000);&#125;);Promise.all([p1, p2]).then(function (result) &#123; console.log(result); // [\"第一个promise\", \"第二个promise\"]&#125;); 上面的代码中，all接收一个数组作为参数，p1,p2是并行执行的，等两个都执行完了，才会进入到then，all会把所有的结果放到一个数组中返回，所以我们打印出我们的结果为一个数组。值得注意的是，虽然p2的执行顺序比p1快，但是all会按照参数里面的数组顺序来返回结果。 promise.race方法 race的意思为赛跑，因此，promise.race也是传入一个数组，但是与promise.all不同的是，race只返回跑的快的值，也就是说result返回比较快执行的那个。 12345678910111213141516171819202122 var p1 = new Promise(function (resolve) &#123; setTimeout(function () &#123; console.log(1); resolve(\"第一个promise\"); &#125;, 3000);&#125;);var p2 = new Promise(function (resolve) &#123; setTimeout(function () &#123; console.log(2); resolve(\"第二个promise\"); &#125;, 1000);&#125;);Promise.race([p1, p2]).then(function (result) &#123; console.log(result); &#125;);// 结果：// 2// 第二个promise// 1 在这边可以看到，传的值中，只有p2的返回了，但是p1没有停止，依然有执行。race的应用场景为，比如我们可以设置为网路请求超时。写两个promise，如果在一定的时间内如果成功的那个我们没有执行到，我们就执行失败的那个","categories":[],"tags":[]},{"title":"正则表达式","slug":"正则表达式","date":"2018-09-14T16:00:00.000Z","updated":"2018-09-16T04:06:13.237Z","comments":true,"path":"正则表达式/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/正则表达式/","excerpt":"","text":"正则表达式在平时工作中非常常见，工作中用到的大部分正则都是去网上搜索得来的，再复杂一点看着文档费时费力的拼凑一下。所以觉得很有必要对一些常用的正则内容进行一个归纳和总结。 概念： Regular Expression使用单个字符串来描述、匹配一系列符合某个语法规则的字符串。说简单了就是按照某种规则去匹配符合条件的字符串。 RegExp对象 javaScript中通过内置对象 RegExp 支持正则表达式，有两种方法实例化 RegExp 对象： 1.字面量2.构造函数 1.字面量假设你需要把一句英文里面的小写is匹配成大写的 IS，可以这样做：1234var reg = /is/;var text = 'He is a boy, This is a dog. Where is she?';var result = text.replace(reg,'IS');console.log(result) //He IS a boy, This is a dog. Where is she? 这样就把第一个英文单词’is’替换成了’IS’，假如你想把该句中所有的单词’is’都替换成’IS’,应该这样写：1234var reg = /is/g;var text = 'He is a boy, This is a dog. Where is she?';var result = text.replace(reg,'IS');console.log(result) //He IS a boy, ThIS IS a dog. Where IS she? 在正则的末尾加上’g’就好，’g’表示global，是全局匹配的意思。’g’是正则表达式的一个修饰符，修饰符有: ‘g’: global 全文搜索，不添加的话，搜索到第一个停止 ‘i’: ignore case 忽略大小写，默认大小写敏感 ‘m’: multiple 多行搜索，检测字符串中的换行符，主要是影响字符串开始标识符^和结束标识符$的使用 但是这样的话也改变了this中is的大小写，这显然不是我们想要的，所以这个时候可以这样做1234var reg = /\\bis\\b/g;var text = 'He is a boy, This is a dog. Where is she?';var result = text.replace(reg,'IS');console.log(result) //He IS a boy, This IS a dog. Where IS she? ‘\\b’:匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。这里的正则在’is’的前后都有’\\b’，这样就只能匹配单词’is’了。 2.构造函数倘若你需要使用构造函数的方式实例化正则，则上面的字面量形式可以改成这样：1234var reg = new RegExp('\\\\bis\\\\b','g');var text = 'He is a boy, This is a dog. Where is she?';var result = text.replace(reg,'IS');console.log(result) //He IS a boy, This IS a dog. Where IS she? 用这种方式就不需要’/‘符号开始和结尾以表示是正则了。但是里面的’\\’等特殊字符需要用’\\’转义。 “\\”:将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配一个换行符。串行“\\ \\”匹配“\\”而“\\ (”则匹配“(”。 元字符 正则表达式由两种基本字符类型组成： 原义文本字符，即代表它原本含义的字符 元字符，元字符是在正则表达式中有特殊含义的非字母字符，例如上文提到的’\\b’，表示匹配单词边界，并不是匹配’\\b’，在正则中主要存在这些特殊字符：*,+,?,$,^,.,|,\\,(,),{,},[,] 字符类（字符集合） 一般情况下，正则表达式一个字符对应字符串一个字符 思考： var text = ‘a1b2c3d4’; 把英文字母都换成X 但是更多的时候，我们匹配的并不是某个字符，而是符合一系列特征的字符串。这时候，我们就可以使用元字符’[]’来构建一个简单的类，所谓类是指符合某些特性的对象，一个泛指，而不是特指某个字符，例如：表达式’[abc]’把字符a或b或c归为一类，表达式可以匹配这样的字符。1234var reg = /[abc]/g;var text = 'a1b2c3d4';var result = text.replace(reg,'X');console.log(result); //X1X2X3d4 字符类取反使用元字符’^’创建 反向类/负向类。反向类的意思是不属于类的内容，表达式’[^abc]’表示不是字符a或b或c的内容,例如：1234var reg = /[^abc]/g;var text = 'a1b2c3d4';var result = text.replace(reg,'X');console.log(result); //aXbXcXXX 范围类 思考： var text = ‘a1b2c3d4z9’; 把英文字母都换成Q 倘若我们需要用字符类匹配数字，按照前面的匹配方式，书写可能会很麻烦，需要这样：’[0123456789]’，对于 a 到 z 的字符更是如此。 为此，正则表达式给我们提供了范围类，我们可以使用[a-z]来连接两个字符，表示从a到z的任意字符，这是一个闭区间，包含 a 和 z 本身。1234var reg = /[a-z]/g;var text = 'a1b2c3d4z9';var result = text.replace(reg,'Q');console.log(result); //Q1Q2Q3Q4Q9 可以发现，这样就方便了许多。此外，在’[]’组成的类的内部是可以连写的[a-zA-Z]，这样就形成了大写字母小写字母完全匹配:1234var reg = /[a-zA-Z]/g;var text = 'a1b2c3d4z9ASDFHDFH';var result = text.replace(reg,'Q');console.log(result); //Q1Q2Q3Q4Q9QQQQQQQQ 预定义类及边界 预定义类 思考： 匹配一个 ab+数字+任意字符 的字符串： 正则表达式提供预预定义类来匹配常见的字符类，让我们书写更方便。 字符 等价类 含义 . [^\\r\\n] 除了回车符和换行符之外的所有字符 \\d [0-9] 数字字符 \\D [^0-9] 非数字字符 \\s [\\t\\n\\x0B\\f\\r] 空白符 \\S [^\\t\\n\\x0B\\f\\r] 非空白符 \\w [a-zA-Z_0-9] 单词字符（字母、数字、下划线） \\w [a-zA-Z_0-9] 单词字符（字母、数字、下划线） \\W [^a-zA-Z_0-9] 非单词字符 1234var reg = /ab\\d./; //之前我们可能会这样写：ab[0-9][^\\r\\n]var text = 'absdlkjflab91323';var result = text.replace(reg,'AAAA');console.log(result); //absdlkjflAAAA323 边界 思考： var text = ‘He is a boy, This is a dog. Where is she?’; 我们在第一个例子中用到过’\\b’单词边界，这里我们做一个跟上面第一个例子相反的，只把’This’中的’is’替换为’IS’ 除了预定义类，正则表达式还提供了几个常用的边界字符。 字符 等价类 ^ 以xxx开始 $ 以xxx结束 \\b 单词边界 \\B 非单词边界 1234var reg = /\\Bis\\b/g;var text = &apos;He is a boy, This is a dog. Where is she?&apos;;var result = text.replace(reg,&apos;IS&apos;);console.log(result) //He is a boy, ThIS is a dog. Where is she? 在类’[]’中’^’表示取反，但是不在类中的时候’^’表示以xxx开始，’$’表示以xxx结束，这两个边界字符一般放在正则的开始和结束位置。 量词 倘若我们希望匹配一个连续出现20次的数字的字符串，通过我们之前学习的知识，我们可能会写出连续20个’\\d’。假如20次你还可以接受，那100次，1000次，甚至更多次，你怎么办？为了解决这个问题，正则表达式引入了量词的概念，下面是一些量词和他们的含义： 字符 含义 ？ 出现零次或一次（最多出现一次） + 出现一次或者多次（至少出现一次 * 出现零次或者多次（任意次） {n} 出现n次 {n,m} 出现n到m次 {n,} 至少出现n次 1234var reg = /\\d&#123;4&#125;[/-]\\d&#123;2&#125;[/-]\\d&#123;2&#125;/g;var text = &apos;2018-02-23，2018/02/24，2018~02/25&apos;;var result = text.replace(reg,&apos;匹配正确日期格式&apos;);console.log(result);//匹配正确日期格式，匹配正确的日期格式，2018~02/25 分组 思考： var text = ‘ByronByronByronnn’;将单词Byron替换为数字0 匹配字符串 Byron 连续出现3次的场景，根据前面所了解的，我们可能会这样写：Byron{3}。但是这样是错误的，试试你会发现只有Byronnn才能匹配成功，即最后的n重复了3次，并不能匹配整个单词重复三次的情况：1234var reg = /Byron&#123;3&#125;/g;var text = &apos;ByronByronByronnn&apos;;var result = text.replace(reg,&apos;0&apos;);console.log(result);//ByronByron0 那么，我们要怎么匹配Byron连续出现3次的情况呢，这时候，正则表达式的分组’()’就帮我们解决了这个问题：1234var reg = /(Byron)&#123;3&#125;/g;var text = 'ByronByronByronnn';var result = text.replace(reg,'0');console.log(result);//0nn 或有时候，我们可能会需要在匹配时用到或者的关系，利用之前的’[]’字符类（字符集合）可能只能匹配单个字符的或者关系，比如匹配a或b，你可以这样写：’[ab]’，但是如果你需要匹配的是一整个单词的或者关系呢，这个时候’[]’就不好使了。这时候，我们用’|’可以达到或的效果：1234567891011//匹配单词Byron或者Caspervar reg = /Byron|Casper/g;var text = &apos;ByronCasper&apos;var result = text.replace(reg,&apos;X&apos;);console.log(result);//XX//匹配Byr+on或Ca+spervar reg = /Byr(on|Ca)sper/g;var text = &apos;ByronsperByrCasper&apos;var result1 = text.replace(reg,&apos;X&apos;);console.log(result1);//XX 反向引用 思考：把日期’2015-12-25’替换成’12/25/2015’ 这时候，正则的反向引用就可以取到作用了。表达式在匹配时，表达式引擎会将小括号 “( )” 包含的表达式所匹配到的字符串记录（分组捕获）下来。在获取匹配结果的时候，小括号包含的表达式所匹配到的字符串可以单独获取。 在js中正则匹配成功的字符串可以用$1表示第一次匹配成功，$3表示第三次匹配成功的字符，以此类推至$99）。于是，上面的例子就可以这样写了：1234var reg = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/g;var text = '2015-12-25'var result = text.replace(reg,'$2/$3/$1');console.log(result);//12/25/2015 忽略分组在上面的反向引用中，我们默认是根据’()’全部捕获记录为$1~$99的，倘若我们想忽略某个捕获要怎么办呢？ 不希望捕获某些分组，只需要在分组内加上’?:’就可以了。1234var reg = /(?:Byron)(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/g;var text = 'Byron2016-12-05'var result = text.replace(reg,'$2/$3/$1');console.log(result);//12/05/2016 对象属性 思考： var reg1 = /\\w/; var reg2 = /\\w/g;那么reg1.test(‘a’)和 reg2.test(‘ab’)的结果分别是什么？ 我们在用正则表达式相关的方法时，经常会用到正则表达式相关的一些对象属性，下面我们总结一下正则表达式相关的对象属性： golbal: 是否全文搜索，默认false ignore case: 是否大小写敏感，默认false multiline: 多行搜索，默认false lastIndex: 是当前表达式匹配内容的最后一个字符的下一个位置 source: 正则表达式的文本字符串 其中前面三个我们在上文中已经提到过了，source的话，我们一起结合起来看看代码：12345678910111213var reg1 = /\\w/;var reg2 = /\\w/gim;console.log(reg1.global);//falseconsole.log(reg1.ignoreCase);//falseconsole.log(reg1.multiline);//falseconsole.log(reg2.global);//trueconsole.log(reg2.ignoreCase);//trueconsole.log(reg2.multiline);//trueconsole.log(reg1.source);//\\wconsole.log(reg2.source);//\\w 支持正则表达式的 String 对象的方法 支持正则表达式的 String 对象的方法有： search： 检索与正则表达式相匹配的值 match： 找到一个或多个正则表达式的匹配。 replace： 替换与正则表达式匹配的子串。 split： 把字符串分割为字符串数组。searchsearch() 方法用于检索字符串中指定的子字符串，或检索与正则表达式匹配的子字符串语法为stringObject.search(regexp),结果返回 stringObject 中第一个与 regexp 相匹配的子串的起始位置index，如果没有找到任何匹配的子串，则返回 -1。需要注意的是，search() 方法不执行全局匹配，它将忽略修饰符’g’,并且总是从字符串的开始进行检索。123456var str = 'a1b2c3d4';console.log(str.search('1')); //1console.log(str.search('10')); //-1console.log(str.search(/b2/)); //2console.log(str.search(/\\w\\d/g)); //0console.log(str.search(/\\w\\d/g)); //0 忽略'g',执行多次未返回不同结果 matchmatch() 方法将检索字符串，以找到一个或多个与 RegExp 匹配的文本，在 RegExp 是否有修饰符’g’影响很大。它返回指定的值，而不是字符串的位置。 语法为stringObject.match(searchvalue)或stringObject.match(regexp)，结果返回存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。 1.非全局调用 如果 regexp 没有标志 g ，那么 match() 方法就只能在字符串中执行匹配一次 如果没有找到任何匹配文本，返回 null 否则它将返回一个数组，其中存放了与它找到的匹配文本有关的信息： 数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。1234var reg3 = /\\d(\\w)\\d/;var str = '1a2b3c4d5e';var arr = str.match(reg3);console.log(arr);// [1a2, a] 全局调用全局调用就和 exec() 不同了： 如果 regexp 具有标志 g 则 match() 方法将执行全局检索，找到字符串中所有匹配的子字符串 没有找到任何匹配的子字符串则返回 null 如果找到了一个或者多个匹配字串，则返回一个数组 数组元素中存放的是字符串中所有匹配的字串，而且也没有index属性和input属性 1234var reg4 = /\\d(\\w)(\\w)\\d/g;var str = '$1az2bb3cy4dd5ee';var arr = str.match(reg4)console.log(arr); // [\"1az2\", \"3cy4\"] split我们经常用它把字符串分割为数组。但是你可能不知道，我们在一些复杂情况下我们可以使用正则表达式解决 123456789var str = 'a,b,c,d';var arr = str.split(',');console.log(arr); //['a','b','c','d']&lt;!--那如果是这样的字符串呢--&gt;var str = 'a1b2c3d';var arr = str.split(/\\d/);console.log(arr); //['a','b','c','d'] 其实，我们在用 split() 分割字符’,’的时候，split() 方法也是把’,’ 隐士转换成正则’/,/‘的, search() 方法和 replace() 方法也是一样的。 replacereplace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。语法为stringObject.replace(regexp/substr,replacement),结果返回一个新的字符串，是用 replacement 替换了 regexp 的第一次匹配或所有匹配之后得到的。","categories":[],"tags":[]},{"title":"js中this的指向","slug":"js中this的指向","date":"2018-07-21T09:38:00.000Z","updated":"2018-07-22T05:51:14.630Z","comments":true,"path":"js中this的指向/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/js中this的指向/","excerpt":"","text":"为什么要使用this? 解决的问题？ 可以先通过一个例子了解下1234567891011121314function speak()&#123; var name = this.name console.log(\"Hello I am --\" + name)&#125;var me = &#123; name: 'a', speak: speak&#125;var you = &#123; name: 'b', speak: speak&#125;me.speak() //Hello I am -- ayou.speak() //Hello I am -- b this可以在同一个执行环境中使用不同的上下文对象。它其实提供了一种更加优雅的方式来隐式“传递”一个对象引用，因此可以使API设计的更加简洁且易于复用。 定义：this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象其实关于this的指向问题可以从函数的执行调用过程中理解，当一个函数被调用时，会创建一个活动记录(执行上下文)。这个记录会包含函数在哪里被调用、函数的调用方法、传入的参数等信息，this也是这里的一个属性。当函数被某个对象调用时可以理解为在函数调用的那一刻它被调用对象拥有。所以this指向调用其的对象。 对于this的指向问题，一般都是根据以上的解释去理解，虽然在一般的情况下这样的理解是不会有问题的，但是当在某些场景下这样的解释并不是很准确，所以会让人感觉一直琢磨不透的感觉。今天可以就不同情况展开讨论下this指向的问题。看看下面的打印结果会是什么 12345678910111213141516// 例子1function test()&#123; var a = 10; console.log(this.a); console.log(this);&#125;test();// 例子二var b = 10;var o = &#123; b: 20, fn:function()&#123; console.log(this.b); &#125;&#125;o.fn(); 按照上面的定义this最终指向的是调用它的对象，这里的函数test实际是被Window对象所点出来的。所以例子1中的this指向的是windows。在例子2中函数的执行是通过o.fn()调用的，所以this的指向的当然是对象o了。这两个例子可以验证上面的定义，但是还是不够准确的。123456789// 例子三var b = 10;var o = &#123; b: 20, fn:function()&#123; console.log(this.b); &#125;&#125;window.o.fn(); 此时打印的应该是什么呢？这段代码和上面的那段代码几乎是一样的，但是这里的this为什么不是指向window，如果按照上面的理论，最终this指向的是调用它的对象，在此处就显得不是很准确了。所以关于函数中this的指向其实是可以分为三种情况的 如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window 如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。 如果一个函数中有this，这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象，这就可以解释例子三中的this不是指向window了那么以下的打印结果又应该是什么？12345678910111213// 例子4var o = &#123; a:10, b:&#123; a:12, fn:function()&#123; console.log(this.a); console.log(this); &#125; &#125;&#125;var j = o.b.fn;j(); 此处的this指向的是window,其实这里只需要理解清楚一句话”this永远指向的是最后调用它的对象”,也就是看它执行的时候是谁调用的，例子4中虽然函数fn是被对象b所引用，但是在将fn赋值给变量j的时候并没有执行所以最终指向的是window，这和例子3是不一样的，例子3是直接执行了fn。所以说，那例子5中的打印结果又应该是什么呢？1234567891011// 例子5function foo() &#123; console.log( this.a );&#125;var obj = &#123; a: 2, foo: foo &#125;;var bar = obj.foo; // 函数别名!var a = \"xxxxx\"bar(); 不同情况下this的使用1.构造函数版this123456// 例子6function Fn()&#123; this.user = \"lh\";&#125;var a = new Fn();console.log(a.user); 1234567891011121314//不使用new指向windowfunction Person (name) &#123; console.log(this) // window this.name = name;&#125;Person('inwe')//使用newfunction Person (name) &#123; this.name = name console.log(this) //people self = this &#125; var people = new Person('iwen') console.log(self === people) //true 这里之所以对象a可以点出函数Fn里面的user是因为new关键字可以改变this的指向，将这个this指向对象a，我们这里用变量a创建了一个Fn的实例（相当于复制了一份Fn到对象a里面），此时仅仅只是创建，并没有执行，而调用这个函数Fn的是对象a，那么this指向的自然是对象a，那么为什么对象Fn中会有user，因为已经复制了一份Fn函数到对象a中，用了new关键字就等同于复制了一份。 ！当this遇上return时1234567891011121314151617181920212223242526// 例子7function fn() &#123; this.user = 'lh'; return &#123;&#125;; &#125;var a = new fn; console.log(a.user);// 例子8function fn() &#123; this.user = 'lh'; return function()&#123;&#125;;&#125;var a = new fn; console.log(a.user)// 例子9function fn() &#123; this.user = 'lh'; return 1;&#125;var a = new fn; console.log(a.user); 由上可知，如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。 2.箭头函数中的this12345678var x=11;var obj=&#123; x:22, say:()=&gt;&#123; console.log(this.x); &#125;&#125;obj.say(); 箭头函数不是通过function关键字定义的，也就不遵循以上的this规则，而是“继承”外层作用域中的this指向。箭头函数中的this是在定义函数的时候绑定，而不是在执行函数的时候绑定。所谓的定义时候绑定，就是this是继承自父执行上下文！！中的this，比如这里的箭头函数中的this.x，箭头函数本身与say平级以key:value的形式，也就是箭头函数本身所在的对象为obj，而obj的父执行上下文就是window，因此这里的this.x实际上表示的是window.x，因此输出的是11。 改变this指向的几种方法（apply，call, bind）12345678var a = &#123; user:\"lh\", fn:function()&#123; console.log(this.user); &#125;&#125;var b = a.fn;b(); 此时要改变this的指向，可以通过call方法12345678var a = &#123; user:\"lh\", fn:function()&#123; console.log(this.user); &#125;&#125;var b = a.fn;b.call(a); 通过在call方法，给第一个参数添加要把b添加到哪个环境中，也就是说，this就会指向那个对象。call方法除了第一个参数以外还可以添加多个参数，如下 123456789var a = &#123; user:\"lh\", fn:function(p1, p2)&#123; console.log(this.user) console.log(p1+p2) &#125;&#125;var b = a.fn;b.call(a, 1, 3） 使用apply()方法，改变this指向的效果和call相似，在于他们传递的参数格式不同，第二个参数必须是一个数组，如下:123456789var a = &#123; user:\"lh\", fn:function(p1, p2)&#123; console.log(this.user) console.log(p1+p2) &#125;&#125;var b = a.fn;b.apply(a, [1, 3]） !当call和apply的第一个参数写的是null，那么this指向的是window对象 bind()方法 bind()方法也可用来改变this的指向，但是和call,apply方法在用法上有区别,如下: 12345678var a = &#123; user:\"lh\", fn:function()&#123; console.log(this.user); &#125;&#125;var b = a.fn;b.bind(a); 此时发现并不打印任何的结果，这是因为bind方法返回的是一个修改过后的函数,此时执行conole.log(b.bind(a))会得到的结果是：1234ƒ () &#123; console.log(this.user);&#125; call和apply都是改变上下文中的this并立即执行这个函数，bind方法可以让对应的函数想什么时候调就什么时候调用，并且可以将参数在执行的时候添加，这是它们的区别，根据自己的实际情况来选择使用。并且也是可以像call和apply一样传递参数","categories":[],"tags":[]},{"title":"前端路由实现原理","slug":"前端路由实现原理","date":"2018-07-21T03:04:46.000Z","updated":"2018-07-21T03:05:00.015Z","comments":true,"path":"前端路由实现原理/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/前端路由实现原理/","excerpt":"","text":"前端路由实现（history）了解： HTML5 history新增了两个API:history.pushState和history.replaceState 两个api都接受三个参数 状态对象（state object）：一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。 标题（title）：FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。 地址（URL）： 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。 相同之处是两个API都会操作浏览器的历史记录，而不会引起页面的刷新。不同之处在于pushState会增加一条新的历史记录，而replaceState则会替换当前的历史记录 大家可以先在控制台试试，看看地址栏发生了什么变化12345678window.history.pushState(null, null, \"test\");window.history.pushState(null, null, \"/test\");window.history.pushState(null, null, \"#/hello\");window.history.pushState(null, null, \"?name=\");&lt;/code&gt;&lt;/pre&gt; 实例演示 建立html文件，index.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;前端路由实现&lt;/title&gt; &lt;style&gt; .warp&#123; width:400px; height:400px; border:1px solid grey; margin:0 auto; &#125; .nav&#123; border-bottom:1px solid grey; &#125; .nav li&#123; display:inline-block; list-style:none; &#125; .nav li a&#123; display:inline-block; text-decoration: none; padding:10px 15px; &#125; .router&#123; padding:20px; &#125; a&#123; cursor: pointer; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;section class=\"warp\"&gt; &lt;div class=\"nav\"&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"javascript:void(0)\" data-path=\"index\"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"javascript:void(0)\" data-path=\"news\"&gt;新闻&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"javascript:void(0)\" data-path=\"about\"&gt;关于&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div id=\"router\" class=\"router\"&gt; &lt;!-- 内容加载区域 --&gt; &lt;/div&gt; &lt;/section&gt; &lt;script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"&gt;&lt;/script&gt; &lt;script src=\"./router.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 此时的页面为： 引入js文件router.js12345678910(function()&#123; history.replaceState(null,null,'');//最开始的状态，采用replace直接替换 $('#router').html('&lt;p&gt;显示内容区域&lt;/p&gt;') $('a').on('click',function()&#123; console.log(this.text) var text = this.text; $('#router').html('&lt;p&gt;'+ text +'&lt;/p&gt;') history.pushState(null,null,'#/'+text); &#125;) &#125;)() 此时点击导航按钮时 此时当点击不同的导航项的时候，地址栏上的路由进行了对应的改变，展现的内容区域也发生了变化。但是实际上这个并没有实现路由的真正含义。因为内容部分的改变是根据事件的触发而获得当前的内容。 此时如果点击浏览的前进和后退按钮，内容是无法监听到地址栏的变化而作出改变的 在此基础上变动一下实现方式，将router.js改为：12345678910111213141516171819202122232425 // 状态版(function()&#123; var count = [0,0,0] $('#router').html('&lt;p&gt;首页&lt;/p&gt;'+count[0]+'&lt;p&gt;新闻&lt;/p&gt;'+count[1]+'&lt;p&gt;关于&lt;/p&gt;'+count[2]) // history.replaceState(count,null,'');//最开始的状态，采用replace直接替换 for(var i = 0 ; i&lt;$('a').length; i++)&#123; $('a')[i].index = i $('a').eq(i).on('click',function()&#123; console.log(this.index); var index = this.index; count[index]++; $('#router').html('&lt;p&gt;首页&lt;/p&gt;'+count[0]+'&lt;p&gt;新闻&lt;/p&gt;'+count[1]+'&lt;p&gt;关于&lt;/p&gt;'+count[2]) console.log(count) history.pushState(count,null,'#/count'+count[index]);//之后的状态，需要进行保存 &#125;) &#125; //监听history其他api导致地址栏url改变事件 window.addEventListener('popstate',function(e)&#123; console.log(e.state); var state = e.state; $('#router').html('&lt;p&gt;首页&lt;/p&gt;'+state[0]+'&lt;p&gt;新闻&lt;/p&gt;'+state[1]+'&lt;p&gt;关于&lt;/p&gt;'+state[2]) &#125;)&#125;)() 此时的思路是做一个状态记录，记录下每个导航按钮被点击的次数。当每次执行点击导航栏切换的时候，通过history.pushState（count， null, ‘#/count’+count[index]）这个api,传递了状态对象在内，并在第三个参数中将当前已点击数作为地址栏的显示数据。示例如下： !!当活动历史记录条目更改时，将触发popstate事件。如果被激活的历史记录条目是通过对history.pushState（）的调用创建的，或者受到对history.replaceState（）的调用的影响，popstate事件的state属性包含历史条目的状态对象的副本。 需要注意的是调用history.pushState()或history.replaceState()不会触发popstate事件。只有在做出浏览器动作时，才会触发该事件，如用户点击浏览器的回退按钮（或者在Javascript代码中调用history.back()） 此处通过记录下每次的点击次数来解释了pushState的用法以及参数，其实简单的写法可以表达为：123456789101112131415161718192021(function()&#123; var url = '内容展示'; history.replaceState(url,null,'');//最开始的状态，采用replace直接替换 $('#router').html('&lt;p&gt;'+url+'&lt;/p&gt;') $('a').on('click',function()&#123; console.log(this.text) url = this.text; $('#router').html('&lt;p&gt;'+ url +'&lt;/p&gt;') history.pushState(url,null,'#/'+url); &#125;) window.addEventListener('popstate',function(e)&#123; console.log(e.state); url = e.state $('#router').html('&lt;p&gt;'+ url +'&lt;/p&gt;') &#125;); &#125;)() 现在的效果看上去其实我们相当于回到了远点，但是解决了无法监听地址栏的地址变化问题，是通过监听popstate来作出响应的。现在还只是看了这一部分的路由实现机制，要通过监听作出不同的响应。还需要更深入的与hash进行对比。","categories":[],"tags":[]},{"title":"Vue的渲染函数","slug":"Vue的渲染函数","date":"2018-04-22T01:06:59.000Z","updated":"2018-06-29T11:11:17.768Z","comments":true,"path":"Vue的渲染函数/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/Vue的渲染函数/","excerpt":"","text":"在Vue中，我们都是绝大部分都是使用template来创建html,框架给予了很好的支持，使用起来也很方便，符合常规的编程方式。但是在一些特殊的场景需要有特殊的判断时，使用template显得会低效率，并且代码的可读性也不高。此时我们可以用到render函数，使用javascript的完全编程能力来实现html的创建。情景：12//要求是通过size的值来动态生成title-size标签的组件&lt; title-size :size=\"1\"&gt;Hello world!&lt; /title-size&gt; 此时采用之前的常规做法，我们会选择 1234567891011121314151617181920&lt;script type=\"text/x-template\" id=\"titleSize-template\"&gt; &lt;h1 v-if=\"size === 1\"&gt; &lt;slot&gt;&lt; /slot&gt; &lt;/h1&gt; &lt;h2 v-else-if=\"size === 2\"&gt; &lt;slot&gt;&lt; /slot&gt; &lt;/h2&gt; &lt;h3 v-else-if=\"size === 3\"&gt; &lt;slot&gt;&lt; /slot&gt; &lt;/h3&gt; &lt;h4 v-else-if=\"size === 4\"&gt; &lt;slot&gt;&lt; /slot&gt; &lt;/h4&gt; &lt;h5 v-else-if=\"size === 5\"&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/h5&gt; &lt;h6 v-else-if=\"size === 6\"&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/h6&gt; &lt;/script&gt; 123456789Vue.component('anchored-heading', &#123; template: '#titleSize-template', props: &#123; size: &#123; type: Number, required: true &#125; &#125;&#125;) 此时的组件根据prop取到的数据size值进行选择标签的类型，从而完成动态生成title-size标签的组件。但是这样的话是我们在template中定义不同的h1~h6的标签，然后再去根绝size的值来决定取得是哪个标签，这样的话在数据的处理上显得被动不灵活。并且用这种方式处理时，需要重复使用&lt; slot&gt;&lt; /slot&gt;来插入title-size的内容，反正总结起来就是低效。 这个时候可以尝试render函数重写上面的例子1234567891011121314Vue.component('anchored-heading', &#123; render: function (createElement) &#123; return createElement( 'h' + this.size, // tag name 标签名称 this.$slots.default // 子组件中的阵列 ) &#125;, props: &#123; size: &#123; type: Number, required: true &#125; &#125;&#125;) 此时就显得很灵活，直接根据传入的size值进行创建对应的标签，并且也不需要再写那么多冗长的代码了。注释： this.$slots.default对用 template的的使用没有name（作用相当于以上例子中的slot标签） 节点、树以及虚拟 DOM深入渲染函数之前，我们需要了解一些浏览器的工作原理，当浏览器读html代码时，它会建立一个“DOM 节点”树来保持追踪。每个元素都是一个节点。每片文字也是一个节点。甚至注释也都是节点。一个节点就是页面的一个部分。就像家谱树一样，每个节点都可以有孩子节点 (也就是说每个部分可以包含其它的一些部分)。js的运行速度是很快的，但是dom的渲染确实很慢的，往往是影响性能的一个重要因素。 但是vue是数据驱动的，不需要我们去手动更新节点。只需要告诉 Vue 你希望页面上的 HTML 是什么1&lt;h1&gt;&#123;&#123; testData &#125;&#125;&lt;/h1&gt; 123render: function (createElement) &#123; return createElement('h1', this.testData)&#125; 当数据发生改变时，页面的dom都会被及时高效的去渲染，而不需要自己去做其他的处理。 虚拟 DOMVue 通过建立一个虚拟 DOM 对真实 DOM 发生的变化保持追踪。可以做个例子： 1return createElement('h1', this.testData) createElement 返回的是什么呢？其实不是一个实际的 DOM 元素。它更准确的名字可能是 createNodeDescription，因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，及其子节点。我们把这样的节点描述为“虚拟节点 (Virtual Node)”，也常简写它为“VNode”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。 createElement 参数1234567891011121314151617181920212223242526// @returns &#123;VNode&#125; 返回的是一个描述对象它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点createElement( // &#123;String | Object | Function&#125; // 一个 HTML 标签字符串，组件选项对象，或者 // 解析上述任何一种的一个 async 异步函数，必要参数。 'div', // &#123;Object&#125; // 一个包含模板相关属性的数据对象 // 这样，可以在 template 中使用这些属性。可选参数。 &#123; &#125;, // &#123;String | Array&#125; // 子节点 (VNodes)，由 `createElement()` 构建而成， // 或使用字符串来生成“文本节点”。可选参数。 [ '先写一些文字', createElement('h1', '一条数据'), createElement(MyComponent, &#123; props: &#123; someProp: 'foobar' &#125; &#125;) ]) 深入 data 对象在使用data时要注意：在模板语法中，v-bind:class 和 v-bind:style ，会被特别对待一样，在 VNode 数据对象中，下列属性名是级别最高的字段。该对象也允许你绑定普通的 HTML 特性，就像 DOM 属性一样，比如 innerHTML (这会取代 v-html 指令)。（此处的官方文档写的很全了，就直接拿过来了） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&#123; // 和`v-bind:class`一样的 API 'class': &#123; foo: true, bar: false &#125;, // 和`v-bind:style`一样的 API style: &#123; color: 'red', fontSize: '14px' &#125;, // 正常的 HTML 特性 attrs: &#123; id: 'foo' &#125;, // 组件 props props: &#123; myProp: 'bar' &#125;, // DOM 属性 domProps: &#123; innerHTML: 'baz' &#125;, // 事件监听器基于 `on` // 所以不再支持如 `v-on:keyup.enter` 修饰器 // 需要手动匹配 keyCode。 on: &#123; click: this.clickHandler &#125;, // 仅对于组件，用于监听原生事件，而不是组件内部使用 // `vm.$emit` 触发的事件。 nativeOn: &#123; click: this.nativeClickHandler &#125;, // 自定义指令。注意，你无法对 `binding` 中的 `oldValue` // 赋值，因为 Vue 已经自动为你进行了同步。 directives: [ &#123; name: 'my-custom-directive', value: '2', expression: '1 + 1', arg: 'foo', modifiers: &#123; bar: true &#125; &#125; ], // Scoped slots in the form of // &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125; scopedSlots: &#123; default: props =&gt; createElement('span', props.text) &#125;, // 如果组件是其他组件的子组件，需为插槽指定名称 slot: 'name-of-slot', // 其他特殊顶层属性 key: 'myKey', ref: 'myRef'&#125; ！注意：VNodes 必须唯一","categories":[],"tags":[]},{"title":"Vue.js可复用性","slug":"Vue-js可复用性","date":"2018-04-14T15:54:51.000Z","updated":"2018-06-29T11:00:54.459Z","comments":true,"path":"Vue-js可复用性/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/Vue-js可复用性/","excerpt":"","text":"混入（mixins）在实际的应用中，有很多的业务代码是可以重复使用的，vue.js本身是一个注重于高效率的框架，所以也提供了组件中的复用功能。混入 (mixins) 是一种分发 Vue组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。如下： 123456789101112131415161718// 定义一个混入对象var mixinTest = &#123; created: function () &#123; this.mixinMethod() &#125;, methods: &#123; mixinMethod: function () &#123; console.log('mixinMethod from mixin!') &#125; &#125;&#125;// 定义一个使用混入对象的组件var Component = Vue.extend(&#123; mixins: [mixinMethod]&#125;)var component = new Component() // =&gt; \"hello from mixin!\" 组件和混入对象含有同名选项时 从中可以发现当组件混入对象时，对象的方法以及钩子都被混入了该组件的本身。这种方式是很灵活的。那要是组件和混入对象含有同名选项时，也是有规则的，比如，当数据上和组件有同名时，以组件的数据为先。 12345678910111213141516171819202122var mixin = &#123; data: function () &#123; return &#123; testA: 'aaaa', testB: 'bbbb' &#125; &#125;&#125;new Vue(&#123; mixins: [mixin], data: function () &#123; return &#123; testA: 'AAAA', testC: 'CCCC' &#125; &#125;, created: function () &#123; console.log(this.$data) // =&gt; &#123; testA: \"AAAA\", testB: \"bbbb\", testC: \"CCCC\" &#125; &#125;&#125;) mixins对象里的testA和testB混入到了组件中的data中，同时出现了testA与组件同名，所以优先保留了组件的数据。 混入对象与组件具有同名钩子函数时123456789101112131415var mixin = &#123; created: function () &#123; console.log('混入对象的钩子') &#125;&#125;new Vue(&#123; mixins: [mixin], created: function () &#123; console.log('组件的钩子') &#125;&#125;)// =&gt; \"混入对象的钩子\"// =&gt; \"组件的钩子\" 可以发现混入对象的钩子和组件的钩子都会执行，但是会先执行混入对象的钩子 值为对象的选项时，例如：methods，components等的时候1234567891011121314151617181920212223242526var mixin = &#123; methods: &#123; mixinsMethod: function () &#123; console.log('mixinsMethod') &#125;, sameMethod: function () &#123; console.log('from mixin') &#125; &#125;&#125;var vm = new Vue(&#123; mixins: [mixin], methods: &#123; selfMethod: function () &#123; console.log('selfMethod') &#125;, sameMethod: function () &#123; console.log('from self') &#125; &#125;&#125;)vm.mixinsMethod() // =&gt; \"mixinsMethod\"vm.selfMethod() // =&gt; \"selfMethod\"vm.sameMethod() // =&gt; \"from self\" 由上可得，在值为对象的混入对象混入时，这些将和组件原有的选项混合一起成为一个对象，当对象的键名与组件的键名出现重复时，会使用组件的键名。 全局混入以上列举的都是单独的引入到某一个组件中使用。也可以全局注册混入对象。这样的话所有的实例就都会被混入的对象所作用。也可以根据自己需要做成一个具体的使用工具类。供全局所有的实例使用。不过也要小心使用，毕竟会影响到所有的组件，需要结合实际场景使用。 123456789101112Vue.mixin(&#123; created: function () &#123; var option = this.$options.text if (option) &#123; console.log(option) &#125; &#125;&#125;)new Vue(&#123; text: 'globalMixins!'&#125;)// =&gt; \"globalMixins!\"","categories":[],"tags":[]},{"title":"Vue的内容分发slot的使用","slug":"Vue的内容分发slot的使用","date":"2018-04-14T15:48:31.000Z","updated":"2018-06-29T11:08:09.187Z","comments":true,"path":"Vue的内容分发slot的使用/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/Vue的内容分发slot的使用/","excerpt":"","text":"什么是内容分发？?概括：将父组件的内容放到子组件指定的位置 场景：在使用组件时，我们常常需要像这样组合使用1234&lt;app&gt; &lt;app-header&gt;&lt;/app-header&gt; &lt;app-footer&gt;&lt;/app-footer&gt;&lt;/app&gt; 此时有两个点需要注意： &lt; app&gt; 组件不确定自己所接收的数据。这是由使用 &lt; app&gt; 的父组件所决定的。 &lt; app&gt; 作为一个组件使用，可能有自己的模板。 所以为了让组件可以很好的组合使用，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为内容分发，也就是将父组件的内容放到子组件的指定位置。 先了解一下 ‘编译作用域’ 的概念 : 父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译!例如： 123&lt;child-component&gt; &#123;&#123; message &#125;&#125;&lt;/child-component&gt; 此时的message应该绑定的是父组件的数据还是子组件的数据？答案是父组件，这就是编译作用域。再看一个很容易犯错误的例子： 12//childProperty是子组件中的属性，此时的代码不会如我们预期生效。父组件模版不能取到子组件中的状态&lt;child-component v-show=\"childProperty\"&gt;&lt;/child-component&gt; 根据编译作用域，此时正确的做法应该是在子组件模版中进行操作，绑定到相对应的节点中，如下： 123456789Vue.component('child-component', &#123; // 有效，因为是在正确的作用域内 template: '&lt;div v-show=\"childProperty\"&gt;Child&lt;/div&gt;', data: function () &#123; return &#123; childProperty: true &#125; &#125;&#125;) 单个插槽场景： 当在父组件模版中使用子组件时，父组件的内容将会被丢弃，如下子组件child-component：123&lt;div&gt; &lt;h2&gt;我是子组件的标题&lt;/h2&gt;&lt;/div&gt; 父组件模板: 1234567&lt;div&gt; &lt;h1&gt;我是父组件的标题&lt;/h1&gt; &lt;child-component&gt; &lt;p&gt;这是一些初始内容&lt;/p&gt; &lt;p&gt;这是更多的初始内容&lt;/p&gt; &lt;/child-component&gt;&lt;/div&gt; 此时的渲染结果为： 123456&lt;div&gt; &lt;h1&gt;我是父组件的标题&lt;/h1&gt; &lt;div&gt; &lt;h2&gt;我是子组件的标题&lt;/h2&gt; &lt;/div&gt;&lt;/div&gt; 此时父组件里面的内容就会被替换，此时的解决方法是可以使用slot单个插槽，例如在上面的子组件child-component中: 123456&lt;div&gt; &lt;h2&gt;我是子组件的标题&lt;/h2&gt; &lt;slot&gt; 在没有要分发的内容时才会显示。 &lt;/solt&gt;&lt;/div&gt; 此时的渲染结果就是 ： 12345678&lt;div&gt; &lt;h1&gt;我是父组件的标题&lt;/h1&gt; &lt;div&gt; &lt;h2&gt;我是子组件的标题&lt; /h2&gt; &lt;p&gt;这是一些初始内容&lt; /p&gt; &lt;p&gt;这是更多的初始内容&lt; /p&gt; &lt;/div&gt;&lt;/div&gt; 此时的父组件的内容不会被丢弃。子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 DOM 位置，并替换掉插槽标签本身。最初在 标签中的任何内容都被视为备用内容。备用内容在子组件的作用域内编译，并且只有在宿主元素为空，且没有要插入的内容时才显示备用内容。 具名插槽 元素可以用一个特殊的特性 name 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 slot 特性的元素。仍然可以有一个匿名插槽，它是默认插槽，作为找不到匹配的内容片段的备用插槽。如果没有默认插槽，这些找不到匹配的内容片段将被抛弃。如下一个child-layout： 1234567891011&lt;div class=\"container\"&gt; &lt;header&gt; &lt;slot name=\"header\"&gt;&lt;/slot&gt; &lt;/header&gt; &lt;main&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/main&gt; &lt;footer&gt; &lt;slot name=\"footer\"&gt;&lt;/slot&gt; &lt;/footer&gt;&lt;/div&gt; 父组件模板 12345&lt;child-layout&gt; &lt;h1 slot=\"header\"&gt;页面标题&lt;/h1&gt; &lt;p&gt;主要内容&lt; /p&gt; &lt;p slot=\"footer\"&gt;一些信息&lt;/p&gt;&lt;/child-layout&gt; 此时的渲染结果为： 1234567891011&lt;div class=\"container\"&gt; &lt;header&gt; &lt;h1&gt;页面标题&lt;/h1&gt; &lt;/header&gt; &lt;main&gt; &lt;p&gt;主要内容。&lt;/p&gt; &lt;/main&gt; &lt;footer&gt; &lt;p&gt;一些信息&lt;/p&gt; &lt;/footer&gt;&lt;/div&gt; 由于使用了具名插槽，也就是使用了slot的name属性，使得父组件的内容被插到了子组件的指定位置。由于在子组件的main中使用了匿名slot,所以在父组件的模版中的p标签也没有用name属性，所以就行默认配对，如果此时没有匿名slot那么p标签的内容将会被抛弃。 作用域插槽作用域插槽是一种特殊类型的插槽，用作一个 (能被传递数据的) 可重用模板，来代替已经渲染好的元素。在子组件中，只需将数据传递到插槽，就像你将 prop 传递给组件一样,例如在子组件中： 123&lt;div class=\"child\"&gt; &lt;slot data=\"data from child\"&gt;&lt;/slot&gt;&lt;/div&gt; 此时在父组件模版中，必须要有&lt; template &gt;元素存在，并且要使用特殊属性slot-scope，以此表示它是作用域插槽的模板。slot-scope 的值将被用作一个临时变量名，此变量接收从子组件传递过来的 prop 对象，比如现在有父组件： 12345678&lt;div class=\"parent\"&gt; &lt;child&gt; &lt;template slot-scope=\"props\"&gt; &lt;span&gt;data from parent&lt;/span&gt; &lt;span&gt;&#123;&#123; props.data &#125;&#125;&lt;/span&gt; &lt;/template&gt; &lt;/child&gt;&lt;/div&gt; 此时渲染的结果是： 123456&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt; &lt;span&gt;data from parent&lt;/span&gt; &lt;span&gt;data from child&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;","categories":[],"tags":[]},{"title":"vue组件间的通信","slug":"vue组件间的通信","date":"2018-04-07T15:21:28.000Z","updated":"2018-06-29T11:16:57.564Z","comments":true,"path":"vue组件间的通信/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/vue组件间的通信/","excerpt":"","text":"组件间的数据传递 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于组件实例的作用域是单独的。所以就不能在一个组件中直接引用另一个组件中的数据，但是在一个项目中数据的处理往往是很频繁的，并且组件设计初衷就是要配合使用的，通过组件间的关联，来更加高效的处理一些问题。所以，简单的介绍一下组件组合后组件间互相通信的方式 1.父组件 —-&gt; 子组件（prop）使用 Prop传递数据&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;组件的孤立作用域，使得子组件的模板内不能直接引用父组件的数据，在这里可以通过prop进行下发,例如： 12345678910111213141516var child = &#123; // 声明 props props: ['message'], // 就像 data 一样，prop 也可以在模板中使用 template: '&lt;div&gt;&#123;&#123;message&#125;&#125;我是一个子组件!&lt;/div&gt;'&#125;export default &#123; components: &#123; 'children-componment': child &#125;, data () &#123; return &#123; msg: 'Welcome to Your Vue.js App' &#125; &#125;&#125; 然后通过向组件传入一个字符串： 1&lt;children-componment message=\"hello\" &gt;&lt; /children-componment&gt; 在此处子组件 children-componment显式地用 props 选项声明预期的数据，在使用时又传入字符串，则可将数据下发到子组件中 动态 Prop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;往往我们需要子组件来实时的跟踪父组件的数据变化，以做及时的关联处理。此时可以用 v-bind 来动态地将 prop 绑定到父组件的数据。所以每当父组件的数据变化时，该变化也会传导给子组件，可以跟着一起变化： 12345678910111213141516171819202122232425&lt;template&gt; &lt;div class=\"hello\"&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;input v-model = \"parentMsg\"&gt; &lt;br&gt; &lt;children-componment :my-message=\"parentMsg\" &gt;&lt;/children-componment&gt; &lt;/div&gt;&lt;/template&gt;var child = &#123; // 声明 props props: ['myMessage'], // 就像 data 一样，prop 也可以在模板中使用 template: '&lt;div&gt; &#123;&#123;myMessage&#125;&#125; 我是一个子组件!&lt;/div&gt;'&#125;export default &#123; components: &#123; 'children-componment': child &#125;, data () &#123; return &#123; msg: 'Welcome to Your Vue.js App', parentMsg: 'Message from parent' &#125; &#125;&#125; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此时的输入框input是存在于父组件，通过v-model绑定parentMsg,并且将值传递给子组件&lt; children-componment&gt;&lt; /children-componment&gt;，此时的子组件接收的值也是随着父组件的变化而动态改变的。 单向数据流（数据传递过程中需要解决的问题）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prop 可以实现从父组件到子组件的数据传递，但是同时也要注意，prop是单向绑定的。这也就是意味着当父组件的属性变化时，将传导给子组件，但是当子组件发生改变时却不会反馈给父组件。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。所以存在着两个容易出错的场景： Prop 作为初始值传入后，子组件想把它当作局部数据来用 解决方法 (定义一个局部变量，并用 prop 的值初始化这个局部变量：)： 12345678props: ['myMessage'],// 就像 data 一样，prop 也可以在模板中使用template: '&lt; div&gt; &#123;&#123;variable&#125;&#125; 我是一个子组件!&lt; /div&gt;', data: function () &#123; return &#123; variable: this.myMessage &#125;&#125; Prop 作为原始数据传入，由子组件处理成其它数据输出 1234567props: ['param'],computed: &#123;//handleParam为处理过可使用的数据 handleParam: function () &#123; return this.param+5 &#125;&#125; ！！！注：不能在子组件内部改变 prop 2.子组件 —-&gt; 父组件（绑定自定义事件）自定义事件子组件向父组件传递数据使用Vue 的自定义事件系统实现，每个 Vue 实例实现的事件接口： 使用 $on(eventName) 监听事件 使用 $emit(eventName, optionalPayload) 触发事件 123456789//此处跟着官方文档的例子来梳理一遍&lt;template&gt; &lt;div&gt; &lt;h1&gt;&#123;&#123;total&#125;&#125;&lt;/h1&gt; //3.组件监听到'increment'事件，并且执行'incrementTotal'方法，改变父组件中的total的值 &lt;children-componment v-on:increment=\"incrementTotal\"&gt;+&lt;/children-componment&gt; &lt;children-componment v-on:increment=\"incrementTotal\"&gt;+&lt;/children-componment&gt; &lt; /div&gt; &lt; /template&gt; 12345678910111213141516171819202122232425262728293031var child = &#123;//1.当子组件的按钮按下时执行incrementCounter方法 template: '&lt;button v-on:click=\"incrementCounter\"&gt;子组件&#123;&#123; counter &#125;&#125;&lt;/button&gt;', data: function () &#123; return &#123; counter: 0 &#125; &#125;, methods: &#123; 2.执行方法，将counter的值加1，并且触发了一个'increment'的事件 incrementCounter: function () &#123; this.counter += 1 this.$emit('increment') &#125;, &#125;&#125;export default &#123; data: function () &#123; return &#123; total: 0 &#125; &#125;, methods: &#123; incrementTotal: function () &#123; this.total += 1 &#125; &#125;, components: &#123; 'children-componment': child &#125;,&#125; 子组件件向父组件传递数据的过程如上注释所标的序号所示： 1.当子组件的按钮按下时执行incrementCounter方法 2.执行incrementCounter方法，将counter的值加1，并且触发了一个’increment’的事件 3.组件监听到’increment’事件，并且执行’incrementTotal’方法，改变父组件中的total的值 如何使用载荷 (payload) 数据，就在刚刚的例子中稍加修改：1234567891011121314var child = &#123; template: '&lt; button v-on:click=\"incrementCounter\"&gt;子组件&#123;&#123; counter &#125;&#125;&lt; /button&gt;', data: function () &#123; return &#123; counter: 0 &#125; &#125;, methods: &#123; incrementCounter: function () &#123; this.counter += 1 this.$emit('increment',&#123;number:3&#125;) &#125;, &#125;&#125; 12345678910111213data: function () &#123; return &#123; total: 0 &#125; &#125;, methods: &#123; incrementTotal: function (payload) &#123; this.total += payload.number &#125; &#125;, components: &#123; 'children-componment': child &#125;, 此时点击一次按钮时，total就是加3，3即为传过来的payload的数据 3.非父子组件的数据传递 （bus总线）非父子组件之间也需要有数据的传递，此时可以使用空的vue实例bus总线 123456// 触发组件 A 中的事件bus.$emit('selected')// 在组件 B 中监听事件bus.$on('selected', function () &#123; // ...&#125;) 简单的数据交互可以使用bus总线的方法，但是在较为复杂的情境下，会使用vuex状态管理来实现。这个会在后续的学习中进一步深入了解，并作分享。","categories":[],"tags":[]},{"title":"Vue的组件的概念与基本使用","slug":"Vue的组件的概念与基本使用","date":"2018-04-07T02:41:25.000Z","updated":"2018-06-29T11:13:45.885Z","comments":true,"path":"Vue的组件的概念与基本使用/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/Vue的组件的概念与基本使用/","excerpt":"","text":"什么是vue的组件（what）? &nbsp;&nbsp;组件(Component)是vue.js中很强大的一个功能，可以将一些可重用的代码进行封重用。所有的 Vue 组件同时也是 Vue 的实例，可以接受使用相同的选项对象和提供相同的生命周期钩子。 一句话概括：组件就是可以扩展HTML元素，封装可重用的HTML代码，可以将组件看作自定义的HTML元素。 如何使用组件（how）? 前提条件: 使用组件名的时候是需要先实例化Vue的，因为组件现在是扩展在Vue中，想使用Vue中的组件就需要先实例化获得这个组件才能够使用 创建组件创建组件即在Vue构造函数中通过extend()方法添加该组件（ps：可以理解成在刚开学的时候，老师不认识你，但是知道有泡泡这个人） 注册组件注册组件即在Vue构造函数中通过一个属性名与之关联在一起，有点像var name=’paopao’;这个时候 temp就是泡泡了（ps：这个时候老师把花名册上的’泡泡’和人对应起来了）组件的注册可分为全局注册与局部注册，区别：注册的地方不一致；全局注册就是只要是实例化Vue的范围都可以使用该组件，局部注册就是只能在某一个Vue实例的范围内使用该组件 全局注册（使用 Vue.component(tagName, options)） 1234567891011121314//使用组件 &lt;div id=\"app\"&gt; &lt;my-component&gt;&lt;/my-component&gt; &lt;/div&gt;//确保在初始化根实例之前注册组件Vue.component('my-component', &#123; template: '&lt;div&gt; component test! &lt;/div&gt;'&#125;)// 创建根实例new Vue(&#123; el: '#app', components: &#123; App &#125;, template: '&lt;App/&gt;'&#125;) 最终渲染为：123&lt;div id=\"app\"&gt; &lt;div&gt;component test!&lt;/div&gt;&lt;/div&gt; 局部注册 每个组件都注册到全局的方式显然很不合理，更多的时候采用的往往是局部注册的方式。可以通过某个 Vue 实例/组件的实例选项 components 注册仅在其作用域中可用的组件 123456789var Child = &#123; template: '&lt;div&gt;一个局部注册的组件!&lt;/div&gt;'&#125;new Vue(&#123; components: &#123; // &lt; localRegistration&gt; 只在父组件模板中才可用 'localRegistration': Child &#125;&#125;) 使用组件 这个时候就可以在dom中添加所创建的组件名（这个时候你终于可以以’泡泡’的名义去做点什么事了，比如上课，去图书馆等） Dom模版解析事项 &nbsp;&nbsp; 当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。要特别注意的是，像 &lt; ul&gt;、&lt; ol&gt;、&lt; table&gt;、&lt; select&gt; 这样的元素里允许包含的元素有限制，而另一些像 &lt; option&gt; 这样的元素只能出现在某些特定元素的内部。 例如(&lt; my-row&gt;为自定义的组件)：123&lt;table&gt; &lt;my-row&gt;&lt;/my-row&gt;&lt;/table&gt; 此时的自定义组件 &lt; my-row&gt; 被当作无效的内容，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。而此时的table标签还没有被解析，所以在往里面放入自定义组件的时候会导致错误的渲染结果。此时的解决方法是可以使用特殊的 is 特性： 123&lt;table&gt; &lt;tr is=\"my-row\"&gt;&lt;/tr&gt;&lt;/table&gt; !!! 如果使用来自以下来源之一的字符串模板，则没有此限制: &lt; script type=”text/x-template”&gt; JavaScript 内联模板字符串 (通过内联的方式使其一同进行加载) .vue 组件 例如： 12345678new Vue(&#123; el: '#app', components:&#123; 'selectcomp':&#123; template: ' &lt;select&gt; &lt;optioncomp&gt;&lt;/optioncomp&gt;&lt;/select&gt;' &#125; &#125; &#125;) Vue 实例时传入的选项中data 必须是函数 如果这样的写法： 123data: &#123; msg: 'Welcome to Your Vue.js App'&#125; 将会报错：1234//Vue 会停止运行，并在控制台发出警告，告诉你在组件实例中 data 必须是一个函数。 [HMR] Waiting for update signal from WDS...vue.esm.js?efeb:591 [Vue warn]: The \"data\" option should be a function that returns a per-instance value in component definitions. 举个例子来对比一下： 12345&lt; div id=\"example\"&gt; &lt;simple-counter&gt;&lt;/simple-counter&gt; &lt;simple-counter&gt;&lt;/simple-counter&gt; &lt;simple-counter&gt;&lt;/simple-counter&gt;&lt;/div&gt; 12345678910111213var data = &#123; counter: 0 &#125;Vue.component('simple-counter', &#123; template: '&lt; button v-on:click=\"counter += 1\"&gt;&#123;&#123; counter &#125;&#125;&lt; /button&gt;', // data 的确是一个函数了，因此 Vue 不会警告， // 但是我们却给每个组件实例返回了同一个对象的引用(此处是为了做对比) data: function () &#123; return data &#125;&#125;)new Vue(&#123; el: '#example'&#125;) 现在的结果是有三个可以计数的按钮，但是不论点击的是哪一个，所有的按钮的所记数都会加1，因为每个组件实例返回的是同一个对象的引用，不论哪个按钮的对数据进行操作，都会影响到其他的按钮组件计数结果 1234567//将其data的格式写成如下，此时每个 counter 都有自己内部的状态了，都是独立存在的，每个组件返回的都是全新的数据对象：data: function () &#123; return &#123; counter: 0 &#125;&#125;","categories":[],"tags":[]},{"title":"时间、时间戳、带格式时间的转换","slug":"时间、时间戳、带格式时间的转换","date":"2018-04-07T02:40:16.000Z","updated":"2018-06-29T11:18:04.381Z","comments":true,"path":"时间、时间戳、带格式时间的转换/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/时间、时间戳、带格式时间的转换/","excerpt":"","text":"最近正好在工作中遇到一些有关处理时间的问题，就整理了一下关于时间转化的问题，很基础，但相信都会接触的到的 时间转换成时间戳 获取时间 123let date = new Date();console.log(date);//输出：Sat Mar 24 2018 18:22:00 GMT+0800 (CST) (中国标准时间) 转换：四种方法（不推荐第一种方法，因为毫秒级别会被转化为000） 123456789101112let date1 = Date.parse(date);//毫秒级别的数值被转化为000console.log(date1);//输出:1521886920000let date2 = date.valueOf();//通过valueOf()函数返回指定对象的原始值获得准确的时间戳值console.log(date2);//输出:1521886920000let date3 = date.getTime();//通过原型方法直接获得当前时间的毫秒值，准确console.log(date3);//输出:1521886920000let date4 = Number(date);//将时间转化为一个number类型的数值，即时间戳console.log(date4);//输出:1521886920000 2.时间转换为带格式的时间格式：yyyy-mm-dd 123456789function formatDate(date) &#123; var y = date.getFullYear(); var m = date.getMonth() + 1; m = m &lt; 10 ? '0' + m : m; var d = date.getDate(); d = d &lt; 10 ? ('0' + d) : d; return y + '-' + m + '-' + d;//这里可以写格式 //输出：2018-03-24&#125; 格式：yyyy-mm-dd hh:mm:ss 123456789101112131415function formatDateTime(date) &#123; var y = date.getFullYear(); var m = date.getMonth() + 1; m = m &lt; 10 ? ('0' + m) : m; var d = date.getDate(); d = d &lt; 10 ? ('0' + d) : d; var h = date.getHours(); h=h &lt; 10 ? ('0' + h) : h; var minute = date.getMinutes(); minute = minute &lt; 10 ? ('0' + minute) : minute; var second=date.getSeconds(); second=second &lt; 10 ? ('0' + second) : second; return y + '-' + m + '-' + d+' '+h+':'+minute+':'+second;&#125;; //输出：2018-03-24 18:41:16 3.时间戳转换为带格式的时间 123let date5 = new Date(date);//直接用 new Date(时间戳) 格式转化获得时间console.log(date5);formatDate(date5);//直接调用上方的方法 4.时间格式字符串转为时间戳（毫秒） 12345let time1='2018-03-24 18:55:16';let dateM=new Date(time1.replace(/-/g, '/')); //开始时间let time2=dateM.getTime();console.log(time2);//输出：1521888916000","categories":[],"tags":[]},{"title":"运用node实现简单爬虫","slug":"运用node实现简单爬虫","date":"2018-04-07T02:37:18.000Z","updated":"2018-04-14T16:27:44.000Z","comments":true,"path":"运用node实现简单爬虫/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/运用node实现简单爬虫/","excerpt":"","text":"node.js的强大就无需再去重复了，越来越多的公司在使用node.js，还有一点不得不提的优势就是node用的是javascript的语言，对于前端开发工程师来说，没有理由不去get这一强大的技能。现在本人也是在学习阶段，结合自己做的一些demo进行总结。今天给大家分享一下用node.js实现一个简易的爬虫，希望能和大家一起交流探讨。 目标：当在浏览器中访问’http://localhost:3000&#39;的时候，可以以json的形式输出慕课网首页的 部分热门课程（本人偶尔会去慕课网上看一些学习的视频） 步骤: 1.新建一个文件夹，进去之后’npm init’（这个命令的作用就是帮我们互动式地生成一份 最简单的package.json 文件，(init 是 initialize 的意思，初始化）当一路回车并且填写信息完毕后会出现一个package.json文件(首先需要在电脑上安装node.js)。 2.安装相应的依赖，在此例子中，需要用到的有cheerio，express，superagent。其中 express 是 Node.js 应用最广泛的 web 框架,建议大家有时间可以多去官网看看其API，所以现在开始安装依赖，通过命令cnpm i cheerio express superagent -S完成依赖的安装。安装完成后效果如下图： 此时就完成了依赖的安装，在package.json中的dependencies目录下会有刚刚安装的三个依赖 3.现在在文件夹里建一个js文件，比如取名为index.js,接下来就是在里面写代码，话不多说，直接上代码，在代码中也做了较为详细的注释。 12345678910111213141516171819202122232425262728293031323334353637383940//引入模块var express = require('express');var cheerio = require('cheerio');var superagent = require('superagent');// 调用 express 实例，它是一个函数，不带参数调用时，会返回一个 express 实例，将这个变量赋予 app 变量。var app = express();// app 本身有很多方法，其中包括最常用的 get、post、put/patch、delete，在这里我们调用其中的 get 方法，为我们的 `/` 路径指定一个 handler 函数。// 这个 handler 函数会接收 req 和 res 两个对象，他们分别是请求的 request 和 response。// request 中包含了浏览器传来的各种信息，比如 query 啊，body 啊，headers 啊之类的，都可以通过 req 对象访问到。// res 对象，我们一般不从里面取信息，而是通过它来定制我们向浏览器输出的信息，比如 header 信息，比如想要向浏览器输出的内容。//这里我们调用了它的 #send 方法，向浏览器输出一个字符串。app.get('/', function (req, res, next) &#123; superagent.get('https://www.imooc.com/') .end(function (err, sres) &#123; if (err) &#123; return next(err); &#125; // sres.text 里面存储着网页的 html 内容，将它传给 cheerio.load 之后 // 就可以得到一个实现了 jquery 接口的变量，我们习惯性地将它命名为 `$` // 剩下就都是 jquery 的内容了 var $ = cheerio.load(sres.text); var items = []; $('.banner-course-card .clearfix').each(function (idx, element) &#123; var $element = $(element); items.push(&#123; title: $element.attr('title'), href: $element.attr('href') &#125;); &#125;); res.send(items); // 定义好我们 app 的行为之后，让它监听本地的 3000 端口。这里的第二个函数是个回调函数， //会在 listen 动作成功后执行，我们这里执行了一个命令行输出操作，告诉我们监听动作已完成。 &#125;);&#125;);app.listen(3000, function () &#123; console.log('app is listening at port 3000');&#125;); 代码解释:通过请求得到网页的html内容并储存于sres.text中，再传给cheerio.load,得到一个实现jquery接口的变量，然后就类似于jquery选择器的方法对页面的元素的查找，拿到自己想要的数据即可。在定义好行为之后，让它监听本地的 3000 端口。这里的第二个函数是个回调函数，会在 listen 动作成功后执行，我们这里执行了一个命令行输出操作，告诉我们监听动作已完成。 运行:输入命令 ‘ node index.js ‘ , 会看到打印出’app is listening at port 3000 ‘,如图所示： 打开浏览器，访问’http://localhost:3000/&#39;,就可以看到我们爬虫得来的数据哦，如下图所示：只是用了最基本的node实现了一个简易的爬虫效果，当然在这个例子中并没有利用到node.js的异步并发特性，待深入研究再做分享，希望和大家多多交流探讨。","categories":[],"tags":[]}]}