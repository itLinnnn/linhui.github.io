{"meta":{"title":"林晖的个人博客","subtitle":null,"description":null,"author":"林晖","url":"https://itlinnnn.github.io/linhui.github.io"},"pages":[],"posts":[{"title":"H5开发个人总结","slug":"H5开发个人总结","date":"2019-02-25T05:50:37.000Z","updated":"2019-02-25T05:52:17.087Z","comments":true,"path":"H5开发个人总结/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/H5开发个人总结/","excerpt":"","text":"在之前开发一些h5活动页的过程中，踩过了一些坑，所以整理出一些个人所接触到的对于h5活动页开发的总结，主要分为：布局适配，交互体验，兼容，调试工具这四个方面。欢迎大家补充指正。 1. 布局适配a. 让当前viewport的宽度等于设备的宽度1&lt;meta name= \"viewport\" content= \"width=device-width initial-scale=1 minimum-scale=1 maximum-scale=1\"&gt; 理解： phys.width，device-width: 一般我们所指的宽度width即为phys.width，而device-width又称为css-width。其中我们可以获取phys.width即width通过document.documentElement.clientWidth;而获取css-width通过 window.screen.width获取。如iphone6的phys.width为750px，而css-width为375px。 浏览器的一个默认行为： 假设，浏览器如果把电脑端的980px的网页展现在宽度为750px的iphone6手机屏上，肯定会放不下，手机端横向会出现滚动条，怎么处理这个问题呢，很简单，浏览器默认一个虚拟窗口，不同浏览器有不同的虚拟窗口宽度的默认值如：safari iphone：980px;opera:850px; Andriod webkit:800px;IE:974px;然后会把这个980px虚拟窗口装进宽度为750px的iphone6中，当然这样的话必须缩放，这就是为什么在手机中展现电脑端页面没有出现横向滚动条，而且字迹明显变小的原因。 meta name= “viewport” content= “width=device-width initial-scale=1 minimum-scale=1 maximum-scale=1”的作用体现 (meta标签中，width有两个含义，第一、width为phys.width，第二，width也为虚拟窗口的width) 此时的iPhone6的phys.width也变成了css-width即375px，可以通过document.documentElement.clientWidth获取得到此时phys.width确实为375px。 如果此时的设计图是375px的手机端页面，此时的虚拟窗口的宽度也为375px，再装进phys.width为375px的手机，当然如设计稿一样的效果，不会缩放，也不会出现横向滚动条。 b. Rem 适配为了精确的还原视觉稿，移动端样式采用px作为默认单位，使用postcss-pxtorem作为转换rem工具插件安装123yarn add postcss-pxtorem#ORnpm i postcss-pxtorem -S package.json配置(以width375视觉稿为准)123456789\"postcss\": &#123; \"plugins\": &#123; \"autoprefixer\": &#123;&#125;, \"postcss-pxtorem\": &#123; \"rootValue\": \"37.5\", \"propList\": [\"*\"] &#125; &#125; &#125; 在index.html中重置root节点的rem数值1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"app\"&gt;&lt;/div&gt; &lt;/body&gt; &lt;script&gt; // 事件监听 document.addEventListener('DOMContentLoaded', resetRem) window.onresize = resetRem /** * [resetRem 重置Rem数值] */ function resetRem () &#123; let documentCtx = document.documentElement documentCtx.style.fontSize = documentCtx.clientWidth / 10 + 'px' &#125; &lt;/script&gt;&lt;/html&gt; input的placeholder文本位置偏上的情况 input的placeholder会出现文本位置偏上的情况:PC端设置line-height等于height能够对齐,而移动端仍然是偏上,解决方案时是设置css line-height:normal; 2. 交互体验a. 去掉 a，input 在移动端浏览器中的默认样式 （禁止 a 标签背景 在移动端使用 a标签做按钮的时候，点按会出现一个“暗色”的背景，去掉该背景）123a,button,input,optgroup,select,textarea &#123; -webkit-tap-highlight-color:rgba(0,0,0,0); /*去掉a、input和button点击时的蓝色外边框和灰色半透明背景*/&#125; b .禁止长按 a，img 标签长按出现菜单栏(使用 a标签的时候，移动端长按会出现一个 菜单栏，这个时候禁止呼出菜单栏)：123a, img &#123; -webkit-touch-callout: none; /*禁止长按链接与图片弹出菜单*/&#125; c. 流畅滚动123body&#123; -webkit-overflow-scrolling:touch;&#125; d. 禁止用户长按选中123456-webkit-touch-callout:none; //系统默认菜单被禁用;可以实现页面因为长按弹出各种操作窗口-webkit-user-select:none; //webkit浏览器 -khtml-user-select:none; //早期浏览器 -moz-user-select:none; //火狐 -ms-user-select:none; //IE10 user-select:none; e. transition清除闪屏 有时候需要使用到一些动效，但是会出现闪屏的情况12-webkit-transform-style: preserve-3d; //设置内嵌的元素在 3D 空间如何呈现：保留3D-webkit-backface-visibility:hidden; //设置进行转换的元素的背面在面对用户时是否可见：隐藏 3.兼容a. vue2.0打包出来的项目在ios9中打开会白屏 这是个较为隐蔽的问题，当时线上出这个问题的话定位了很久，按照网上搜出来的结果都是说es6的结果没有转译，所以就尝试安装了一些转译插件。后面发现只需要在config/index.js里改一下声明关键词， 然后问题就解决了。123const path = require('path')// 改为var path = require('path') b. 某些情况下非可点击元素如(label,span)监听click事件,ios下不会触发针对此种情况只需对不触发click事件的元素添加一行css代码即可1cursor: pointer; c. ios对时间date()的支持不一样1var date =new Date(\"2016-05-31 00:00:00 \"); 这种写法在安卓和pc上都正常的,唯独在ios手机上会显示NAN,调试发现,ios上只支持格式:1var date =new Date(\"2016/05/31 \"); 调试发现2016/05/31等同2016-05-31 00:00:00,也就是说ios默认就是从0开始计算的,我们不需要设置后面的时分秒为00:00:00 d. text-indent和box-sizing，部分安卓机中使用text-indent属性会使元素宽度超过100%12// 加上即可正常box-sizing: border-box; 4.调试工具 — Xcode 在这些样式交互完成之后，在移动端我们需要进行接口调试，这样的话我们就很希望能像pc端的开发一样，可以看到控制台, 网络请求情况这些信息，能够更好的帮助我们完成开发，定位问题。之前想查看接口信息的话，是使用charles抓包工具的，但是个人觉得还是并不是那么方便，没有做到很好的集成。下面介绍一下我本人习惯使用的工具Xcode 打开调试工具，选择Simulator 在Hardware中选择我们要进行调试的机型以及系统 打开浏览器，输入一个本地项目的地址，同时打开safari浏览器，在开发模式下可以看到本地项目的服务地址 选中之后，就可以查看网络请求，控制台之类的信息了","categories":[],"tags":[]},{"title":"浏览器缓存","slug":"浏览器缓存","date":"2018-12-22T07:38:05.000Z","updated":"2018-12-22T07:38:36.168Z","comments":true,"path":"浏览器缓存/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/浏览器缓存/","excerpt":"","text":"之前一直知道有浏览器缓存的概念，但是并不能较为具体的描述出来。在经过数次用户反馈bug修复线上并没有什么作用时，不想每次给出的方案都是清理缓存···，为了不再这么尴尬，自己决定把缓存这一块的知识点进行一个小整理。今天先来了解一下浏览器端的缓存 浏览器缓存缓存这东西，第一次必须获取到资源后，然后根据返回的信息来告诉如何缓存资源，可能采用的是强缓存，也可能告诉客户端浏览器是协商缓存，这都需要根据响应的header内容来决定的，下面用两幅图来描述浏览器的缓存原理。 浏览器第一次请求时 浏览器在后续缓存时 从上图可以知道，浏览器缓存包含两种类型，即强缓存（也叫本地缓存）和协商缓存，浏览器在第一次请求发生后，再次请求时： 1.浏览器在请求某一资源时，会先获取该资源缓存的header信息，判断是否命中强缓存（cache-control和expires信息），若命中直接从缓存中获取资源信息，包括缓存header信息；本次请求根本就不会与服务器进行通信；这也就是即使线上资源更新了显示还是没有及时更新的原因 2.如果没有命中强缓存，浏览器会发送请求到服务器，请求会携带第一次请求返回的有关缓存的header字段信息（Last-Modified/If-Modified-Since和Etag/If-None-Match），由服务器根据请求中的相关header信息来比对结果是否协商缓存命中；若命中，则服务器返回新的响应header信息更新缓存中的对应header信息，但是并不返回资源内容，它会告知浏览器可以直接从缓存获取；否则返回最新的资源内容 强缓存与协商缓存的区别，可以用下表来进行描述： 获取资源形式 状态码 发送请求到服务器 强缓存 从缓存取 200（from cache） 否，直接从缓存取 协商缓存 从缓存取 304（not modified） 是，正如其名，通过服务器来告知缓存是否可用 强缓存相关的header字段 强缓存上面已经介绍了，直接从缓存中获取资源而不经过服务器；与强缓存相关的header字段有两个： expires，这是http1.0时的规范；它的值为一个绝对时间的GMT格式的时间字符串，如Mon, 10 Jun 2015 21:31:12 GMT，如果发送请求的时间在expires之前，那么本地缓存始终有效，否则就会发送请求到服务器来获取资源 cache-control：max-age=number，这是http1.1时出现的header信息，主要是利用该字段的max-age值来进行判断，它是一个相对值；资源第一次的请求时间和Cache-Control设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则就不行；cache-control除了该字段外，还有下面几个比较常用的设置值： no-cache：不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。 no-store：直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。 public：可以被所有的用户缓存，包括终端用户和CDN等中间代理服务器。 private：只能被终端用户的浏览器缓存，不允许CDN等中继缓存服务器对其缓存。 注意：如果cache-control与expires同时存在的话，cache-control的优先级高于expires 3协商缓存相关的header字段协商缓存都是由服务器来确定缓存资源是否可用的，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问，这主要涉及到下面两组header字段，这两组搭档都是成对出现的，即第一次请求的响应头带上某个字段（Last-Modified或者Etag），则后续请求则会带上对应的请求字段（If-Modified-Since或者If-None-Match），若响应头没有Last-Modified或者Etag字段，则请求头也不会有对应的字段。 Last-Modified/If-Modified-Since二者的值都是GMT格式的时间字符串，具体过程： 浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在respone的header加上Last-Modified的header，这个header表示这个资源在服务器上的最后修改时间 浏览器再次跟服务器请求这个资源时，在request的header上加上If-Modified-Since的header，这个header的值就是上一次请求时返回的Last-Modified的值 服务器再次收到资源请求时，根据浏览器传过来If-Modified-Since和资源在服务器上的最后修改时间判断资源是否有变化，如果没有变化则返回304 Not Modified，但是不会返回资源内容；如果有变化，就正常返回资源内容。当服务器返回304 Not Modified的响应时，response header中不会再添加Last-Modified的header，因为既然资源没有变化，那么Last-Modified也就不会改变，这是服务器返回304时的response header 浏览器收到304的响应后，就会从缓存中加载资源 如果协商缓存没有命中，浏览器直接从服务器加载资源时，Last-Modified的Header在重新加载的时候会被更新，下次请求时，If-Modified-Since会启用上次返回的Last-Modified值 Etag/If-None-Match这两个值是由服务器生成的每个资源的唯一标识字符串，只要资源有变化就这个值就会改变；其判断过程与Last-Modified/If-Modified-Since类似，与Last-Modified不一样的是，当服务器返回304 Not Modified的响应时，由于ETag重新生成过，response header中还会把这个ETag返回，即使这个ETag跟之前的没有变化。 Last-Modified / Etag你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题： 一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET 某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)； 某些服务器不能精确的得到文件的最后修改时间。 这时，利用Etag能够更加准确的控制缓存，因为Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符。 Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。 用户的行为对缓存的影响 强缓存如何重新加载缓存缓存过的资源 上面说到，使用强缓存时，浏览器不会发送请求到服务端，根据设置的缓存时间浏览器一直从缓存中获取资源，在这期间若资源产生了变化，浏览器就在缓存期内就一直得不到最新的资源，那么如何防止这种事情发生呢？ 通过更新页面中引用的资源路径，让浏览器主动放弃缓存，加载新资源。这样每次文件改变后就会生成新的query值，这样query值不同，也就是页面引用的资源路径不同了，之前缓存过的资源就被浏览器忽略了，因为资源请求的路径变了","categories":[],"tags":[]},{"title":"为vue的项目添加单元测试","slug":"为vue的项目添加单元测试","date":"2018-12-18T01:26:58.000Z","updated":"2018-12-18T01:27:23.689Z","comments":true,"path":"为vue的项目添加单元测试/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/为vue的项目添加单元测试/","excerpt":"","text":"动机 单元测试能避免出现一些代码运行结果与预期不符的错误，通常是一些比较低级但又难以发现的问题。 粗心且懒，在每次调整之后，需要不断地检查代码，反复去走流程。担心由于自己的改动而导致了逻辑上的错误。而这里面的一大部分工作其实可以让单元测试来完成。 有了单元测试之后，可以对代码本身形成一种规范。如果在进行单元测试过程中发现自己的一些代码不方便进行测试，那么你可能需要重新审视这些代码，看是否有一些设计上不合理或者可以优化的地方。 嵌入了单元测试的项目显得更加的专业，也会更有逼格，测试本身是开发环节需要做的内容。 工具选取对比（一个合适测试框架 – Jest）之前也没有去接触过前端的单元测试，也是这几天开始了解，开始并没有头绪，所以就在网上以及github上去看了一些之前比较流行的测试框架。发现比较流行的是karma + mocha + Chrome的组合。当我单独一个个去看的时候，发现其内容还是比较的多的。之后选取了jest也是经过对比权衡的 优点 一站式的解决方案，学习成本更低，上手更快（很适合现如今我的需求） 在使用 Jest 之前，我需要一个测试框架（mocha），需要一个测试运行器（karma），需要一个断言库（chai），需要一个用来做 spies/stubs/mocks 的工具（sinon 以及 sinon-chai 插件），一个用于测试的浏览器环境（可以是 Chrome 浏览器，也可以用 PhantomJS）。而使用 Jest 后，只要安装它，全都搞定了。 全面的官方文档，易于学习和使用 Jest 的官方文档很完善，对着文档很快就能上手。而在之前，我需要学习好几个插件的用法，至少得知道 mocha 用处和原理吧 我得学会 karma 的配置和命令，chai 的各种断言方法……，经常得周旋于不同的文档站之间，其实是件很烦也很低效的事 更直观明确的测试信息提示 方便的命令行工具 缺点jsdom 的一些局限性：因为 Jest 是基于 jsdom 的，jsdom 毕竟不是真实的浏览器环境，它在测试过程中其实并不真正的“渲染”组件。这会导致一些问题，例如，如果组件代码中有一些根据实际渲染后的属性值进行计算（比如元素的 clientWidth）就可能出问题，因为 jsdom 中这些参数通常默认是 0. 综上所述，最终我确定下来的方案是使用成熟好用的测试工具库 — vue-test-utils其前身是 avoriaz，avoriaz 也是一个不错的包，但其 README 中有说明，当 vue-test-utils 正式发布的时候， 它将会被废弃。vue-test-utils 能极大地简化 Vue.js 单元测试。例如：Vue 单元测试，一般是像下面这样的（包括 vue-cli 提供的模板里默认也是这样）：1234567891011import Vue from 'vue'import HelloWorld from '@/components/HelloWorld'describe('HelloWorld.vue', () =&gt; &#123; it('should render correct contents', () =&gt; &#123; const Constructor = Vue.extend(HelloWorld) const vm = new Constructor().$mount() expect(vm.$el.querySelector('.hello h1').textContent) .toEqual('Welcome to Your Vue.js App') &#125;)&#125;) 使用 vue-test-utils 后，你可以像下面这样123456789101112import &#123; shallow &#125; from '@vue/test-utils'import HelloWorld from '@/components/HelloWorld'describe('HelloWorld.vue', () =&gt; &#123; it('should render correct contents', () =&gt; &#123; const wrapper = shallow(HelloWorld, &#123; attachToDocument: ture &#125;) expect(wrapper.find('.hello h1').text()).to.equal('Welcome to Your Vue.js App') &#125;)&#125;) 可以看到代码更加简洁了。wrapper 内含许多有用的方法，上面的例子中所使用的 find() 其中最简单不过的一个。vue-test-utils 还有 createLocalVue() 等方法以及 stub 之类的功能，基本上可以完成绝大部分情况下的测试用例,这也是非常的实用的了。 安装使用安装使用的方式很简单，由于想引入到现有的项目中来，现有的项目大多是vue-cli创建的，所以一开始的时候基本上是已经安装并配置好了 webpack、vue-loader 和 Babel。如果是比较原始的项目，也是可以单独安装的。 我们要做的第一件事就是安装 Jest 和 Vue Test Utils： 1$ npm install --save-dev jest @vue/test-utils 然后我们需要在 package.json 中定义一个单元测试的脚本。 123456// package.json&#123; \"scripts\": &#123; \"test\": \"jest\" &#125;&#125; 在 Jest 中处理单文件组件 1npm install --save-dev vue-jest 接下来在 package.json 中创建一个 jest 块： 123456789101112131415&#123; // ... \"jest\": &#123; \"moduleFileExtensions\": [ \"js\", \"json\", // 告诉 Jest 处理 `*.vue` 文件 \"vue\" ], \"transform\": &#123; // 用 `vue-jest` 处理 `*.vue` 文件 \".*\\\\.(vue)$\": \"vue-jest\" &#125; &#125;&#125; 具体的使用步骤 此处我根据自己的需求来进行整理 对页面内容的测试1234567891011121314151617// viewTest.vue&lt;template&gt; &lt;div class=\"hello\"&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;p&gt;1212121&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: 'viewTest', data () &#123; return &#123; msg: 'Welcome to Your Vue.js App' &#125; &#125;&#125; 123456789101112// viewTest.specimport &#123; mount &#125; from '@vue/test-utils'import Component from '../../../src/components/viewTest'describe('页面展示测试', () =&gt; &#123; test('检查元素是否存在', () =&gt; &#123; const wrapper = mount(Component) expect(wrapper.contains('.hello h1')).toBe(true) console.log(wrapper.find('.hello h1').text()) expect(wrapper.text()).toContain('Welcome') &#125;)&#125;) 这个是最简单的对页面的dom节点的测试，以及可以对文案进行一些测试，这些是比较基础的 对事件处理的测试1234567891011121314151617181920212223242526272829303132// event.vue&lt;template&gt; &lt;div&gt; &lt;h1&gt;My To Do event&lt;/h1&gt; &lt;h2&gt;wawawawawawa&lt;/h2&gt; &lt;input v-model=\"newItem\"&gt; &lt;button @click=\"addItemToList\"&gt;Add&lt;/button&gt; &lt;/br&gt; &lt;!--displays event --&gt; &lt;ul&gt; &lt;li v-for=\"item in listItems\"&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default &#123; name: 'event', data () &#123; return &#123; listItems: ['buy food', 'play games', 'sleep'], newItem: '' &#125; &#125;, methods: &#123; addItemToList() &#123; this.listItems.push(this.newItem); this.newItem = ''; &#125; &#125; &#125; &lt;/script&gt; 12345678910111213141516171819// event.spec.js// 从测试实用工具集中导入 `mount()` 方法// 同时导入你要测试的组件import &#123; mount &#125; from '@vue/test-utils'import Component from '../../../src/components/itemEvent'describe('事件触发测试', () =&gt; &#123; test('事件触发测试', () =&gt; &#123; // 现在挂载组件，你便得到了这个包裹器 const wrapper = mount(Component) const button = wrapper.find('button') wrapper.setData(&#123; newItem: '添加测试项', &#125;) button.trigger('click') console.log(wrapper.text()) expect(wrapper.text()).toContain('添加测试项') &#125;)&#125;) 这里是在模拟用户交互的一个测试，当用户点击按钮的时候会把数据插入到当前的列表中来，所以最开始需要定位到这个按钮，可以用find()，之后要去触发这个事件， button.trigger(‘click’)，然后把预期的结果，与按照流程的结果相比较，以达到测试的效果。这里模拟的是一个点击事件，当然，api也支持各种的鼠标事件以及键盘事件。 测试异步行为平时的业务场景中肯定是离不开异步操作的，当发送一个接口请求的时候应该怎么去才做。Jest 运行测试用例同时可以模拟了 HTTP 库 axios，对预期结果可以进行设定和比较，比如：1234// axios.jsexport default &#123; get: () =&gt; Promise.resolve(&#123; data: 'response' &#125;)&#125; 1234567891011121314151617181920212223242526272829&lt;template&gt; &lt;div&gt; &lt;button @click=\"fetchResults\"&gt;发送请求&lt;/button&gt; &#123;&#123;value&#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from '../axios.js'export default &#123; data () &#123; return &#123; value: '初始值' &#125; &#125;, methods: &#123; async fetchResults () &#123; const response = await axios.get('mock/service') this.value = response.data console.log(this.value) &#125; &#125;, created ()&#123; console.log(axios.get) &#125;&#125;&lt;/script&gt; 12345678910111213// async.spec.jsimport &#123; shallowMount &#125; from '@vue/test-utils'import async from '../../../src/components/async'jest.mock('axios')it('当点击按钮发送请求时检验返回值', () =&gt; &#123; const wrapper = shallowMount(async) console.log(jest) wrapper.find('button').trigger('click') // expect(wrapper.value) expect(wrapper.vm.value).toBe('response') // console.log(wrapper.vm.value).toBe('初始值')&#125;) 这个时候运行的话会报错误因为断言在 fetchResults 中的 Promise 完成之前就被调用了，所以value的值还是最开始的初始值。大多数单元测试库都提供一个回调来使得运行期知道测试用例的完成时机。Jest 和 Mocha 都是用了 done。我们可以和 $nextTick 或 setTimeout 结合使用 done 来确保任何 Promise 都会在断言之前完成。 测试 Vue Router 使用","categories":[],"tags":[]},{"title":"使用es6写出更简洁的js","slug":"使用es6写出更简洁的js","date":"2018-12-09T04:51:35.000Z","updated":"2018-12-09T04:51:55.248Z","comments":true,"path":"使用es6写出更简洁的js/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/使用es6写出更简洁的js/","excerpt":"","text":"使用新语法配合 babel 的转码，已经可以解决一些浏览器的兼容问题了。既然如此，那就可以在具体的业务中多使用新语法去探索一下怎么更好的去写代码吧。分享下个人开发中整理的常用的 js 写法技巧 使用 let / constvar 命令会发生”变量提升“现象，即变量可以在声明之前使用，值为 undefined。个人认为，对声明的变量确定后面不会发生更改时，使用 const, 这样代码的可读性也会增强。 const 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。 let 变量指向的内存地址，保存的只是一个指向实际数据的指针12345补充 const 定义的变量不是数据不可变，而是保存的引用地址不能发生改变。例子如下：const person = &#123; age: 22 &#125;person.age = 1console.log(person.age ) // 1 解构赋值ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。 好处是：解决了访问多层嵌套的对象或数组的命名，减少代码量 声明多个变量: 12let [age, name, sex] = [22, 'paopao', 1]console.log(age, name, sex) // 22, paopao, 1 使用在对象中： 12345678910const obj = &#123; name: &#123; firstName: 'da', lastName: 'paopao' &#125;&#125;const &#123; firstName, lastName &#125; = obj.name // 如果我们多处使用 firstName， 那就不必要每个地方都写 obj.name.firstName, 极大提升代码效率// 等同于const firstName = obj.name.firstNameconst lastName = obj.name.lastName 使用在函数中 1234567// 在参数中结构赋值，获取参数, 当参数多的使用时候十分方便function Destructuring(&#123; name, age &#125;) &#123; return &#123; name, age &#125; // 相当于 &#123; name: name, age: age &#125; , 可以简写&#125;const obj = &#123; name: 'dapaopao', age: 22 &#125;Destructuring(obj) 扩展符的运用es6 扩展符有很多用法，他可以使你的代码更加简洁，易懂。这里就举例常用的用法 在对象中的用法： 123456789101112131415let obj = &#123; name: 'dapaopao', age: 22, sex: 1&#125;// 复制对象。扩展符为浅复制！！！const copy = &#123; ...obj &#125;// 修改对象属性值(生成新对象) 相当于 Object.assgin(&#123;&#125;, obj, &#123; age: 18 &#125;)const newObj = &#123; ...obj, age: 18 &#125;// 结合结构赋值let &#123; sex, ...z &#125; = objz // &#123; name: 'dapaopao', age: 22 &#125; 在数组中的用法： 1234567891011121314const arr = [1, 2, 3]const arr2 = [4, 5, 6, 4]// 复制数组。扩展符为浅复制！！！const newArr = [...arr] // ...[1, 2, 3] =&gt; 相当于展开数组：1, 2, 3// 合并数组const conbineArr = [...arr, ...arr2]// 结合求最大值函数Math.max(...arr)// 结合 Set 实现数组去重。注意：json 等对象数组不可用[...new Set(arr2)] // [4, 5, 6] 数组用法1234567891011121314const arr = [1, 2, 3, 4]Array.isArray(arr) // 判断是否为数组arr.includes(2) // true 判断数组中是否包含某项arr.findIndex(d =&gt; d === 3) // 2 找出第一个符合条件的数组成员并返回数组下标, 找不到返回 -1arr.find(d =&gt; d === 3) // 3 找出第一个符合条件的数组成员并返回, 找不到返回 undefined// es5 其他还有 filter map forEach 等，这里不做举例。arr.every(d =&gt; d &gt; 2) // false 每一项都满足条件则返回 truearr.some(d =&gt; d &gt; 2) // true 只要有一项满足条件则返回 true find/findIndex : 找出第一个符合条件的数组成员之后不再匹配，一定程度下优化查找。 includes: 返回 true/false, 相较于 indexOf, 实用多了 flat() : 扁平化数组，常用于将数组转化为一维数组 12345678const arr = [1, 2, [3, 4]]arr.flat() // [1, 2, 3, 4] 扁平化数组, 默认展开一层。const arr2 = [1, 2, [3, 4, [5, 6]]]arr2.flat() // [1, 2, 3, 4, [5, 6]]arr2.flat(2) // [1, 2, 3, 4, 5, 6] flat(3) 也是展开两层... flatMap(): 在数组执行 map 方法后执行 flat, 用的不多，其实可以写 map 后写 flat 更好懂点。 123[2, 3, 4].flatMap(x =&gt; [x, x * 2]) // [ 2, 4, 3, 6, 4, 8 ]// 1. [2, 3, 4].map(d =&gt; [d, d * 2]) =&gt; [[2, 4], [3, 6], [4, 8]]// 2. [[2, 4], [3, 6], [4, 8]].flat() 补充常用的对象转数组的用法：12345const obj = &#123; name: 'dapaopao' &#125; Object.keys(obj) // ['name']Object.values(obj) // ['dapaopao']Object.entries(obj) // ['name', 'dapaopao'] 模板字符串用的挺多的，但是不兼容 IE !123456const name = 'dapaopao'const newStr = `welcome $&#123;name&#125;` // welcome dapaopao// the same asconst newStr = 'welcome ' + name 使用 async / await 这里做个例子进行介绍12345678async function test() &#123; const data = await axios.get('https://randomuser.me/api/') console.log(data)&#125;// 等同于function test() &#123; axios.get('https://randomuser.me/api/').then(res =&gt; console.log(res)) // axios 也是 promise 对象&#125; 优化 if/else 语句 当逻辑或||时，找到为 true 的分项就停止处理，并返回该分项的值，否则执行完，并返回最后分项的值。 当逻辑与&amp;&amp;时，找到为 false 的分项就停止处理，并返回该分项的值。12345const a = 0 || null || 3 || 4console.log(a) // 3const b = 3 &amp;&amp; 4 &amp;&amp; null &amp;&amp; 0console.log(b) // null 减少 if / else地狱般的调用1234567891011121314151617const [age, name, sex] = [22, 'dapaopao', 1]if (age &gt; 10) &#123; if (name === 'dapaopao') &#123; if (sex &gt; 0) &#123; console.log('all right') &#125; &#125;&#125;// 使用 &amp;&amp;if (age &gt; 10 &amp;&amp; name === 'dapaopao' &amp;&amp; sex &gt; 0) &#123; console.log('all right')&#125;// 或者(太长了不推荐)age &gt; 10 &amp;&amp; name === 'dapaopao' &amp;&amp; sex &gt; 0 &amp;&amp; console.log('all right')","categories":[],"tags":[]},{"title":"canvas压缩图片以及卡片制作","slug":"canvas压缩图片以及卡片制作","date":"2018-12-03T02:36:30.000Z","updated":"2018-12-03T02:37:09.548Z","comments":true,"path":"canvas压缩图片以及卡片制作/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/canvas压缩图片以及卡片制作/","excerpt":"","text":"在做一些活动页的时候，经常会有一些需要上传图片的需求，并且还需要将图片以及生成的文字以及贴图生成一张卡可以供用户可以长按保存。这个需求之前完成过一次，最近又遇上了，使用的都是canvas来实现的。干脆整理出一篇博客出来。如果有更好的实现方法，欢迎提出一起探讨。 使用canvas压缩图片在html中使用写入input标签，type为file时候，可以调出手机的相册可供选择照片，也可以支持摄像头进行拍照功能。在这个场景下，就可能出现图片的体积会更大，可能会超出后端所支持的最大范围，从而导致上传失败。 1&lt;input id=\"file\" type=\"file\"&gt; 1.首先要先获取到图片文件12345678910var eleFile = document.querySelector('#file'); var reader = new FileReader() eleFile.addEventListener('change', function (event) &#123; file = event.target.files[0]; console.log(file) // 选择的文件是图片 if (file.type.indexOf(\"image\") == 0) &#123; reader.readAsDataURL(file); &#125; &#125;); 2.这个时候就取到了图片文件，就不得不了解一下js中FileReader对象的使用了 FileReader对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容 方法： 方法名 参数 描述 abort none 中断读取 readAsBinaryString file 二进制码 readAsDataURL file 将文件读取为 DataURL readAsText file, [encoding] 将文件读取为文本 readAsText：该方法有两个参数，其中第二个参数是文本的编码方式，默认值为 UTF-8。这个方法非常容易理解，将文件以文本方式读取，读取的结果即是这个文本文件中的内容。 readAsBinaryString：该方法将文件读取为二进制字符串，通常我们将它传送到后端，后端可以通过这段字符串存储文件。 readAsDataURL：这是例子程序中用到的方法，该方法将文件读取为一段以 data: 开头的字符串，这段字符串的实质就是 Data URL，Data URL是一种将小文件直接嵌入文档的方案。这里的小文件通常是指图像与 html 等格式的文件。（其中base64的方式就是由此来获得的。。） FileReader处理事件简介 事件 描述 onabort 中断时触发 onerror onabort onload 文件读取成功完成时触发 onloadend 读取完成触发，无论成功或失败 onloadstart 读取开始时触发 onprogress 读取中 继续上面的操作，在拿到图片之后，需要将文件进行处理转化，此时123456var reader = new FileReader(); //将文件以Data URL形式读入页面 reader.readAsDataURL(file); reader.onload=function(e) &#123; console.log(reader) &#125; 现在取到了图片也进行了转化，现在可以进行压缩了。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253var eleFile = document.querySelector('#file'); var reader = new FileReader() eleFile.addEventListener('change', function (event) &#123; file = event.target.files[0]; // console.log(file) // 选择的文件是图片 if (file.type.indexOf(\"image\") == 0) &#123; var reader = new FileReader(); //将文件以Data URL形式读入页面 reader.readAsDataURL(file); reader.onload=function(e) &#123; // console.log(this.result) var pre=document.getElementById(\"pre\"); pre.setAttribute(\"src\", this.result) canvasDataURL(this.result, 100, 0.5) &#125; &#125; &#125;) /* [canvasDataURL 通过canvas进行压缩] * @params path 图片的base64的格式 * @params targetWidth 压缩后图片的宽度 * @params quality 图片质量 quality值越小，所绘制出的图像越模糊 */ function canvasDataURL(path, targetWidth, quality) &#123; var img = new Image(); img.src = path img.onload = function () &#123; // var that = this // console.log(that) // 默认按比例压缩 var w = this.width var h = this.height scale = w / h; w = targetWidth h = targetWidth / scale var quality = quality; // 默认图片质量为0.7 //生成canvas var canvas = document.createElement('canvas'); var ctx = canvas.getContext('2d'); // 创建属性节点 var anw = document.createAttribute(\"width\"); anw.nodeValue = w; var anh = document.createAttribute(\"height\"); anh.nodeValue = h; canvas.setAttributeNode(anw); canvas.setAttributeNode(anh); ctx.drawImage(this, 0, 0, w, h); // quality值越小，所绘制出的图像越模糊 var base64 = canvas.toDataURL('image/jpeg', quality); var result=document.getElementById(\"result\"); result.setAttribute(\"src\", base64) &#125; &#125; 很简单，这样就可以得到压缩后的图片了，从以上的代码可得知，原理在于canvas中的toDataURL方法可指定图片压缩后的格式及压缩质量，把canvas信息压缩并转为base64编码来实现压缩。 使用canvas制作卡片场景：把刚刚压缩之后的图片与另一张图片相结合，可长按进行保存。12345678910111213141516171819202122232425262728293031323334function drawCanvas (target) &#123; var canvas = document.querySelector('#myCanvas') var ctx = canvas.getContext('2d') // 是设备上物理像素和设备独立像素(device-independent pixels (dips))的比例 var dp = window.devicePixelRatio || 1 var backingStoreRatio = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1 var ratio = this.dp / this.backingStoreRatio var oldWidth = canvas.width var oldHeight = canvas.height canvas.width = oldWidth * ratio canvas.height = oldHeight * ratio canvas.style.width = oldWidth + 'px' canvas.style.height = oldHeight + 'px' ctx.scale(ratio, ratio) var headerImg = new Image() var bgImg = new Image() headerImg.src = target bgImg.src = '../bg.png' headerImg.onload = (e) =&gt; &#123; // 图片的宽高比 var rate = headerImg.width / headerImg.height console.log(rate) bgImg.onload = (e) =&gt; &#123; ctx.drawImage(headerImg, 10, 30, 50, (50 / rate)) // 背景图片 ctx.drawImage(bgImg, 0, 0, 150, 150) ctx.fillText('厉害啊', 80, 70) var resultImg = new Image() resultImg.src = canvas.toDataURL('image/png', 1) resultImg.style.width = '100%' var cardImg=document.getElementById(\"cardImg\"); cardImg.setAttribute(\"src\", resultImg.src) &#125; &#125; 取到刚刚得到的图片，在图像装载完毕时后将其画到画布上，也可以配上文字等等，最后也是把canvas的信息转为base64编码来进行实现。可以通过代码来进行实践","categories":[],"tags":[]},{"title":"iframe的使用","slug":"iframe的使用","date":"2018-11-25T03:26:42.000Z","updated":"2018-11-25T03:27:00.434Z","comments":true,"path":"iframe的使用/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/iframe的使用/","excerpt":"","text":"开始接触前端的时候，搜索iframe出来的是iframe耗能，不安全等，以至于并没有去正式了解，想来也确实是太不够严谨。现在在业务中有需要用到iframe来实现一些特定的需求，所以觉得很有必要去了解一下，查了一些资料进行整理。 概念： iframe 元素会创建包含另外一个文档的内联框架（即行内框架）,用于设置文本或图形的浮动图文框或容器基本使用：12&lt;!--这个是最通常的使用，还可以设置很多的属性值的--&gt;&lt;iframe src=\"http://m.haimati.cn\"&gt;&lt;/iframe&gt; 常用属性，会在下文中做一些介绍 frameborder:是否显示边框，1(yes),0(no) height:框架作为一个普通元素的高度，建议在使用css设置。 width:框架作为一个普通元素的宽度，建议使用css设置。 name:框架的名称，window.frames[name]时专用的属性。 scrolling:框架的是否滚动。yes,no,auto。 src：内框架的地址，可以使页面地址，也可以是图片的地址。 srcdoc , 用来替代原来HTML body里面的内容。但是IE不支持。 sandbox: 对iframe进行一些列限制，IE10+支持 基本的特性： 能自由操作iframe和父框架的内容(DOM). （前提条件是同域，如果跨域顶多只能实现页面跳转） 那什么是同域/ 什么是跨域呢? 就是判断你的url首部是否一样，例如：123A:&lt;iframe id=\"mainIframe\" name=\"mainIframe\" src=\"/main.html\" frameborder=\"0\" scrolling=\"auto\" &gt;&lt;/iframe&gt;B:&lt;iframe id=\"mainIframe\" name=\"mainIframe\" src=\"http://www.baidu.com\" frameborder=\"0\" scrolling=\"auto\" &gt;&lt;/iframe&gt; 使用A时，因为同域，父页面可以对子页面进行改写,反之亦然。使用B时，不同域，父页面没有权限改动子页面,但可以实现页面的跳转这里，我们先从简单的开始，当主页面和iframe同域时，我们可以做些什么。12345678var iframe = document.getElementById(\"iframe1\");var iwindow = iframe.contentWindow;var idoc = iwindow.document;console.log(\"window\",iwindow);//获取iframe的window对象console.log(\"document\",idoc); //获取iframe的documentconsole.log(\"html\",idoc.documentElement);//获取iframe的htmlconsole.log(\"head\",idoc.head); //获取headconsole.log(\"body\",idoc.body); //获取body 另外一种简单的方法是根据name来获取 1234567 &lt;iframe src =&quot;/index.html&quot; id=&quot;ifr1&quot; name=&quot;ifr1&quot; scrolling=&quot;yes&quot;&gt; &lt;p&gt;Your browser does not support iframes.&lt;/p&gt;&lt;/iframe&gt;&lt;script type=&quot;text/javascript&quot;&gt; console.log(window.frames[&apos;ifr1&apos;].window);console.dir(document.getElementById(&quot;ifr1&quot;).contentWindow);&lt;/script&gt; 在iframe中获取父级内容 同理，在同域下，父页面可以获取子iframe的内容，那么子iframe同样也能操作父页面内容。在iframe中，可以通过在window上挂载的几个API进行获取. 获取了之后，我们就可以进行相关操作了。 iframe的轮询话说在很久很久以前，我们实现异步发送请求是使用iframe实现的~! 那时候为了不跳转页面，提交表单时是使用iframe提交的。现在，前端发展很快，websocket,SSE,ajax等的出现，颠覆了iframe, 现在基本上只能活在IE8,9的浏览器内了。 iframe长轮询 如果写过ajax的童鞋，应该知道，长轮询就是在ajax的readyState = 4的时，再次执行原函数即可。 这里使用iframe也是一样，异步创建iframe，然后reload, 和后台协商好, 看后台哥哥们将返回的信息放在,然后获取里面信息即可. 这里是直接放在body里. 1234567891011121314151617var iframeCon = docuemnt.querySelector('#container'), text; //传递的信息 var iframe = document.createElement('iframe'), iframe.id = \"frame\", iframe.style = \"display:none;\", iframe.name=\"polling\", iframe.src=\"target.html\"; iframeCon.appendChild(iframe); iframe.onload= function()&#123; var iloc = iframe.contentWindow.location, idoc = iframe.contentDocument; setTimeout(function()&#123; text = idoc.getElementsByTagName('body')[0].textContent; console.log(text); iloc.reload(); //刷新页面,再次获取信息，并且会触发onload函数 &#125;,2000); &#125; 还有一些应用还有待去结合业务场景敲实例，未完待续···","categories":[],"tags":[]},{"title":"svg动画","slug":"svg动画","date":"2018-10-28T02:17:31.000Z","updated":"2018-10-28T02:18:58.939Z","comments":true,"path":"svg动画/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/svg动画/","excerpt":"","text":"CSS3 动画已经很强大，但是有些时候像是用一些灵活简单的效果。使用css的话代码并不是很精简，处理较为复杂。配合 SVG的话，可以让 Web 动效有更多的可能性。 实现一个购物袋的 loading 动效 以一个购物袋的 loading 动效为示例，一起来熟悉上手 SVG 动画。 其中旋转通过 CSS 来完成，但是旋转之后圆弧缩短变成笑脸的嘴巴需要借助 SVG 来实现。 步骤一： 声明 SVG 视窗1&lt;svg width=\"100\" height=“100”&gt;&lt;/svg&gt; 指定一个宽高都为 100 像素的区域，width=”100” 和 width=”100px” 是等价的，当然也可以使用其他的合法单位，例如 cm、mm、em 等。 阅读器会设置一个默认的坐标系统，见下图：左上角为原点，其中水平（x）坐标向右递增，垂直（y）坐标向下递增。在没有指定的情况下，所有数值的默认单位都是像素。如下图 步骤二： 绘制购物袋 购物袋由两个部分组成，先画下面的主体：1&lt;path d=\"M 20 40 L 80 40 L 80 90 A 10 10 90 0 1 70 100 L 30 100 A 10 10 90 0 1 20 90\" style=\"fill: #e9e8ee;\" /&gt; 任何形状都可以使用路径元素画出，描述轮廓的数据放在它的 d 属性中。 1.样式中的 fill 用来设置填充色 2.路径数据由命令和坐标构成| 指令 | 说明 || :——| :—— || M 20 40 | 表示移动画笔到 (20,40) || L 80 40 | 表示绘制一条线到 (80, 40) || A 10 10 90 0 1 70 100 | 绘制一个椭圆弧 |圆弧命令以字母 A 开始，后面紧跟着 7 个参数，这 7 个参数分别用来表示：1.椭圆的 x 半径和 y 半径2.椭圆的 x 轴旋转角度3.圆弧的角度小于 180 度，为 0；大于或等于 180 度，则为 14.以负角度绘制为 0，否则为 15.终点的x、y坐标 接下来绘制购物袋上面的部分：1&lt;path d=\"M 35 40 A 15 15 180 1 1 65 40\" style=\"fill: none; stroke: #e9e8ee; stroke-width: 5;” /&gt; 上面的部分是一个半圆弧，同样用路径来画出，当然也可以使用基础形状来完成。 样式中的 stoke 和 stroke-width 分别用来设置描边色和描边的宽度。 步骤三： 绘制眼睛使用基础形状，画两个小圆点。四个属性分别是位置坐标、半径和填充颜色。12&lt;circle cx=“40\" cy=\"60\" r=\"2.5\" style=\"fill: #fff;\" /&gt;&lt;circle cx=\"60\" cy=\"60\" r=\"2.5\" style=\"fill: #fff;\" /&gt; 步骤四： 绘制嘴巴1&lt;circle cx=\"50\" cy=\"70\" r=\"15\" style=\"fill: none; stroke: #fff; stroke-width: 5; stroke-linecap: round;transform: rotate(280deg); transform-origin: 50% 50%; stroke-dashoffset: -23; stroke-dasharray: 42, 95;”&gt; 嘴巴是一段圆弧，我绘制了一个圆，然后描边了其中的一段，并且做了一个旋转，来让它的角度处于正确的位置。 1.stroke-linecap：用来定义开放路径的终结,可选 round|butt|square2.stroke-dasharray：用来创建虚线3.stroke-dashoffset：设置虚线位置的起始偏移值，在下一个步骤里，它会和stroke-dasharray 一起用来实现动效… 步骤五： 给嘴巴部分添加动效1234567891011121314151617@keyframes mouth &#123; 0% &#123; transform: rotate(-80deg); stroke-dasharray: 60, 95; stroke-dashoffset: 0; &#125; 40% &#123; transform: rotate(280deg); stroke-dasharray: 60, 95; stroke-dashoffset: 0; &#125; 70%, 100% &#123; transform: rotate(280deg); stroke-dashoffset: -23; stroke-dasharray: 42, 95; &#125;&#125; 动画分为两个部分： 1.圆弧旋转2.旋转之后缩短变形在一个循环里，最后留有 30% 的时间保持一个停留状态。 给眼睛添加动画两只眼睛都是沿着圆弧运动 ，例如左眼，首先用一个路径来规定它的运动轨迹： 1&lt;path id=\"eyeright\" d=\"M 40 60 A 15 15 180 0 1 60 60\" style=\"fill: none; stroke-width: 0;\" /&gt; 然后使用 animateMotion 来设置动画：12345678910&lt;circle class=\"eye\" cx=\"\" cy=\"\" r=\"2.5\" style=\"fill: #fff;\"&gt; &lt;animateMotion dur=\"0.8s\" repeatCount=\"indefinite\" keyPoints=\"0;0;1;1\" keyTimes=\"0;0.3;0.9;1\" calcMode=\"linear\"&gt; &lt;mpath xlink:href=\"#eyeleft\"/&gt; &lt;/animateMotion&gt;&lt;/circle&gt; 1.dur：动画的时间2.repeatCount：重复次数3.keyPoints：运动路径的关键点4.timePoints：时间的关键点5.calcMode：控制动画的运动速率的变化，discrete | linear | paced|spline 四个属性可选6.mpath：指定一个外部定义的路径 步骤7将不同部位的动画组合到一起 眼睛的动画是从嘴巴旋转完成开始，到嘴巴变形完成结束，因此和嘴巴的动画一样，设置了四个对应的关键时间点。为了让衔接更顺畅，眼睛的动画开始比嘴巴变形开始稍微提前了一点点。 小结SVG 在网页中的角色更像是类似图片一样的媒体对象，其动画也常常和 CSS 有关联，除了微软系的浏览器不支持之外，其兼容性还是相当可观的。在平时工作过程中，矢量图标的动画、轨迹动画特别适合使用 SVG 来实现。","categories":[],"tags":[]},{"title":"浏览器页面渲染机制","slug":"浏览器页面渲染机制","date":"2018-10-22T04:34:56.000Z","updated":"2018-10-22T04:35:17.717Z","comments":true,"path":"浏览器页面渲染机制/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/浏览器页面渲染机制/","excerpt":"","text":"分享目的： 解释浏览器如何将 HTML、CSS 和 JavaScript 转换为我们可以与之交互的网站，了解这个过程，可以帮助我们优化 Web 应用程序，从而获得更快的速度和更好的性能。问题： 浏览器如何渲染网站？ (接下来会解构这个过程，但是首先，有必要了解一些基础概念) Web 浏览器是一种软件，它从远程服务器（或者本地磁盘）加载文件并将其显示——使用户可以与之交互。浏览器中有一个软件叫浏览器引擎。在不同的浏览器中，浏览器的某个部分会根据它接收到的文件确定显示什么，这就是所谓的浏览器引擎。浏览器引擎是每一种主流浏览器的核心软件组件，不同的浏览器开发商用不同的名字来称呼他们的引擎。 1. html解析 接收信息数据是以“数据包”的形式通过互联网发送，而数据包以字节为单位。当你编写一些 HTML、CSS 和 JS，并试图在浏览器中打开 HTML 文件时，浏览器会从你的硬盘（或网络）中读取 HTML 的原始字节。 计算机接收到字节数据浏览器读取的是原始数据字节，而不是你编写的代码的实际字符。浏览器读取的是原始数据字节，而不是你编写的代码的实际字符。 从 HTML 的原始字节到 DOM，浏览器对象需要处理的是文档对象模型（DOM）对象。那么，DOM 对象是从何而来的呢？首先，将原始数据字节转换为字符。（Bytes =&gt; haracters） 从字节到字符这一点，你可以通过你所编写的代码的字符看到。这种转换是基于 HTML 文件的字符编码完成的。至此，浏览器已经从原始数据字节转换为文件中的实际字符。但这不是最终的结果。这些字符会被进一步解析为一些称为“标记（token）”的东西。（Bytes =&gt; haracters =&gt; Tokens···） 从字符到标记那么，这些标记是什么？文本文件中的一堆字符对浏览器引擎而言没什么用处。如果没有这个标记化过程，那么这一堆堆字符只会生成一系列毫无意义的文本，即 HTML 代码——不会生成一个真正的网站。当你保存一个扩展名为.html 的文件时，就向浏览器引擎发出了把文件解析为 HTML 文档的信号。浏览器“解释”这个文件的方式是首先解析它。在解析过程中，特别是在标记化过程中，浏览器会解析 HTML 文件中的每个开始和结束“标签（tag）”。解析器可以识别尖括号中的每个字符串，如“&lt; html&gt;”、“&lt; p&gt;” 但标记还不是最终的结果。标记化完成后，接下来，标记将被转换为节点。你可以将节点看作是具有特定属性的不同对象。实际上，更好的解释是，将节点看作是文档对象树中的独立实体。但节点仍然不是最终结果。现在，让我们看一下最后一点。在创建好之后，这些节点将被链接到称为DOM 的树数据结构中。DOM 建立起了父子关系、相邻兄弟关系等。在这个 DOM 对象中，每个节点之间都建立了关系。现在，这是我们可以使用的东西了。 标记但标记还不是最终的结果。标记化完成后，接下来，标记将被转换为节点。你可以将节点看作是具有特定属性的不同对象。实际上，更好的解释是，将节点看作是文档对象树中的独立实体。但节点仍然不是最终结果。 DOM (Bytes =&gt; haracters =&gt; Tokens =&gt; Node =&gt; DOM)让我们看一下最后一点。在创建好之后，这些节点将被链接到称为 DOM 的树数据结构中。DOM 建立起了父子关系、相邻兄弟关系等。在这个 DOM 对象中，每个节点之间都建立了关系。这个时候，是浏览器需要的东西了。 2.css解析这个是我们很常见的写法123456789&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"test.css\" /&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 当浏览器接收到原始数据字节并启动 DOM 构建过程时，它还会发出请求来获取链接的 test.css 样式表。当浏览器开始解析 HTML 时，在找到 css 文件的链接标签的同时，它会发出请求来获取它。可能你已经猜到，浏览器还是接收 CSS 数据的原始字节，从互联网或是本地磁盘。 浏览器如何处理这些 CSS 数据的原始字节？ 当浏览器接收到 CSS 的原始字节时，会启动一个和处理 HTML 原始字节类似的过程。就是说，原始数据字节被转换成字符，然后标记，然后形成节点，最后形成树结构。什么是树结构？大多数人都知道 DOM 这个词。同样，也有一种 CSS 树结构，，浏览器不能使用 HTML 或 CSS 的原始字节。必须将其转换成它能识别的形式，也就是这些树形结构。 DOM + CSSOM = 渲染树 渲染树包含页面上所有关于可见 DOM 内容的信息以及不同节点所需的所有 CSSOM 信息。注意，如果一个元素被 CSS 隐藏，例如使用 display; none，那么节点就不会包含在渲染树中。隐藏元素会出现在 DOM 中，但不会出现在渲染树中。这是因为渲染树结合了来自 DOM 和 CSSOM 的信息，所以它知道不能把隐藏元素包含在树中。 元素展示 我们已经得到了在屏幕上显示元素所需的所有信息。我们只要把它展示给用户。这就是这个阶段的全部工作。有了元素内容（DOM）、样式（CSSOM）和计算得出的元素的精确布局信息，浏览器现在就可以将节点逐个“绘制”到屏幕上了。元素可以呈现在屏幕上了！ 渲染阻塞资源 通俗的解释为有东西阻止了屏幕上节点的实际绘制,在成功绘制之前，必须构造 DOM 和 CSSOM，因此，HTML 和 CSS 都是渲染阻塞资源。 JavaScript 如何执行？一个常用的 Web 应用程序肯定会使用一些 JavaScript。这是一定的。JavaScript 的“问题”在于你可以使用 JavaScript 修改页面的内容和样式。通过这种方式，你可以从 DOM 树中删除元素和添加元素，还可以通过 JavaScript 修改元素的 CSSOM 属性。这很方便，但是同时也带来了弊端 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;testRander&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;浏览器页面渲染机制&lt;/p&gt; &lt;img src=\"http://spage.haimati.cn/activityImage/newplan.jpg\"&gt;&lt;/body&gt;&lt;/html&gt; 这是一个非常常见的文档。样式表 style.css简单定义样式：123456* &#123; font-size: 20px;&#125;body &#123; background-color: antiquewhite;&#125; 一段简单的文本和图像呈现在屏幕上。 根据前面的解释，浏览器从磁盘（或网络）读取 HTML 文件的原始字节并将其转换为字符。字符被进一步解析为标记。当解析器遇到&lt; link rel=”stylesheet” href=”style.css”&gt;时，就会请求获取 CSS 文件 style.css。DOM 构造继续进行，当 CSS 文件返回一些内容后，CSSOM 构造就开始了。 引入 JavaScript每当浏览器遇到脚本标签时，DOM 构造就会暂停！整个 DOM 构建过程都将停止，直到脚本执行完成。JavaScript 可以同时修改 DOM 和 CSSOM。由于浏览器不确定特定的 JavaScript 会做什么，所以它采取的预防措施是停止整个 DOM 构造。 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;testRander&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;p id=\"title\"&gt;浏览器页面渲染机制&lt;/p&gt; &lt;img src=\"http://spage.haimati.cn/activityImage/newplan.jpg\"&gt; &lt;script&gt; let title = document.getElementById(\"title\"); console.log(\"title is: \", title); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 当把js放到元素之前的话 123456789101112131415 &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;testRander&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; let title = document.getElementById(\"title\"); console.log(\"title is: \", title); &lt;/script&gt; &lt;p id=\"title\"&gt;浏览器页面渲染机制&lt;/p&gt; &lt;img src=\"http://spage.haimati.cn/activityImage/newplan.jpg\"&gt;&lt;/body&gt;&lt;/html&gt; 当脚本试图访问一个 id 为 header 的 DOM 节点时，由于 DOM 还没有完成对文档的解析，所以它还不存在。这把我们带到了另一个重要的问题。脚本的位置很重要。 在默认情况下，每个脚本都是一个解析器阻断器！DOM 的构建总是会被打断。不过，有一种方法可以改变这种默认行为。如果将 async 关键字添加到脚本标签中，那么 DOM 构造就不会停止。DOM 构造将继续，脚本将在下载完成并准备就绪后执行。 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;testRander&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=\"test.js\" async&gt;&lt;/script&gt; &lt;p id=\"title\"&gt;浏览器页面渲染机制&lt;/p&gt; &lt;img src=\"http://spage.haimati.cn/activityImage/newplan.jpg\"&gt;&lt;/body&gt;&lt;/html&gt; 把js放入test.js中进行引入12let title = document.getElementById(\"title\");console.log(\"title is: \", title); 这样DOM的构建就不会停止，脚本在构造完成后执行。","categories":[],"tags":[]},{"title":"Promise的作用以及基本使用","slug":"Promise的作用以及基本使用","date":"2018-10-15T18:28:06.000Z","updated":"2018-10-15T18:28:47.744Z","comments":true,"path":"Promise的作用以及基本使用/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/Promise的作用以及基本使用/","excerpt":"","text":"Promise的作用以及基本使用关于Promise的概念，在实际使用之前对其的理解一直比较模糊，只是停留在一些文档上的描述。在使用中其实可以根据其特性进行一些更佳的实践。在这里简单介绍一下其作用以及基础用法。作用 Promise对象可以理解为一次执行的异步操作，使用promise对象之后可以使用一种链式调用的方式来组织代码；让代码更加的直观。也就是说，有了Promise对象，就可以将异步操作以同步的操作的流程表达出来，避免了层层嵌套的回调函数。总结一下就是可以将原先不可控的回调通过promise转为更加可控更清晰的方式表达，更加高效，更便于维护。 示例：未使用promise，回调必须层层嵌套123456789$.ajax(url1, function(data1)&#123; // do something1... $.ajax(url2, function(data2)&#123; // do something2... $.ajax(url3, function(data3)&#123; // do something3... &#125;) &#125;);&#125;); 如果有多个嵌套，导致代码不够直观，逻辑梳理上会更加的困难。并且这几个操作都是有执行的一个依赖关系，需要等待上一个请求完成才可以进行下一个请求，而这些本身就是异步，这样的等待是没有必要的。所以promise可以帮助我们解决这一部分痛点。 了解一下Promise的特点1、对象的状态不受外界影响（Promise对象代表一个异步操作，有三种状态）。 pending（执行中） Resolved（成功，又称Fulfilled） rejected（拒绝） 其中pending为初始状态，fulfilled和rejected为结束状态（结束状态表示promise的生命周期已结束）。promise只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态.。 2、一旦状态改变，就不会再变，任何时候都可以得到这个结果。 Promise对象的状态改变，只有两种可能： 从Pending变为Resolved 从Pending变为Rejected 只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果 3、Promise对象的缺点： 无法取消Promise，一旦新建它就会立即执行，无法中途取消。 如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。 当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成。 4、promise兼容性：除了IE这种古老的浏览器和一些低版本的安卓外，大部分的浏览器对于promise的兼容性还是很友好的，所以我们可以在谷歌的控制台直接测试我们的代码。 接下来用一些例子来看看具体的使用方法 基本用法 1、首先我们new一个Promise,将Promise实例化2、然后在实例化的promise可以传两个参数，一个是成功之后的resolve，一个是失败之后的reject3、Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数12345678910111213141516171819var promise = function(isReady)&#123; return new Promise(function(resolve, reject)&#123; // do somthing, maybe async if (isReady)&#123; return resolve('成功执行'); &#125; else &#123; return reject('出错了'); &#125; &#125;);&#125; //Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。promise(true).then(function(value)&#123; // success,这里是resolve的回调函数 console.log(value); //hello world&#125;, function(err)&#123; // failure，这里是reject的回调函数 console.log(err)&#125;) 上述代码是执行成功，返回成功执行,如果想测试一下失败后的返回值，可以把promise(true).then…这里改为 promise(false).then…在控制台试下 链式操作 Promise并不只是简化层层回调的写法，更重要的在于是通过传递状态的方式来使回调方式能够及时的调用，因此，相比于callback，它更灵活，更简单。下面我们来看看Promise的链式操作：12345678910111213141516171819202122232425262728293031323334353637383940414243makePromise1().then(function(value)&#123; console.log(value); return makePromise2();&#125;).then(function(value)&#123; console.log(value); return makePromise3();&#125;).then(function(value)&#123; console.log(value);&#125;);function makePromise1()&#123; var p = new Promise(function(resolve, reject)&#123; //异步操作 setTimeout(function()&#123; console.log('异步1'); resolve('异步1参数'); &#125;, 2000); &#125;); return p; &#125;function makePromise2()&#123; var p = new Promise(function(resolve, reject)&#123; //异步操作 setTimeout(function()&#123; console.log('异步2'); resolve('异步2参数'); &#125;, 2000); &#125;); return p; &#125;function makePromise3()&#123; var p = new Promise(function(resolve, reject)&#123; //异步操作 setTimeout(function()&#123; console.log('异步3'); resolve('异步3参数'); &#125;, 2000); &#125;); return p; &#125; 上面的代码中，有三个异步操作，makePromise1,makePromise2,makePromise3。其中第二个和第三个依次执行，也就是上一个操作完成之后才可以进行。会相继的打印出异步1，异步1参数··· Promise的catch方法 12345678910111213141516171819var promise = function(isReady)&#123; return new Promise(function(resolve, reject)&#123; if (isReady)&#123; return resolve('成功执行'); &#125; else &#123; return reject('失败'); &#125; &#125;);&#125;promise(true).then(function(value)&#123; console.log('resolved'); console.log(value); console.log(wawa); //此处的wawa未定义&#125;).catch(function(error)&#123; console.log('rejected'); console.log(error);&#125;); catch 方法是 then(onFulfilled, onRejected) 方法当中 onRejected 函数的一个简单的写法，也就是说可以写成 then(fn).catch(fn),相当于 then(fn).then(null, fn)使用 catch 的写法比一般的写法更加清晰明确，其实可以类比成try/catch，这样，其中有报错的地方不会阻塞运行。比如定义了一个未定义wawa,正常来说它上面的代码也不会运行，因为被这个报错阻塞了，有了catch,它上面的代码可以正常运行下去 promise.all方法 Promise.all 可以接收一个元素为 Promise 对象的数组作为参数，当这个数组里面所有的 Promise 对象都变为 resolve 时，该方法才会返回。 123456789101112131415 var p1 = new Promise(function (resolve) &#123; setTimeout(function () &#123; resolve(\"第一个promise\"); &#125;, 3000);&#125;);var p2 = new Promise(function (resolve) &#123; setTimeout(function () &#123; resolve(\"第二个promise\"); &#125;, 1000);&#125;);Promise.all([p1, p2]).then(function (result) &#123; console.log(result); // [\"第一个promise\", \"第二个promise\"]&#125;); 上面的代码中，all接收一个数组作为参数，p1,p2是并行执行的，等两个都执行完了，才会进入到then，all会把所有的结果放到一个数组中返回，所以我们打印出我们的结果为一个数组。值得注意的是，虽然p2的执行顺序比p1快，但是all会按照参数里面的数组顺序来返回结果。 promise.race方法 race的意思为赛跑，因此，promise.race也是传入一个数组，但是与promise.all不同的是，race只返回跑的快的值，也就是说result返回比较快执行的那个。 12345678910111213141516171819202122 var p1 = new Promise(function (resolve) &#123; setTimeout(function () &#123; console.log(1); resolve(\"第一个promise\"); &#125;, 3000);&#125;);var p2 = new Promise(function (resolve) &#123; setTimeout(function () &#123; console.log(2); resolve(\"第二个promise\"); &#125;, 1000);&#125;);Promise.race([p1, p2]).then(function (result) &#123; console.log(result); &#125;);// 结果：// 2// 第二个promise// 1 在这边可以看到，传的值中，只有p2的返回了，但是p1没有停止，依然有执行。race的应用场景为，比如我们可以设置为网路请求超时。写两个promise，如果在一定的时间内如果成功的那个我们没有执行到，我们就执行失败的那个","categories":[],"tags":[]},{"title":"正则表达式","slug":"正则表达式","date":"2018-09-14T16:00:00.000Z","updated":"2018-09-16T04:06:13.237Z","comments":true,"path":"正则表达式/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/正则表达式/","excerpt":"","text":"正则表达式在平时工作中非常常见，工作中用到的大部分正则都是去网上搜索得来的，再复杂一点看着文档费时费力的拼凑一下。所以觉得很有必要对一些常用的正则内容进行一个归纳和总结。 概念： Regular Expression使用单个字符串来描述、匹配一系列符合某个语法规则的字符串。说简单了就是按照某种规则去匹配符合条件的字符串。 RegExp对象 javaScript中通过内置对象 RegExp 支持正则表达式，有两种方法实例化 RegExp 对象： 1.字面量2.构造函数 1.字面量假设你需要把一句英文里面的小写is匹配成大写的 IS，可以这样做：1234var reg = /is/;var text = 'He is a boy, This is a dog. Where is she?';var result = text.replace(reg,'IS');console.log(result) //He IS a boy, This is a dog. Where is she? 这样就把第一个英文单词’is’替换成了’IS’，假如你想把该句中所有的单词’is’都替换成’IS’,应该这样写：1234var reg = /is/g;var text = 'He is a boy, This is a dog. Where is she?';var result = text.replace(reg,'IS');console.log(result) //He IS a boy, ThIS IS a dog. Where IS she? 在正则的末尾加上’g’就好，’g’表示global，是全局匹配的意思。’g’是正则表达式的一个修饰符，修饰符有: ‘g’: global 全文搜索，不添加的话，搜索到第一个停止 ‘i’: ignore case 忽略大小写，默认大小写敏感 ‘m’: multiple 多行搜索，检测字符串中的换行符，主要是影响字符串开始标识符^和结束标识符$的使用 但是这样的话也改变了this中is的大小写，这显然不是我们想要的，所以这个时候可以这样做1234var reg = /\\bis\\b/g;var text = 'He is a boy, This is a dog. Where is she?';var result = text.replace(reg,'IS');console.log(result) //He IS a boy, This IS a dog. Where IS she? ‘\\b’:匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。这里的正则在’is’的前后都有’\\b’，这样就只能匹配单词’is’了。 2.构造函数倘若你需要使用构造函数的方式实例化正则，则上面的字面量形式可以改成这样：1234var reg = new RegExp('\\\\bis\\\\b','g');var text = 'He is a boy, This is a dog. Where is she?';var result = text.replace(reg,'IS');console.log(result) //He IS a boy, This IS a dog. Where IS she? 用这种方式就不需要’/‘符号开始和结尾以表示是正则了。但是里面的’\\’等特殊字符需要用’\\’转义。 “\\”:将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配一个换行符。串行“\\ \\”匹配“\\”而“\\ (”则匹配“(”。 元字符 正则表达式由两种基本字符类型组成： 原义文本字符，即代表它原本含义的字符 元字符，元字符是在正则表达式中有特殊含义的非字母字符，例如上文提到的’\\b’，表示匹配单词边界，并不是匹配’\\b’，在正则中主要存在这些特殊字符：*,+,?,$,^,.,|,\\,(,),{,},[,] 字符类（字符集合） 一般情况下，正则表达式一个字符对应字符串一个字符 思考： var text = ‘a1b2c3d4’; 把英文字母都换成X 但是更多的时候，我们匹配的并不是某个字符，而是符合一系列特征的字符串。这时候，我们就可以使用元字符’[]’来构建一个简单的类，所谓类是指符合某些特性的对象，一个泛指，而不是特指某个字符，例如：表达式’[abc]’把字符a或b或c归为一类，表达式可以匹配这样的字符。1234var reg = /[abc]/g;var text = 'a1b2c3d4';var result = text.replace(reg,'X');console.log(result); //X1X2X3d4 字符类取反使用元字符’^’创建 反向类/负向类。反向类的意思是不属于类的内容，表达式’[^abc]’表示不是字符a或b或c的内容,例如：1234var reg = /[^abc]/g;var text = 'a1b2c3d4';var result = text.replace(reg,'X');console.log(result); //aXbXcXXX 范围类 思考： var text = ‘a1b2c3d4z9’; 把英文字母都换成Q 倘若我们需要用字符类匹配数字，按照前面的匹配方式，书写可能会很麻烦，需要这样：’[0123456789]’，对于 a 到 z 的字符更是如此。 为此，正则表达式给我们提供了范围类，我们可以使用[a-z]来连接两个字符，表示从a到z的任意字符，这是一个闭区间，包含 a 和 z 本身。1234var reg = /[a-z]/g;var text = 'a1b2c3d4z9';var result = text.replace(reg,'Q');console.log(result); //Q1Q2Q3Q4Q9 可以发现，这样就方便了许多。此外，在’[]’组成的类的内部是可以连写的[a-zA-Z]，这样就形成了大写字母小写字母完全匹配:1234var reg = /[a-zA-Z]/g;var text = 'a1b2c3d4z9ASDFHDFH';var result = text.replace(reg,'Q');console.log(result); //Q1Q2Q3Q4Q9QQQQQQQQ 预定义类及边界 预定义类 思考： 匹配一个 ab+数字+任意字符 的字符串： 正则表达式提供预预定义类来匹配常见的字符类，让我们书写更方便。 字符 等价类 含义 . [^\\r\\n] 除了回车符和换行符之外的所有字符 \\d [0-9] 数字字符 \\D [^0-9] 非数字字符 \\s [\\t\\n\\x0B\\f\\r] 空白符 \\S [^\\t\\n\\x0B\\f\\r] 非空白符 \\w [a-zA-Z_0-9] 单词字符（字母、数字、下划线） \\w [a-zA-Z_0-9] 单词字符（字母、数字、下划线） \\W [^a-zA-Z_0-9] 非单词字符 1234var reg = /ab\\d./; //之前我们可能会这样写：ab[0-9][^\\r\\n]var text = 'absdlkjflab91323';var result = text.replace(reg,'AAAA');console.log(result); //absdlkjflAAAA323 边界 思考： var text = ‘He is a boy, This is a dog. Where is she?’; 我们在第一个例子中用到过’\\b’单词边界，这里我们做一个跟上面第一个例子相反的，只把’This’中的’is’替换为’IS’ 除了预定义类，正则表达式还提供了几个常用的边界字符。 字符 等价类 ^ 以xxx开始 $ 以xxx结束 \\b 单词边界 \\B 非单词边界 1234var reg = /\\Bis\\b/g;var text = &apos;He is a boy, This is a dog. Where is she?&apos;;var result = text.replace(reg,&apos;IS&apos;);console.log(result) //He is a boy, ThIS is a dog. Where is she? 在类’[]’中’^’表示取反，但是不在类中的时候’^’表示以xxx开始，’$’表示以xxx结束，这两个边界字符一般放在正则的开始和结束位置。 量词 倘若我们希望匹配一个连续出现20次的数字的字符串，通过我们之前学习的知识，我们可能会写出连续20个’\\d’。假如20次你还可以接受，那100次，1000次，甚至更多次，你怎么办？为了解决这个问题，正则表达式引入了量词的概念，下面是一些量词和他们的含义： 字符 含义 ？ 出现零次或一次（最多出现一次） + 出现一次或者多次（至少出现一次 * 出现零次或者多次（任意次） {n} 出现n次 {n,m} 出现n到m次 {n,} 至少出现n次 1234var reg = /\\d&#123;4&#125;[/-]\\d&#123;2&#125;[/-]\\d&#123;2&#125;/g;var text = &apos;2018-02-23，2018/02/24，2018~02/25&apos;;var result = text.replace(reg,&apos;匹配正确日期格式&apos;);console.log(result);//匹配正确日期格式，匹配正确的日期格式，2018~02/25 分组 思考： var text = ‘ByronByronByronnn’;将单词Byron替换为数字0 匹配字符串 Byron 连续出现3次的场景，根据前面所了解的，我们可能会这样写：Byron{3}。但是这样是错误的，试试你会发现只有Byronnn才能匹配成功，即最后的n重复了3次，并不能匹配整个单词重复三次的情况：1234var reg = /Byron&#123;3&#125;/g;var text = &apos;ByronByronByronnn&apos;;var result = text.replace(reg,&apos;0&apos;);console.log(result);//ByronByron0 那么，我们要怎么匹配Byron连续出现3次的情况呢，这时候，正则表达式的分组’()’就帮我们解决了这个问题：1234var reg = /(Byron)&#123;3&#125;/g;var text = 'ByronByronByronnn';var result = text.replace(reg,'0');console.log(result);//0nn 或有时候，我们可能会需要在匹配时用到或者的关系，利用之前的’[]’字符类（字符集合）可能只能匹配单个字符的或者关系，比如匹配a或b，你可以这样写：’[ab]’，但是如果你需要匹配的是一整个单词的或者关系呢，这个时候’[]’就不好使了。这时候，我们用’|’可以达到或的效果：1234567891011//匹配单词Byron或者Caspervar reg = /Byron|Casper/g;var text = &apos;ByronCasper&apos;var result = text.replace(reg,&apos;X&apos;);console.log(result);//XX//匹配Byr+on或Ca+spervar reg = /Byr(on|Ca)sper/g;var text = &apos;ByronsperByrCasper&apos;var result1 = text.replace(reg,&apos;X&apos;);console.log(result1);//XX 反向引用 思考：把日期’2015-12-25’替换成’12/25/2015’ 这时候，正则的反向引用就可以取到作用了。表达式在匹配时，表达式引擎会将小括号 “( )” 包含的表达式所匹配到的字符串记录（分组捕获）下来。在获取匹配结果的时候，小括号包含的表达式所匹配到的字符串可以单独获取。 在js中正则匹配成功的字符串可以用$1表示第一次匹配成功，$3表示第三次匹配成功的字符，以此类推至$99）。于是，上面的例子就可以这样写了：1234var reg = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/g;var text = '2015-12-25'var result = text.replace(reg,'$2/$3/$1');console.log(result);//12/25/2015 忽略分组在上面的反向引用中，我们默认是根据’()’全部捕获记录为$1~$99的，倘若我们想忽略某个捕获要怎么办呢？ 不希望捕获某些分组，只需要在分组内加上’?:’就可以了。1234var reg = /(?:Byron)(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/g;var text = 'Byron2016-12-05'var result = text.replace(reg,'$2/$3/$1');console.log(result);//12/05/2016 对象属性 思考： var reg1 = /\\w/; var reg2 = /\\w/g;那么reg1.test(‘a’)和 reg2.test(‘ab’)的结果分别是什么？ 我们在用正则表达式相关的方法时，经常会用到正则表达式相关的一些对象属性，下面我们总结一下正则表达式相关的对象属性： golbal: 是否全文搜索，默认false ignore case: 是否大小写敏感，默认false multiline: 多行搜索，默认false lastIndex: 是当前表达式匹配内容的最后一个字符的下一个位置 source: 正则表达式的文本字符串 其中前面三个我们在上文中已经提到过了，source的话，我们一起结合起来看看代码：12345678910111213var reg1 = /\\w/;var reg2 = /\\w/gim;console.log(reg1.global);//falseconsole.log(reg1.ignoreCase);//falseconsole.log(reg1.multiline);//falseconsole.log(reg2.global);//trueconsole.log(reg2.ignoreCase);//trueconsole.log(reg2.multiline);//trueconsole.log(reg1.source);//\\wconsole.log(reg2.source);//\\w 支持正则表达式的 String 对象的方法 支持正则表达式的 String 对象的方法有： search： 检索与正则表达式相匹配的值 match： 找到一个或多个正则表达式的匹配。 replace： 替换与正则表达式匹配的子串。 split： 把字符串分割为字符串数组。searchsearch() 方法用于检索字符串中指定的子字符串，或检索与正则表达式匹配的子字符串语法为stringObject.search(regexp),结果返回 stringObject 中第一个与 regexp 相匹配的子串的起始位置index，如果没有找到任何匹配的子串，则返回 -1。需要注意的是，search() 方法不执行全局匹配，它将忽略修饰符’g’,并且总是从字符串的开始进行检索。123456var str = 'a1b2c3d4';console.log(str.search('1')); //1console.log(str.search('10')); //-1console.log(str.search(/b2/)); //2console.log(str.search(/\\w\\d/g)); //0console.log(str.search(/\\w\\d/g)); //0 忽略'g',执行多次未返回不同结果 matchmatch() 方法将检索字符串，以找到一个或多个与 RegExp 匹配的文本，在 RegExp 是否有修饰符’g’影响很大。它返回指定的值，而不是字符串的位置。 语法为stringObject.match(searchvalue)或stringObject.match(regexp)，结果返回存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。 1.非全局调用 如果 regexp 没有标志 g ，那么 match() 方法就只能在字符串中执行匹配一次 如果没有找到任何匹配文本，返回 null 否则它将返回一个数组，其中存放了与它找到的匹配文本有关的信息： 数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。1234var reg3 = /\\d(\\w)\\d/;var str = '1a2b3c4d5e';var arr = str.match(reg3);console.log(arr);// [1a2, a] 全局调用全局调用就和 exec() 不同了： 如果 regexp 具有标志 g 则 match() 方法将执行全局检索，找到字符串中所有匹配的子字符串 没有找到任何匹配的子字符串则返回 null 如果找到了一个或者多个匹配字串，则返回一个数组 数组元素中存放的是字符串中所有匹配的字串，而且也没有index属性和input属性 1234var reg4 = /\\d(\\w)(\\w)\\d/g;var str = '$1az2bb3cy4dd5ee';var arr = str.match(reg4)console.log(arr); // [\"1az2\", \"3cy4\"] split我们经常用它把字符串分割为数组。但是你可能不知道，我们在一些复杂情况下我们可以使用正则表达式解决 123456789var str = 'a,b,c,d';var arr = str.split(',');console.log(arr); //['a','b','c','d']&lt;!--那如果是这样的字符串呢--&gt;var str = 'a1b2c3d';var arr = str.split(/\\d/);console.log(arr); //['a','b','c','d'] 其实，我们在用 split() 分割字符’,’的时候，split() 方法也是把’,’ 隐士转换成正则’/,/‘的, search() 方法和 replace() 方法也是一样的。 replacereplace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。语法为stringObject.replace(regexp/substr,replacement),结果返回一个新的字符串，是用 replacement 替换了 regexp 的第一次匹配或所有匹配之后得到的。","categories":[],"tags":[]},{"title":"js中this的指向","slug":"js中this的指向","date":"2018-07-21T09:38:00.000Z","updated":"2018-07-22T05:51:14.630Z","comments":true,"path":"js中this的指向/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/js中this的指向/","excerpt":"","text":"为什么要使用this? 解决的问题？ 可以先通过一个例子了解下1234567891011121314function speak()&#123; var name = this.name console.log(\"Hello I am --\" + name)&#125;var me = &#123; name: 'a', speak: speak&#125;var you = &#123; name: 'b', speak: speak&#125;me.speak() //Hello I am -- ayou.speak() //Hello I am -- b this可以在同一个执行环境中使用不同的上下文对象。它其实提供了一种更加优雅的方式来隐式“传递”一个对象引用，因此可以使API设计的更加简洁且易于复用。 定义：this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象其实关于this的指向问题可以从函数的执行调用过程中理解，当一个函数被调用时，会创建一个活动记录(执行上下文)。这个记录会包含函数在哪里被调用、函数的调用方法、传入的参数等信息，this也是这里的一个属性。当函数被某个对象调用时可以理解为在函数调用的那一刻它被调用对象拥有。所以this指向调用其的对象。 对于this的指向问题，一般都是根据以上的解释去理解，虽然在一般的情况下这样的理解是不会有问题的，但是当在某些场景下这样的解释并不是很准确，所以会让人感觉一直琢磨不透的感觉。今天可以就不同情况展开讨论下this指向的问题。看看下面的打印结果会是什么 12345678910111213141516// 例子1function test()&#123; var a = 10; console.log(this.a); console.log(this);&#125;test();// 例子二var b = 10;var o = &#123; b: 20, fn:function()&#123; console.log(this.b); &#125;&#125;o.fn(); 按照上面的定义this最终指向的是调用它的对象，这里的函数test实际是被Window对象所点出来的。所以例子1中的this指向的是windows。在例子2中函数的执行是通过o.fn()调用的，所以this的指向的当然是对象o了。这两个例子可以验证上面的定义，但是还是不够准确的。123456789// 例子三var b = 10;var o = &#123; b: 20, fn:function()&#123; console.log(this.b); &#125;&#125;window.o.fn(); 此时打印的应该是什么呢？这段代码和上面的那段代码几乎是一样的，但是这里的this为什么不是指向window，如果按照上面的理论，最终this指向的是调用它的对象，在此处就显得不是很准确了。所以关于函数中this的指向其实是可以分为三种情况的 如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window 如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。 如果一个函数中有this，这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象，这就可以解释例子三中的this不是指向window了那么以下的打印结果又应该是什么？12345678910111213// 例子4var o = &#123; a:10, b:&#123; a:12, fn:function()&#123; console.log(this.a); console.log(this); &#125; &#125;&#125;var j = o.b.fn;j(); 此处的this指向的是window,其实这里只需要理解清楚一句话”this永远指向的是最后调用它的对象”,也就是看它执行的时候是谁调用的，例子4中虽然函数fn是被对象b所引用，但是在将fn赋值给变量j的时候并没有执行所以最终指向的是window，这和例子3是不一样的，例子3是直接执行了fn。所以说，那例子5中的打印结果又应该是什么呢？1234567891011// 例子5function foo() &#123; console.log( this.a );&#125;var obj = &#123; a: 2, foo: foo &#125;;var bar = obj.foo; // 函数别名!var a = \"xxxxx\"bar(); 不同情况下this的使用1.构造函数版this123456// 例子6function Fn()&#123; this.user = \"lh\";&#125;var a = new Fn();console.log(a.user); 1234567891011121314//不使用new指向windowfunction Person (name) &#123; console.log(this) // window this.name = name;&#125;Person('inwe')//使用newfunction Person (name) &#123; this.name = name console.log(this) //people self = this &#125; var people = new Person('iwen') console.log(self === people) //true 这里之所以对象a可以点出函数Fn里面的user是因为new关键字可以改变this的指向，将这个this指向对象a，我们这里用变量a创建了一个Fn的实例（相当于复制了一份Fn到对象a里面），此时仅仅只是创建，并没有执行，而调用这个函数Fn的是对象a，那么this指向的自然是对象a，那么为什么对象Fn中会有user，因为已经复制了一份Fn函数到对象a中，用了new关键字就等同于复制了一份。 ！当this遇上return时1234567891011121314151617181920212223242526// 例子7function fn() &#123; this.user = 'lh'; return &#123;&#125;; &#125;var a = new fn; console.log(a.user);// 例子8function fn() &#123; this.user = 'lh'; return function()&#123;&#125;;&#125;var a = new fn; console.log(a.user)// 例子9function fn() &#123; this.user = 'lh'; return 1;&#125;var a = new fn; console.log(a.user); 由上可知，如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。 2.箭头函数中的this12345678var x=11;var obj=&#123; x:22, say:()=&gt;&#123; console.log(this.x); &#125;&#125;obj.say(); 箭头函数不是通过function关键字定义的，也就不遵循以上的this规则，而是“继承”外层作用域中的this指向。箭头函数中的this是在定义函数的时候绑定，而不是在执行函数的时候绑定。所谓的定义时候绑定，就是this是继承自父执行上下文！！中的this，比如这里的箭头函数中的this.x，箭头函数本身与say平级以key:value的形式，也就是箭头函数本身所在的对象为obj，而obj的父执行上下文就是window，因此这里的this.x实际上表示的是window.x，因此输出的是11。 改变this指向的几种方法（apply，call, bind）12345678var a = &#123; user:\"lh\", fn:function()&#123; console.log(this.user); &#125;&#125;var b = a.fn;b(); 此时要改变this的指向，可以通过call方法12345678var a = &#123; user:\"lh\", fn:function()&#123; console.log(this.user); &#125;&#125;var b = a.fn;b.call(a); 通过在call方法，给第一个参数添加要把b添加到哪个环境中，也就是说，this就会指向那个对象。call方法除了第一个参数以外还可以添加多个参数，如下 123456789var a = &#123; user:\"lh\", fn:function(p1, p2)&#123; console.log(this.user) console.log(p1+p2) &#125;&#125;var b = a.fn;b.call(a, 1, 3） 使用apply()方法，改变this指向的效果和call相似，在于他们传递的参数格式不同，第二个参数必须是一个数组，如下:123456789var a = &#123; user:\"lh\", fn:function(p1, p2)&#123; console.log(this.user) console.log(p1+p2) &#125;&#125;var b = a.fn;b.apply(a, [1, 3]） !当call和apply的第一个参数写的是null，那么this指向的是window对象 bind()方法 bind()方法也可用来改变this的指向，但是和call,apply方法在用法上有区别,如下: 12345678var a = &#123; user:\"lh\", fn:function()&#123; console.log(this.user); &#125;&#125;var b = a.fn;b.bind(a); 此时发现并不打印任何的结果，这是因为bind方法返回的是一个修改过后的函数,此时执行conole.log(b.bind(a))会得到的结果是：1234ƒ () &#123; console.log(this.user);&#125; call和apply都是改变上下文中的this并立即执行这个函数，bind方法可以让对应的函数想什么时候调就什么时候调用，并且可以将参数在执行的时候添加，这是它们的区别，根据自己的实际情况来选择使用。并且也是可以像call和apply一样传递参数","categories":[],"tags":[]},{"title":"前端路由实现原理","slug":"前端路由实现原理","date":"2018-07-21T03:04:46.000Z","updated":"2018-07-21T03:05:00.015Z","comments":true,"path":"前端路由实现原理/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/前端路由实现原理/","excerpt":"","text":"前端路由实现（history）了解： HTML5 history新增了两个API:history.pushState和history.replaceState 两个api都接受三个参数 状态对象（state object）：一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。 标题（title）：FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。 地址（URL）： 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。 相同之处是两个API都会操作浏览器的历史记录，而不会引起页面的刷新。不同之处在于pushState会增加一条新的历史记录，而replaceState则会替换当前的历史记录 大家可以先在控制台试试，看看地址栏发生了什么变化12345678window.history.pushState(null, null, \"test\");window.history.pushState(null, null, \"/test\");window.history.pushState(null, null, \"#/hello\");window.history.pushState(null, null, \"?name=\");&lt;/code&gt;&lt;/pre&gt; 实例演示 建立html文件，index.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;前端路由实现&lt;/title&gt; &lt;style&gt; .warp&#123; width:400px; height:400px; border:1px solid grey; margin:0 auto; &#125; .nav&#123; border-bottom:1px solid grey; &#125; .nav li&#123; display:inline-block; list-style:none; &#125; .nav li a&#123; display:inline-block; text-decoration: none; padding:10px 15px; &#125; .router&#123; padding:20px; &#125; a&#123; cursor: pointer; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;section class=\"warp\"&gt; &lt;div class=\"nav\"&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"javascript:void(0)\" data-path=\"index\"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"javascript:void(0)\" data-path=\"news\"&gt;新闻&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"javascript:void(0)\" data-path=\"about\"&gt;关于&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div id=\"router\" class=\"router\"&gt; &lt;!-- 内容加载区域 --&gt; &lt;/div&gt; &lt;/section&gt; &lt;script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"&gt;&lt;/script&gt; &lt;script src=\"./router.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 此时的页面为： 引入js文件router.js12345678910(function()&#123; history.replaceState(null,null,'');//最开始的状态，采用replace直接替换 $('#router').html('&lt;p&gt;显示内容区域&lt;/p&gt;') $('a').on('click',function()&#123; console.log(this.text) var text = this.text; $('#router').html('&lt;p&gt;'+ text +'&lt;/p&gt;') history.pushState(null,null,'#/'+text); &#125;) &#125;)() 此时点击导航按钮时 此时当点击不同的导航项的时候，地址栏上的路由进行了对应的改变，展现的内容区域也发生了变化。但是实际上这个并没有实现路由的真正含义。因为内容部分的改变是根据事件的触发而获得当前的内容。 此时如果点击浏览的前进和后退按钮，内容是无法监听到地址栏的变化而作出改变的 在此基础上变动一下实现方式，将router.js改为：12345678910111213141516171819202122232425 // 状态版(function()&#123; var count = [0,0,0] $('#router').html('&lt;p&gt;首页&lt;/p&gt;'+count[0]+'&lt;p&gt;新闻&lt;/p&gt;'+count[1]+'&lt;p&gt;关于&lt;/p&gt;'+count[2]) // history.replaceState(count,null,'');//最开始的状态，采用replace直接替换 for(var i = 0 ; i&lt;$('a').length; i++)&#123; $('a')[i].index = i $('a').eq(i).on('click',function()&#123; console.log(this.index); var index = this.index; count[index]++; $('#router').html('&lt;p&gt;首页&lt;/p&gt;'+count[0]+'&lt;p&gt;新闻&lt;/p&gt;'+count[1]+'&lt;p&gt;关于&lt;/p&gt;'+count[2]) console.log(count) history.pushState(count,null,'#/count'+count[index]);//之后的状态，需要进行保存 &#125;) &#125; //监听history其他api导致地址栏url改变事件 window.addEventListener('popstate',function(e)&#123; console.log(e.state); var state = e.state; $('#router').html('&lt;p&gt;首页&lt;/p&gt;'+state[0]+'&lt;p&gt;新闻&lt;/p&gt;'+state[1]+'&lt;p&gt;关于&lt;/p&gt;'+state[2]) &#125;)&#125;)() 此时的思路是做一个状态记录，记录下每个导航按钮被点击的次数。当每次执行点击导航栏切换的时候，通过history.pushState（count， null, ‘#/count’+count[index]）这个api,传递了状态对象在内，并在第三个参数中将当前已点击数作为地址栏的显示数据。示例如下： !!当活动历史记录条目更改时，将触发popstate事件。如果被激活的历史记录条目是通过对history.pushState（）的调用创建的，或者受到对history.replaceState（）的调用的影响，popstate事件的state属性包含历史条目的状态对象的副本。 需要注意的是调用history.pushState()或history.replaceState()不会触发popstate事件。只有在做出浏览器动作时，才会触发该事件，如用户点击浏览器的回退按钮（或者在Javascript代码中调用history.back()） 此处通过记录下每次的点击次数来解释了pushState的用法以及参数，其实简单的写法可以表达为：123456789101112131415161718192021(function()&#123; var url = '内容展示'; history.replaceState(url,null,'');//最开始的状态，采用replace直接替换 $('#router').html('&lt;p&gt;'+url+'&lt;/p&gt;') $('a').on('click',function()&#123; console.log(this.text) url = this.text; $('#router').html('&lt;p&gt;'+ url +'&lt;/p&gt;') history.pushState(url,null,'#/'+url); &#125;) window.addEventListener('popstate',function(e)&#123; console.log(e.state); url = e.state $('#router').html('&lt;p&gt;'+ url +'&lt;/p&gt;') &#125;); &#125;)() 现在的效果看上去其实我们相当于回到了远点，但是解决了无法监听地址栏的地址变化问题，是通过监听popstate来作出响应的。现在还只是看了这一部分的路由实现机制，要通过监听作出不同的响应。还需要更深入的与hash进行对比。","categories":[],"tags":[]},{"title":"Vue的渲染函数","slug":"Vue的渲染函数","date":"2018-04-22T01:06:59.000Z","updated":"2018-06-29T11:11:17.768Z","comments":true,"path":"Vue的渲染函数/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/Vue的渲染函数/","excerpt":"","text":"在Vue中，我们都是绝大部分都是使用template来创建html,框架给予了很好的支持，使用起来也很方便，符合常规的编程方式。但是在一些特殊的场景需要有特殊的判断时，使用template显得会低效率，并且代码的可读性也不高。此时我们可以用到render函数，使用javascript的完全编程能力来实现html的创建。情景：12//要求是通过size的值来动态生成title-size标签的组件&lt; title-size :size=\"1\"&gt;Hello world!&lt; /title-size&gt; 此时采用之前的常规做法，我们会选择 1234567891011121314151617181920&lt;script type=\"text/x-template\" id=\"titleSize-template\"&gt; &lt;h1 v-if=\"size === 1\"&gt; &lt;slot&gt;&lt; /slot&gt; &lt;/h1&gt; &lt;h2 v-else-if=\"size === 2\"&gt; &lt;slot&gt;&lt; /slot&gt; &lt;/h2&gt; &lt;h3 v-else-if=\"size === 3\"&gt; &lt;slot&gt;&lt; /slot&gt; &lt;/h3&gt; &lt;h4 v-else-if=\"size === 4\"&gt; &lt;slot&gt;&lt; /slot&gt; &lt;/h4&gt; &lt;h5 v-else-if=\"size === 5\"&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/h5&gt; &lt;h6 v-else-if=\"size === 6\"&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/h6&gt; &lt;/script&gt; 123456789Vue.component('anchored-heading', &#123; template: '#titleSize-template', props: &#123; size: &#123; type: Number, required: true &#125; &#125;&#125;) 此时的组件根据prop取到的数据size值进行选择标签的类型，从而完成动态生成title-size标签的组件。但是这样的话是我们在template中定义不同的h1~h6的标签，然后再去根绝size的值来决定取得是哪个标签，这样的话在数据的处理上显得被动不灵活。并且用这种方式处理时，需要重复使用&lt; slot&gt;&lt; /slot&gt;来插入title-size的内容，反正总结起来就是低效。 这个时候可以尝试render函数重写上面的例子1234567891011121314Vue.component('anchored-heading', &#123; render: function (createElement) &#123; return createElement( 'h' + this.size, // tag name 标签名称 this.$slots.default // 子组件中的阵列 ) &#125;, props: &#123; size: &#123; type: Number, required: true &#125; &#125;&#125;) 此时就显得很灵活，直接根据传入的size值进行创建对应的标签，并且也不需要再写那么多冗长的代码了。注释： this.$slots.default对用 template的的使用没有name（作用相当于以上例子中的slot标签） 节点、树以及虚拟 DOM深入渲染函数之前，我们需要了解一些浏览器的工作原理，当浏览器读html代码时，它会建立一个“DOM 节点”树来保持追踪。每个元素都是一个节点。每片文字也是一个节点。甚至注释也都是节点。一个节点就是页面的一个部分。就像家谱树一样，每个节点都可以有孩子节点 (也就是说每个部分可以包含其它的一些部分)。js的运行速度是很快的，但是dom的渲染确实很慢的，往往是影响性能的一个重要因素。 但是vue是数据驱动的，不需要我们去手动更新节点。只需要告诉 Vue 你希望页面上的 HTML 是什么1&lt;h1&gt;&#123;&#123; testData &#125;&#125;&lt;/h1&gt; 123render: function (createElement) &#123; return createElement('h1', this.testData)&#125; 当数据发生改变时，页面的dom都会被及时高效的去渲染，而不需要自己去做其他的处理。 虚拟 DOMVue 通过建立一个虚拟 DOM 对真实 DOM 发生的变化保持追踪。可以做个例子： 1return createElement('h1', this.testData) createElement 返回的是什么呢？其实不是一个实际的 DOM 元素。它更准确的名字可能是 createNodeDescription，因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，及其子节点。我们把这样的节点描述为“虚拟节点 (Virtual Node)”，也常简写它为“VNode”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。 createElement 参数1234567891011121314151617181920212223242526// @returns &#123;VNode&#125; 返回的是一个描述对象它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点createElement( // &#123;String | Object | Function&#125; // 一个 HTML 标签字符串，组件选项对象，或者 // 解析上述任何一种的一个 async 异步函数，必要参数。 'div', // &#123;Object&#125; // 一个包含模板相关属性的数据对象 // 这样，可以在 template 中使用这些属性。可选参数。 &#123; &#125;, // &#123;String | Array&#125; // 子节点 (VNodes)，由 `createElement()` 构建而成， // 或使用字符串来生成“文本节点”。可选参数。 [ '先写一些文字', createElement('h1', '一条数据'), createElement(MyComponent, &#123; props: &#123; someProp: 'foobar' &#125; &#125;) ]) 深入 data 对象在使用data时要注意：在模板语法中，v-bind:class 和 v-bind:style ，会被特别对待一样，在 VNode 数据对象中，下列属性名是级别最高的字段。该对象也允许你绑定普通的 HTML 特性，就像 DOM 属性一样，比如 innerHTML (这会取代 v-html 指令)。（此处的官方文档写的很全了，就直接拿过来了） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&#123; // 和`v-bind:class`一样的 API 'class': &#123; foo: true, bar: false &#125;, // 和`v-bind:style`一样的 API style: &#123; color: 'red', fontSize: '14px' &#125;, // 正常的 HTML 特性 attrs: &#123; id: 'foo' &#125;, // 组件 props props: &#123; myProp: 'bar' &#125;, // DOM 属性 domProps: &#123; innerHTML: 'baz' &#125;, // 事件监听器基于 `on` // 所以不再支持如 `v-on:keyup.enter` 修饰器 // 需要手动匹配 keyCode。 on: &#123; click: this.clickHandler &#125;, // 仅对于组件，用于监听原生事件，而不是组件内部使用 // `vm.$emit` 触发的事件。 nativeOn: &#123; click: this.nativeClickHandler &#125;, // 自定义指令。注意，你无法对 `binding` 中的 `oldValue` // 赋值，因为 Vue 已经自动为你进行了同步。 directives: [ &#123; name: 'my-custom-directive', value: '2', expression: '1 + 1', arg: 'foo', modifiers: &#123; bar: true &#125; &#125; ], // Scoped slots in the form of // &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125; scopedSlots: &#123; default: props =&gt; createElement('span', props.text) &#125;, // 如果组件是其他组件的子组件，需为插槽指定名称 slot: 'name-of-slot', // 其他特殊顶层属性 key: 'myKey', ref: 'myRef'&#125; ！注意：VNodes 必须唯一","categories":[],"tags":[]},{"title":"Vue.js可复用性","slug":"Vue-js可复用性","date":"2018-04-14T15:54:51.000Z","updated":"2018-06-29T11:00:54.459Z","comments":true,"path":"Vue-js可复用性/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/Vue-js可复用性/","excerpt":"","text":"混入（mixins）在实际的应用中，有很多的业务代码是可以重复使用的，vue.js本身是一个注重于高效率的框架，所以也提供了组件中的复用功能。混入 (mixins) 是一种分发 Vue组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。如下： 123456789101112131415161718// 定义一个混入对象var mixinTest = &#123; created: function () &#123; this.mixinMethod() &#125;, methods: &#123; mixinMethod: function () &#123; console.log('mixinMethod from mixin!') &#125; &#125;&#125;// 定义一个使用混入对象的组件var Component = Vue.extend(&#123; mixins: [mixinMethod]&#125;)var component = new Component() // =&gt; \"hello from mixin!\" 组件和混入对象含有同名选项时 从中可以发现当组件混入对象时，对象的方法以及钩子都被混入了该组件的本身。这种方式是很灵活的。那要是组件和混入对象含有同名选项时，也是有规则的，比如，当数据上和组件有同名时，以组件的数据为先。 12345678910111213141516171819202122var mixin = &#123; data: function () &#123; return &#123; testA: 'aaaa', testB: 'bbbb' &#125; &#125;&#125;new Vue(&#123; mixins: [mixin], data: function () &#123; return &#123; testA: 'AAAA', testC: 'CCCC' &#125; &#125;, created: function () &#123; console.log(this.$data) // =&gt; &#123; testA: \"AAAA\", testB: \"bbbb\", testC: \"CCCC\" &#125; &#125;&#125;) mixins对象里的testA和testB混入到了组件中的data中，同时出现了testA与组件同名，所以优先保留了组件的数据。 混入对象与组件具有同名钩子函数时123456789101112131415var mixin = &#123; created: function () &#123; console.log('混入对象的钩子') &#125;&#125;new Vue(&#123; mixins: [mixin], created: function () &#123; console.log('组件的钩子') &#125;&#125;)// =&gt; \"混入对象的钩子\"// =&gt; \"组件的钩子\" 可以发现混入对象的钩子和组件的钩子都会执行，但是会先执行混入对象的钩子 值为对象的选项时，例如：methods，components等的时候1234567891011121314151617181920212223242526var mixin = &#123; methods: &#123; mixinsMethod: function () &#123; console.log('mixinsMethod') &#125;, sameMethod: function () &#123; console.log('from mixin') &#125; &#125;&#125;var vm = new Vue(&#123; mixins: [mixin], methods: &#123; selfMethod: function () &#123; console.log('selfMethod') &#125;, sameMethod: function () &#123; console.log('from self') &#125; &#125;&#125;)vm.mixinsMethod() // =&gt; \"mixinsMethod\"vm.selfMethod() // =&gt; \"selfMethod\"vm.sameMethod() // =&gt; \"from self\" 由上可得，在值为对象的混入对象混入时，这些将和组件原有的选项混合一起成为一个对象，当对象的键名与组件的键名出现重复时，会使用组件的键名。 全局混入以上列举的都是单独的引入到某一个组件中使用。也可以全局注册混入对象。这样的话所有的实例就都会被混入的对象所作用。也可以根据自己需要做成一个具体的使用工具类。供全局所有的实例使用。不过也要小心使用，毕竟会影响到所有的组件，需要结合实际场景使用。 123456789101112Vue.mixin(&#123; created: function () &#123; var option = this.$options.text if (option) &#123; console.log(option) &#125; &#125;&#125;)new Vue(&#123; text: 'globalMixins!'&#125;)// =&gt; \"globalMixins!\"","categories":[],"tags":[]},{"title":"Vue的内容分发slot的使用","slug":"Vue的内容分发slot的使用","date":"2018-04-14T15:48:31.000Z","updated":"2018-06-29T11:08:09.187Z","comments":true,"path":"Vue的内容分发slot的使用/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/Vue的内容分发slot的使用/","excerpt":"","text":"什么是内容分发？?概括：将父组件的内容放到子组件指定的位置 场景：在使用组件时，我们常常需要像这样组合使用1234&lt;app&gt; &lt;app-header&gt;&lt;/app-header&gt; &lt;app-footer&gt;&lt;/app-footer&gt;&lt;/app&gt; 此时有两个点需要注意： &lt; app&gt; 组件不确定自己所接收的数据。这是由使用 &lt; app&gt; 的父组件所决定的。 &lt; app&gt; 作为一个组件使用，可能有自己的模板。 所以为了让组件可以很好的组合使用，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为内容分发，也就是将父组件的内容放到子组件的指定位置。 先了解一下 ‘编译作用域’ 的概念 : 父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译!例如： 123&lt;child-component&gt; &#123;&#123; message &#125;&#125;&lt;/child-component&gt; 此时的message应该绑定的是父组件的数据还是子组件的数据？答案是父组件，这就是编译作用域。再看一个很容易犯错误的例子： 12//childProperty是子组件中的属性，此时的代码不会如我们预期生效。父组件模版不能取到子组件中的状态&lt;child-component v-show=\"childProperty\"&gt;&lt;/child-component&gt; 根据编译作用域，此时正确的做法应该是在子组件模版中进行操作，绑定到相对应的节点中，如下： 123456789Vue.component('child-component', &#123; // 有效，因为是在正确的作用域内 template: '&lt;div v-show=\"childProperty\"&gt;Child&lt;/div&gt;', data: function () &#123; return &#123; childProperty: true &#125; &#125;&#125;) 单个插槽场景： 当在父组件模版中使用子组件时，父组件的内容将会被丢弃，如下子组件child-component：123&lt;div&gt; &lt;h2&gt;我是子组件的标题&lt;/h2&gt;&lt;/div&gt; 父组件模板: 1234567&lt;div&gt; &lt;h1&gt;我是父组件的标题&lt;/h1&gt; &lt;child-component&gt; &lt;p&gt;这是一些初始内容&lt;/p&gt; &lt;p&gt;这是更多的初始内容&lt;/p&gt; &lt;/child-component&gt;&lt;/div&gt; 此时的渲染结果为： 123456&lt;div&gt; &lt;h1&gt;我是父组件的标题&lt;/h1&gt; &lt;div&gt; &lt;h2&gt;我是子组件的标题&lt;/h2&gt; &lt;/div&gt;&lt;/div&gt; 此时父组件里面的内容就会被替换，此时的解决方法是可以使用slot单个插槽，例如在上面的子组件child-component中: 123456&lt;div&gt; &lt;h2&gt;我是子组件的标题&lt;/h2&gt; &lt;slot&gt; 在没有要分发的内容时才会显示。 &lt;/solt&gt;&lt;/div&gt; 此时的渲染结果就是 ： 12345678&lt;div&gt; &lt;h1&gt;我是父组件的标题&lt;/h1&gt; &lt;div&gt; &lt;h2&gt;我是子组件的标题&lt; /h2&gt; &lt;p&gt;这是一些初始内容&lt; /p&gt; &lt;p&gt;这是更多的初始内容&lt; /p&gt; &lt;/div&gt;&lt;/div&gt; 此时的父组件的内容不会被丢弃。子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 DOM 位置，并替换掉插槽标签本身。最初在 标签中的任何内容都被视为备用内容。备用内容在子组件的作用域内编译，并且只有在宿主元素为空，且没有要插入的内容时才显示备用内容。 具名插槽 元素可以用一个特殊的特性 name 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 slot 特性的元素。仍然可以有一个匿名插槽，它是默认插槽，作为找不到匹配的内容片段的备用插槽。如果没有默认插槽，这些找不到匹配的内容片段将被抛弃。如下一个child-layout： 1234567891011&lt;div class=\"container\"&gt; &lt;header&gt; &lt;slot name=\"header\"&gt;&lt;/slot&gt; &lt;/header&gt; &lt;main&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/main&gt; &lt;footer&gt; &lt;slot name=\"footer\"&gt;&lt;/slot&gt; &lt;/footer&gt;&lt;/div&gt; 父组件模板 12345&lt;child-layout&gt; &lt;h1 slot=\"header\"&gt;页面标题&lt;/h1&gt; &lt;p&gt;主要内容&lt; /p&gt; &lt;p slot=\"footer\"&gt;一些信息&lt;/p&gt;&lt;/child-layout&gt; 此时的渲染结果为： 1234567891011&lt;div class=\"container\"&gt; &lt;header&gt; &lt;h1&gt;页面标题&lt;/h1&gt; &lt;/header&gt; &lt;main&gt; &lt;p&gt;主要内容。&lt;/p&gt; &lt;/main&gt; &lt;footer&gt; &lt;p&gt;一些信息&lt;/p&gt; &lt;/footer&gt;&lt;/div&gt; 由于使用了具名插槽，也就是使用了slot的name属性，使得父组件的内容被插到了子组件的指定位置。由于在子组件的main中使用了匿名slot,所以在父组件的模版中的p标签也没有用name属性，所以就行默认配对，如果此时没有匿名slot那么p标签的内容将会被抛弃。 作用域插槽作用域插槽是一种特殊类型的插槽，用作一个 (能被传递数据的) 可重用模板，来代替已经渲染好的元素。在子组件中，只需将数据传递到插槽，就像你将 prop 传递给组件一样,例如在子组件中： 123&lt;div class=\"child\"&gt; &lt;slot data=\"data from child\"&gt;&lt;/slot&gt;&lt;/div&gt; 此时在父组件模版中，必须要有&lt; template &gt;元素存在，并且要使用特殊属性slot-scope，以此表示它是作用域插槽的模板。slot-scope 的值将被用作一个临时变量名，此变量接收从子组件传递过来的 prop 对象，比如现在有父组件： 12345678&lt;div class=\"parent\"&gt; &lt;child&gt; &lt;template slot-scope=\"props\"&gt; &lt;span&gt;data from parent&lt;/span&gt; &lt;span&gt;&#123;&#123; props.data &#125;&#125;&lt;/span&gt; &lt;/template&gt; &lt;/child&gt;&lt;/div&gt; 此时渲染的结果是： 123456&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt; &lt;span&gt;data from parent&lt;/span&gt; &lt;span&gt;data from child&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;","categories":[],"tags":[]},{"title":"vue组件间的通信","slug":"vue组件间的通信","date":"2018-04-07T15:21:28.000Z","updated":"2018-06-29T11:16:57.564Z","comments":true,"path":"vue组件间的通信/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/vue组件间的通信/","excerpt":"","text":"组件间的数据传递 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于组件实例的作用域是单独的。所以就不能在一个组件中直接引用另一个组件中的数据，但是在一个项目中数据的处理往往是很频繁的，并且组件设计初衷就是要配合使用的，通过组件间的关联，来更加高效的处理一些问题。所以，简单的介绍一下组件组合后组件间互相通信的方式 1.父组件 —-&gt; 子组件（prop）使用 Prop传递数据&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;组件的孤立作用域，使得子组件的模板内不能直接引用父组件的数据，在这里可以通过prop进行下发,例如： 12345678910111213141516var child = &#123; // 声明 props props: ['message'], // 就像 data 一样，prop 也可以在模板中使用 template: '&lt;div&gt;&#123;&#123;message&#125;&#125;我是一个子组件!&lt;/div&gt;'&#125;export default &#123; components: &#123; 'children-componment': child &#125;, data () &#123; return &#123; msg: 'Welcome to Your Vue.js App' &#125; &#125;&#125; 然后通过向组件传入一个字符串： 1&lt;children-componment message=\"hello\" &gt;&lt; /children-componment&gt; 在此处子组件 children-componment显式地用 props 选项声明预期的数据，在使用时又传入字符串，则可将数据下发到子组件中 动态 Prop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;往往我们需要子组件来实时的跟踪父组件的数据变化，以做及时的关联处理。此时可以用 v-bind 来动态地将 prop 绑定到父组件的数据。所以每当父组件的数据变化时，该变化也会传导给子组件，可以跟着一起变化： 12345678910111213141516171819202122232425&lt;template&gt; &lt;div class=\"hello\"&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;input v-model = \"parentMsg\"&gt; &lt;br&gt; &lt;children-componment :my-message=\"parentMsg\" &gt;&lt;/children-componment&gt; &lt;/div&gt;&lt;/template&gt;var child = &#123; // 声明 props props: ['myMessage'], // 就像 data 一样，prop 也可以在模板中使用 template: '&lt;div&gt; &#123;&#123;myMessage&#125;&#125; 我是一个子组件!&lt;/div&gt;'&#125;export default &#123; components: &#123; 'children-componment': child &#125;, data () &#123; return &#123; msg: 'Welcome to Your Vue.js App', parentMsg: 'Message from parent' &#125; &#125;&#125; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此时的输入框input是存在于父组件，通过v-model绑定parentMsg,并且将值传递给子组件&lt; children-componment&gt;&lt; /children-componment&gt;，此时的子组件接收的值也是随着父组件的变化而动态改变的。 单向数据流（数据传递过程中需要解决的问题）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prop 可以实现从父组件到子组件的数据传递，但是同时也要注意，prop是单向绑定的。这也就是意味着当父组件的属性变化时，将传导给子组件，但是当子组件发生改变时却不会反馈给父组件。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。所以存在着两个容易出错的场景： Prop 作为初始值传入后，子组件想把它当作局部数据来用 解决方法 (定义一个局部变量，并用 prop 的值初始化这个局部变量：)： 12345678props: ['myMessage'],// 就像 data 一样，prop 也可以在模板中使用template: '&lt; div&gt; &#123;&#123;variable&#125;&#125; 我是一个子组件!&lt; /div&gt;', data: function () &#123; return &#123; variable: this.myMessage &#125;&#125; Prop 作为原始数据传入，由子组件处理成其它数据输出 1234567props: ['param'],computed: &#123;//handleParam为处理过可使用的数据 handleParam: function () &#123; return this.param+5 &#125;&#125; ！！！注：不能在子组件内部改变 prop 2.子组件 —-&gt; 父组件（绑定自定义事件）自定义事件子组件向父组件传递数据使用Vue 的自定义事件系统实现，每个 Vue 实例实现的事件接口： 使用 $on(eventName) 监听事件 使用 $emit(eventName, optionalPayload) 触发事件 123456789//此处跟着官方文档的例子来梳理一遍&lt;template&gt; &lt;div&gt; &lt;h1&gt;&#123;&#123;total&#125;&#125;&lt;/h1&gt; //3.组件监听到'increment'事件，并且执行'incrementTotal'方法，改变父组件中的total的值 &lt;children-componment v-on:increment=\"incrementTotal\"&gt;+&lt;/children-componment&gt; &lt;children-componment v-on:increment=\"incrementTotal\"&gt;+&lt;/children-componment&gt; &lt; /div&gt; &lt; /template&gt; 12345678910111213141516171819202122232425262728293031var child = &#123;//1.当子组件的按钮按下时执行incrementCounter方法 template: '&lt;button v-on:click=\"incrementCounter\"&gt;子组件&#123;&#123; counter &#125;&#125;&lt;/button&gt;', data: function () &#123; return &#123; counter: 0 &#125; &#125;, methods: &#123; 2.执行方法，将counter的值加1，并且触发了一个'increment'的事件 incrementCounter: function () &#123; this.counter += 1 this.$emit('increment') &#125;, &#125;&#125;export default &#123; data: function () &#123; return &#123; total: 0 &#125; &#125;, methods: &#123; incrementTotal: function () &#123; this.total += 1 &#125; &#125;, components: &#123; 'children-componment': child &#125;,&#125; 子组件件向父组件传递数据的过程如上注释所标的序号所示： 1.当子组件的按钮按下时执行incrementCounter方法 2.执行incrementCounter方法，将counter的值加1，并且触发了一个’increment’的事件 3.组件监听到’increment’事件，并且执行’incrementTotal’方法，改变父组件中的total的值 如何使用载荷 (payload) 数据，就在刚刚的例子中稍加修改：1234567891011121314var child = &#123; template: '&lt; button v-on:click=\"incrementCounter\"&gt;子组件&#123;&#123; counter &#125;&#125;&lt; /button&gt;', data: function () &#123; return &#123; counter: 0 &#125; &#125;, methods: &#123; incrementCounter: function () &#123; this.counter += 1 this.$emit('increment',&#123;number:3&#125;) &#125;, &#125;&#125; 12345678910111213data: function () &#123; return &#123; total: 0 &#125; &#125;, methods: &#123; incrementTotal: function (payload) &#123; this.total += payload.number &#125; &#125;, components: &#123; 'children-componment': child &#125;, 此时点击一次按钮时，total就是加3，3即为传过来的payload的数据 3.非父子组件的数据传递 （bus总线）非父子组件之间也需要有数据的传递，此时可以使用空的vue实例bus总线 123456// 触发组件 A 中的事件bus.$emit('selected')// 在组件 B 中监听事件bus.$on('selected', function () &#123; // ...&#125;) 简单的数据交互可以使用bus总线的方法，但是在较为复杂的情境下，会使用vuex状态管理来实现。这个会在后续的学习中进一步深入了解，并作分享。","categories":[],"tags":[]},{"title":"Vue的组件的概念与基本使用","slug":"Vue的组件的概念与基本使用","date":"2018-04-07T02:41:25.000Z","updated":"2018-06-29T11:13:45.885Z","comments":true,"path":"Vue的组件的概念与基本使用/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/Vue的组件的概念与基本使用/","excerpt":"","text":"什么是vue的组件（what）? &nbsp;&nbsp;组件(Component)是vue.js中很强大的一个功能，可以将一些可重用的代码进行封重用。所有的 Vue 组件同时也是 Vue 的实例，可以接受使用相同的选项对象和提供相同的生命周期钩子。 一句话概括：组件就是可以扩展HTML元素，封装可重用的HTML代码，可以将组件看作自定义的HTML元素。 如何使用组件（how）? 前提条件: 使用组件名的时候是需要先实例化Vue的，因为组件现在是扩展在Vue中，想使用Vue中的组件就需要先实例化获得这个组件才能够使用 创建组件创建组件即在Vue构造函数中通过extend()方法添加该组件（ps：可以理解成在刚开学的时候，老师不认识你，但是知道有泡泡这个人） 注册组件注册组件即在Vue构造函数中通过一个属性名与之关联在一起，有点像var name=’paopao’;这个时候 temp就是泡泡了（ps：这个时候老师把花名册上的’泡泡’和人对应起来了）组件的注册可分为全局注册与局部注册，区别：注册的地方不一致；全局注册就是只要是实例化Vue的范围都可以使用该组件，局部注册就是只能在某一个Vue实例的范围内使用该组件 全局注册（使用 Vue.component(tagName, options)） 1234567891011121314//使用组件 &lt;div id=\"app\"&gt; &lt;my-component&gt;&lt;/my-component&gt; &lt;/div&gt;//确保在初始化根实例之前注册组件Vue.component('my-component', &#123; template: '&lt;div&gt; component test! &lt;/div&gt;'&#125;)// 创建根实例new Vue(&#123; el: '#app', components: &#123; App &#125;, template: '&lt;App/&gt;'&#125;) 最终渲染为：123&lt;div id=\"app\"&gt; &lt;div&gt;component test!&lt;/div&gt;&lt;/div&gt; 局部注册 每个组件都注册到全局的方式显然很不合理，更多的时候采用的往往是局部注册的方式。可以通过某个 Vue 实例/组件的实例选项 components 注册仅在其作用域中可用的组件 123456789var Child = &#123; template: '&lt;div&gt;一个局部注册的组件!&lt;/div&gt;'&#125;new Vue(&#123; components: &#123; // &lt; localRegistration&gt; 只在父组件模板中才可用 'localRegistration': Child &#125;&#125;) 使用组件 这个时候就可以在dom中添加所创建的组件名（这个时候你终于可以以’泡泡’的名义去做点什么事了，比如上课，去图书馆等） Dom模版解析事项 &nbsp;&nbsp; 当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。要特别注意的是，像 &lt; ul&gt;、&lt; ol&gt;、&lt; table&gt;、&lt; select&gt; 这样的元素里允许包含的元素有限制，而另一些像 &lt; option&gt; 这样的元素只能出现在某些特定元素的内部。 例如(&lt; my-row&gt;为自定义的组件)：123&lt;table&gt; &lt;my-row&gt;&lt;/my-row&gt;&lt;/table&gt; 此时的自定义组件 &lt; my-row&gt; 被当作无效的内容，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。而此时的table标签还没有被解析，所以在往里面放入自定义组件的时候会导致错误的渲染结果。此时的解决方法是可以使用特殊的 is 特性： 123&lt;table&gt; &lt;tr is=\"my-row\"&gt;&lt;/tr&gt;&lt;/table&gt; !!! 如果使用来自以下来源之一的字符串模板，则没有此限制: &lt; script type=”text/x-template”&gt; JavaScript 内联模板字符串 (通过内联的方式使其一同进行加载) .vue 组件 例如： 12345678new Vue(&#123; el: '#app', components:&#123; 'selectcomp':&#123; template: ' &lt;select&gt; &lt;optioncomp&gt;&lt;/optioncomp&gt;&lt;/select&gt;' &#125; &#125; &#125;) Vue 实例时传入的选项中data 必须是函数 如果这样的写法： 123data: &#123; msg: 'Welcome to Your Vue.js App'&#125; 将会报错：1234//Vue 会停止运行，并在控制台发出警告，告诉你在组件实例中 data 必须是一个函数。 [HMR] Waiting for update signal from WDS...vue.esm.js?efeb:591 [Vue warn]: The \"data\" option should be a function that returns a per-instance value in component definitions. 举个例子来对比一下： 12345&lt; div id=\"example\"&gt; &lt;simple-counter&gt;&lt;/simple-counter&gt; &lt;simple-counter&gt;&lt;/simple-counter&gt; &lt;simple-counter&gt;&lt;/simple-counter&gt;&lt;/div&gt; 12345678910111213var data = &#123; counter: 0 &#125;Vue.component('simple-counter', &#123; template: '&lt; button v-on:click=\"counter += 1\"&gt;&#123;&#123; counter &#125;&#125;&lt; /button&gt;', // data 的确是一个函数了，因此 Vue 不会警告， // 但是我们却给每个组件实例返回了同一个对象的引用(此处是为了做对比) data: function () &#123; return data &#125;&#125;)new Vue(&#123; el: '#example'&#125;) 现在的结果是有三个可以计数的按钮，但是不论点击的是哪一个，所有的按钮的所记数都会加1，因为每个组件实例返回的是同一个对象的引用，不论哪个按钮的对数据进行操作，都会影响到其他的按钮组件计数结果 1234567//将其data的格式写成如下，此时每个 counter 都有自己内部的状态了，都是独立存在的，每个组件返回的都是全新的数据对象：data: function () &#123; return &#123; counter: 0 &#125;&#125;","categories":[],"tags":[]},{"title":"时间、时间戳、带格式时间的转换","slug":"时间、时间戳、带格式时间的转换","date":"2018-04-07T02:40:16.000Z","updated":"2018-06-29T11:18:04.381Z","comments":true,"path":"时间、时间戳、带格式时间的转换/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/时间、时间戳、带格式时间的转换/","excerpt":"","text":"最近正好在工作中遇到一些有关处理时间的问题，就整理了一下关于时间转化的问题，很基础，但相信都会接触的到的 时间转换成时间戳 获取时间 123let date = new Date();console.log(date);//输出：Sat Mar 24 2018 18:22:00 GMT+0800 (CST) (中国标准时间) 转换：四种方法（不推荐第一种方法，因为毫秒级别会被转化为000） 123456789101112let date1 = Date.parse(date);//毫秒级别的数值被转化为000console.log(date1);//输出:1521886920000let date2 = date.valueOf();//通过valueOf()函数返回指定对象的原始值获得准确的时间戳值console.log(date2);//输出:1521886920000let date3 = date.getTime();//通过原型方法直接获得当前时间的毫秒值，准确console.log(date3);//输出:1521886920000let date4 = Number(date);//将时间转化为一个number类型的数值，即时间戳console.log(date4);//输出:1521886920000 2.时间转换为带格式的时间格式：yyyy-mm-dd 123456789function formatDate(date) &#123; var y = date.getFullYear(); var m = date.getMonth() + 1; m = m &lt; 10 ? '0' + m : m; var d = date.getDate(); d = d &lt; 10 ? ('0' + d) : d; return y + '-' + m + '-' + d;//这里可以写格式 //输出：2018-03-24&#125; 格式：yyyy-mm-dd hh:mm:ss 123456789101112131415function formatDateTime(date) &#123; var y = date.getFullYear(); var m = date.getMonth() + 1; m = m &lt; 10 ? ('0' + m) : m; var d = date.getDate(); d = d &lt; 10 ? ('0' + d) : d; var h = date.getHours(); h=h &lt; 10 ? ('0' + h) : h; var minute = date.getMinutes(); minute = minute &lt; 10 ? ('0' + minute) : minute; var second=date.getSeconds(); second=second &lt; 10 ? ('0' + second) : second; return y + '-' + m + '-' + d+' '+h+':'+minute+':'+second;&#125;; //输出：2018-03-24 18:41:16 3.时间戳转换为带格式的时间 123let date5 = new Date(date);//直接用 new Date(时间戳) 格式转化获得时间console.log(date5);formatDate(date5);//直接调用上方的方法 4.时间格式字符串转为时间戳（毫秒） 12345let time1='2018-03-24 18:55:16';let dateM=new Date(time1.replace(/-/g, '/')); //开始时间let time2=dateM.getTime();console.log(time2);//输出：1521888916000","categories":[],"tags":[]},{"title":"运用node实现简单爬虫","slug":"运用node实现简单爬虫","date":"2018-04-07T02:37:18.000Z","updated":"2018-04-14T16:27:44.000Z","comments":true,"path":"运用node实现简单爬虫/","link":"","permalink":"https://itlinnnn.github.io/linhui.github.io/运用node实现简单爬虫/","excerpt":"","text":"node.js的强大就无需再去重复了，越来越多的公司在使用node.js，还有一点不得不提的优势就是node用的是javascript的语言，对于前端开发工程师来说，没有理由不去get这一强大的技能。现在本人也是在学习阶段，结合自己做的一些demo进行总结。今天给大家分享一下用node.js实现一个简易的爬虫，希望能和大家一起交流探讨。 目标：当在浏览器中访问’http://localhost:3000&#39;的时候，可以以json的形式输出慕课网首页的 部分热门课程（本人偶尔会去慕课网上看一些学习的视频） 步骤: 1.新建一个文件夹，进去之后’npm init’（这个命令的作用就是帮我们互动式地生成一份 最简单的package.json 文件，(init 是 initialize 的意思，初始化）当一路回车并且填写信息完毕后会出现一个package.json文件(首先需要在电脑上安装node.js)。 2.安装相应的依赖，在此例子中，需要用到的有cheerio，express，superagent。其中 express 是 Node.js 应用最广泛的 web 框架,建议大家有时间可以多去官网看看其API，所以现在开始安装依赖，通过命令cnpm i cheerio express superagent -S完成依赖的安装。安装完成后效果如下图： 此时就完成了依赖的安装，在package.json中的dependencies目录下会有刚刚安装的三个依赖 3.现在在文件夹里建一个js文件，比如取名为index.js,接下来就是在里面写代码，话不多说，直接上代码，在代码中也做了较为详细的注释。 12345678910111213141516171819202122232425262728293031323334353637383940//引入模块var express = require('express');var cheerio = require('cheerio');var superagent = require('superagent');// 调用 express 实例，它是一个函数，不带参数调用时，会返回一个 express 实例，将这个变量赋予 app 变量。var app = express();// app 本身有很多方法，其中包括最常用的 get、post、put/patch、delete，在这里我们调用其中的 get 方法，为我们的 `/` 路径指定一个 handler 函数。// 这个 handler 函数会接收 req 和 res 两个对象，他们分别是请求的 request 和 response。// request 中包含了浏览器传来的各种信息，比如 query 啊，body 啊，headers 啊之类的，都可以通过 req 对象访问到。// res 对象，我们一般不从里面取信息，而是通过它来定制我们向浏览器输出的信息，比如 header 信息，比如想要向浏览器输出的内容。//这里我们调用了它的 #send 方法，向浏览器输出一个字符串。app.get('/', function (req, res, next) &#123; superagent.get('https://www.imooc.com/') .end(function (err, sres) &#123; if (err) &#123; return next(err); &#125; // sres.text 里面存储着网页的 html 内容，将它传给 cheerio.load 之后 // 就可以得到一个实现了 jquery 接口的变量，我们习惯性地将它命名为 `$` // 剩下就都是 jquery 的内容了 var $ = cheerio.load(sres.text); var items = []; $('.banner-course-card .clearfix').each(function (idx, element) &#123; var $element = $(element); items.push(&#123; title: $element.attr('title'), href: $element.attr('href') &#125;); &#125;); res.send(items); // 定义好我们 app 的行为之后，让它监听本地的 3000 端口。这里的第二个函数是个回调函数， //会在 listen 动作成功后执行，我们这里执行了一个命令行输出操作，告诉我们监听动作已完成。 &#125;);&#125;);app.listen(3000, function () &#123; console.log('app is listening at port 3000');&#125;); 代码解释:通过请求得到网页的html内容并储存于sres.text中，再传给cheerio.load,得到一个实现jquery接口的变量，然后就类似于jquery选择器的方法对页面的元素的查找，拿到自己想要的数据即可。在定义好行为之后，让它监听本地的 3000 端口。这里的第二个函数是个回调函数，会在 listen 动作成功后执行，我们这里执行了一个命令行输出操作，告诉我们监听动作已完成。 运行:输入命令 ‘ node index.js ‘ , 会看到打印出’app is listening at port 3000 ‘,如图所示： 打开浏览器，访问’http://localhost:3000/&#39;,就可以看到我们爬虫得来的数据哦，如下图所示：只是用了最基本的node实现了一个简易的爬虫效果，当然在这个例子中并没有利用到node.js的异步并发特性，待深入研究再做分享，希望和大家多多交流探讨。","categories":[],"tags":[]}]}