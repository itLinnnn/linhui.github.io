<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林晖的个人博客</title>
  
  
  <link href="/linhui.github.io/atom.xml" rel="self"/>
  
  <link href="https://itlinnnn.github.io/linhui.github.io/"/>
  <updated>2018-10-22T04:35:17.717Z</updated>
  <id>https://itlinnnn.github.io/linhui.github.io/</id>
  
  <author>
    <name>林晖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器页面渲染机制</title>
    <link href="https://itlinnnn.github.io/linhui.github.io/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
    <id>https://itlinnnn.github.io/linhui.github.io/浏览器页面渲染机制/</id>
    <published>2018-10-22T04:34:56.000Z</published>
    <updated>2018-10-22T04:35:17.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分享目的：-解释浏览器如何将-HTML、CSS-和-JavaScript-转换为我们可以与之交互的网站，了解这个过程，可以帮助我们优化-Web-应用程序，从而获得更快的速度和更好的性能。"><a href="#分享目的：-解释浏览器如何将-HTML、CSS-和-JavaScript-转换为我们可以与之交互的网站，了解这个过程，可以帮助我们优化-Web-应用程序，从而获得更快的速度和更好的性能。" class="headerlink" title="分享目的： 解释浏览器如何将 HTML、CSS 和 JavaScript 转换为我们可以与之交互的网站，了解这个过程，可以帮助我们优化 Web 应用程序，从而获得更快的速度和更好的性能。"></a>分享目的： 解释浏览器如何将 HTML、CSS 和 JavaScript 转换为我们可以与之交互的网站，了解这个过程，可以帮助我们优化 Web 应用程序，从而获得更快的速度和更好的性能。</h3><h4 id="问题：-浏览器如何渲染网站？-接下来会解构这个过程，但是首先，有必要了解一些基础概念"><a href="#问题：-浏览器如何渲染网站？-接下来会解构这个过程，但是首先，有必要了解一些基础概念" class="headerlink" title="问题： 浏览器如何渲染网站？ (接下来会解构这个过程，但是首先，有必要了解一些基础概念)"></a>问题： 浏览器如何渲染网站？ (接下来会解构这个过程，但是首先，有必要了解一些基础概念)</h4><blockquote><p>Web 浏览器是一种软件，它从远程服务器（或者本地磁盘）加载文件并将其显示——使用户可以与之交互。浏览器中有一个软件叫浏览器引擎。在不同的浏览器中，浏览器的某个部分会根据它接收到的文件确定显示什么，这就是所谓的浏览器引擎。浏览器引擎是每一种主流浏览器的核心软件组件，不同的浏览器开发商用不同的名字来称呼他们的引擎。</p></blockquote><h3 id="1-html解析"><a href="#1-html解析" class="headerlink" title="1. html解析"></a>1. html解析</h3><ul><li>接收信息<br>数据是以“数据包”的形式通过互联网发送，而数据包以字节为单位。当你编写一些 HTML、CSS 和 JS，并试图在浏览器中打开 HTML 文件时，浏览器会从你的硬盘（或网络）中读取 HTML 的原始字节。</li><li>计算机接收到字节数据<br>浏览器读取的是原始数据字节，而不是你编写的代码的实际字符。浏览器读取的是原始数据字节，而不是你编写的代码的实际字符。<ul><li>从 HTML 的原始字节到 DOM，浏览器对象需要处理的是文档对象模型（DOM）对象。那么，DOM 对象是从何而来的呢？首先，将原始数据字节转换为字符。（Bytes =&gt; haracters）</li><li>从字节到字符<br>这一点，你可以通过你所编写的代码的字符看到。这种转换是基于 HTML 文件的字符编码完成的。至此，浏览器已经从原始数据字节转换为文件中的实际字符。但这不是最终的结果。这些字符会被进一步解析为一些称为“标记（token）”的东西。（Bytes =&gt; haracters =&gt; Tokens···）</li><li>从字符到标记<br>那么，这些标记是什么？文本文件中的一堆字符对浏览器引擎而言没什么用处。如果没有这个标记化过程，那么这一堆堆字符只会生成一系列毫无意义的文本，即 HTML 代码——不会生成一个真正的网站。<br>当你保存一个扩展名为.html 的文件时，就向浏览器引擎发出了把文件解析为 HTML 文档的信号。浏览器“解释”这个文件的方式是首先解析它。在解析过程中，特别是在标记化过程中，浏览器会解析 HTML 文件中的每个开始和结束“标签（tag）”。解析器可以识别尖括号中的每个字符串，如“&lt; html&gt;”、“&lt; p&gt;”<blockquote><p>但标记还不是最终的结果。标记化完成后，接下来，标记将被转换为节点。你可以将节点看作是具有特定属性的不同对象。实际上，更好的解释是，将节点看作是文档对象树中的独立实体。但节点仍然不是最终结果。<br>现在，让我们看一下最后一点。在创建好之后，这些节点将被链接到称为DOM 的树数据结构中。DOM 建立起了父子关系、相邻兄弟关系等。在这个 DOM 对象中，每个节点之间都建立了关系。现在，这是我们可以使用的东西了。</p></blockquote></li></ul></li><li>标记<br>但标记还不是最终的结果。标记化完成后，接下来，标记将被转换为节点。你可以将节点看作是具有特定属性的不同对象。实际上，更好的解释是，将节点看作是文档对象树中的独立实体。但节点仍然不是最终结果。</li><li>DOM   (Bytes =&gt; haracters =&gt; Tokens  =&gt; Node =&gt; DOM)<br>让我们看一下最后一点。在创建好之后，这些节点将被链接到称为 DOM 的树数据结构中。DOM 建立起了父子关系、相邻兄弟关系等。在这个 DOM 对象中，每个节点之间都建立了关系。这个时候，是浏览器需要的东西了。</li></ul><hr><h3 id="2-css解析"><a href="#2-css解析" class="headerlink" title="2.css解析"></a>2.css解析</h3><p>这个是我们很常见的写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span>  href=<span class="string">"test.css"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>当浏览器接收到原始数据字节并启动 DOM 构建过程时，它还会发出请求来获取链接的 test.css 样式表。当浏览器开始解析 HTML 时，在找到 css 文件的链接标签的同时，它会发出请求来获取它。可能你已经猜到，浏览器还是接收 CSS 数据的原始字节，从互联网或是本地磁盘。</p></blockquote><h4 id="浏览器如何处理这些-CSS-数据的原始字节？"><a href="#浏览器如何处理这些-CSS-数据的原始字节？" class="headerlink" title="浏览器如何处理这些 CSS 数据的原始字节？"></a>浏览器如何处理这些 CSS 数据的原始字节？</h4><blockquote><p>当浏览器接收到 CSS 的原始字节时，会启动一个和处理 HTML 原始字节类似的过程。就是说，原始数据字节被转换成字符，然后标记，然后形成节点，最后形成树结构。<br>什么是树结构？大多数人都知道 DOM 这个词。同样，也有一种 CSS 树结构，，浏览器不能使用 HTML 或 CSS 的原始字节。必须将其转换成它能识别的形式，也就是这些树形结构。</p></blockquote><h4 id="DOM-CSSOM-渲染树"><a href="#DOM-CSSOM-渲染树" class="headerlink" title="DOM + CSSOM = 渲染树"></a>DOM + CSSOM = 渲染树</h4><blockquote><p>渲染树包含页面上所有关于可见 DOM 内容的信息以及不同节点所需的所有 CSSOM 信息。注意，如果一个元素被 CSS 隐藏，例如使用 display; none，那么节点就不会包含在渲染树中。隐藏元素会出现在 DOM 中，但不会出现在渲染树中。这是因为渲染树结合了来自 DOM 和 CSSOM 的信息，所以它知道不能把隐藏元素包含在树中。</p></blockquote><h4 id="元素展示"><a href="#元素展示" class="headerlink" title="元素展示"></a>元素展示</h4><blockquote><p>我们已经得到了在屏幕上显示元素所需的所有信息。我们只要把它展示给用户。这就是这个阶段的全部工作。有了元素内容（DOM）、样式（CSSOM）和计算得出的元素的精确布局信息，浏览器现在就可以将节点逐个“绘制”到屏幕上了。元素可以呈现在屏幕上了！</p></blockquote><hr><h3 id="渲染阻塞资源"><a href="#渲染阻塞资源" class="headerlink" title="渲染阻塞资源"></a>渲染阻塞资源</h3><blockquote><p>通俗的解释为有东西阻止了屏幕上节点的实际绘制,在成功绘制之前，必须构造 DOM 和 CSSOM，因此，HTML 和 CSS 都是渲染阻塞资源。</p></blockquote><ul><li>JavaScript 如何执行？<br>一个常用的 Web 应用程序肯定会使用一些 JavaScript。这是一定的。JavaScript 的“问题”在于你可以使用 JavaScript 修改页面的内容和样式。通过这种方式，你可以从 DOM 树中删除元素和添加元素，还可以通过 JavaScript 修改元素的 CSSOM 属性。这很方便，但是同时也带来了弊端</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;title&gt;testRander&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;link rel="stylesheet" href="style.css"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;p&gt;浏览器页面渲染机制&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;img src="http:/</span><span class="regexp">/spage.haimati.cn/</span>activityImage/newplan.jpg<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这是一个非常常见的文档。样式表 style.css简单定义样式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  font-size: <span class="number">20</span>px;</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">  background-color: antiquewhite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/10/22/16698fb2a401ab9d?w=1922&amp;h=1030&amp;f=png&amp;s=299846" alt=""></p><p>一段简单的文本和图像呈现在屏幕上。</p><p>根据前面的解释，浏览器从磁盘（或网络）读取 HTML 文件的原始字节并将其转换为字符。字符被进一步解析为标记。当解析器遇到&lt; link rel=”stylesheet” href=”style.css”&gt;时，就会请求获取 CSS 文件 style.css。DOM 构造继续进行，当 CSS 文件返回一些内容后，CSSOM 构造就开始了。</p><ul><li>引入 JavaScript<br>每当浏览器遇到脚本标签时，DOM 构造就会暂停！整个 DOM 构建过程都将停止，直到脚本执行完成。JavaScript 可以同时修改 DOM 和 CSSOM。由于浏览器不确定特定的 JavaScript 会做什么，所以它采取的预防措施是停止整个 DOM 构造。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;title&gt;testRander&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;link rel="stylesheet" href="style.css"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;p id=<span class="string">"title"</span>&gt;浏览器页面渲染机制&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;img src="http:/</span><span class="regexp">/spage.haimati.cn/</span>activityImage/newplan.jpg<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">      let title = document.getElementById("</span>title<span class="string">");</span></span><br><span class="line"><span class="string">      console.log("</span>title is: <span class="string">", title);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/10/22/166990b96268546b?w=1944&amp;h=1310&amp;f=png&amp;s=384720" alt=""><br> 当把js放到元素之前的话<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;title&gt;testRander&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;link rel="stylesheet" href="style.css"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> title = <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"title is: "</span>, title);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p id="title"&gt;浏览器页面渲染机制&lt;/</span>p&gt;</span><br><span class="line">  &lt;img src=<span class="string">"http://spage.haimati.cn/activityImage/newplan.jpg"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><p> <img src="https://user-gold-cdn.xitu.io/2018/10/22/166990fe47d9a627?w=1958&amp;h=1292&amp;f=png&amp;s=349758" alt="">  </p><blockquote><p>当脚本试图访问一个 id 为 header 的 DOM 节点时，由于 DOM 还没有完成对文档的解析，所以它还不存在。这把我们带到了另一个重要的问题。脚本的位置很重要。</p></blockquote><p>在默认情况下，每个脚本都是一个解析器阻断器！DOM 的构建总是会被打断。不过，有一种方法可以改变这种默认行为。如果将 async 关键字添加到脚本标签中，那么 DOM 构造就不会停止。DOM 构造将继续，脚本将在下载完成并准备就绪后执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;title&gt;testRander&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;link rel="stylesheet" href="style.css"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script src=<span class="string">"test.js"</span> <span class="keyword">async</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;p id=<span class="string">"title"</span>&gt;浏览器页面渲染机制&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;img src="http:/</span><span class="regexp">/spage.haimati.cn/</span>activityImage/newplan.jpg<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>把js放入test.js中进行引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title = <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"title is: "</span>, title);</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/10/22/166991a0ff1ff46f?w=1982&amp;h=1016&amp;f=png&amp;s=389832" alt=""></p><blockquote><p>这样DOM的构建就不会停止，脚本在构造完成后执行。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分享目的：-解释浏览器如何将-HTML、CSS-和-JavaScript-转换为我们可以与之交互的网站，了解这个过程，可以帮助我们优化-Web-应用程序，从而获得更快的速度和更好的性能。&quot;&gt;&lt;a href=&quot;#分享目的：-解释浏览器如何将-HTML、CSS-和-J
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Promise的作用以及基本使用</title>
    <link href="https://itlinnnn.github.io/linhui.github.io/Promise%E7%9A%84%E4%BD%9C%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://itlinnnn.github.io/linhui.github.io/Promise的作用以及基本使用/</id>
    <published>2018-10-15T18:28:06.000Z</published>
    <updated>2018-10-15T18:28:47.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Promise的作用以及基本使用"><a href="#Promise的作用以及基本使用" class="headerlink" title="Promise的作用以及基本使用"></a>Promise的作用以及基本使用</h3><h4 id="关于Promise的概念，在实际使用之前对其的理解一直比较模糊，只是停留在一些文档上的描述。在使用中其实可以根据其特性进行一些更佳的实践。在这里简单介绍一下其作用以及基础用法。"><a href="#关于Promise的概念，在实际使用之前对其的理解一直比较模糊，只是停留在一些文档上的描述。在使用中其实可以根据其特性进行一些更佳的实践。在这里简单介绍一下其作用以及基础用法。" class="headerlink" title="关于Promise的概念，在实际使用之前对其的理解一直比较模糊，只是停留在一些文档上的描述。在使用中其实可以根据其特性进行一些更佳的实践。在这里简单介绍一下其作用以及基础用法。"></a>关于Promise的概念，在实际使用之前对其的理解一直比较模糊，只是停留在一些文档上的描述。在使用中其实可以根据其特性进行一些更佳的实践。在这里简单介绍一下其作用以及基础用法。</h4><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><hr><p>Promise对象可以理解为一次执行的异步操作，使用promise对象之后可以使用一种链式调用的方式来组织代码；让代码更加的直观。也就是说，有了Promise对象，就可以将异步操作以同步的操作的流程表达出来，避免了层层嵌套的回调函数。总结一下就是可以将原先不可控的回调通过promise转为更加可控更清晰的方式表达，更加高效，更便于维护。</p><blockquote><p>示例：未使用promise，回调必须层层嵌套<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(url1, <span class="function"><span class="keyword">function</span>(<span class="params">data1</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// do something1...</span></span><br><span class="line">    $.ajax(url2, <span class="function"><span class="keyword">function</span>(<span class="params">data2</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// do something2...</span></span><br><span class="line">        $.ajax(url3, <span class="function"><span class="keyword">function</span>(<span class="params">data3</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// do something3...</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><p>如果有多个嵌套，导致代码不够直观，逻辑梳理上会更加的困难。并且这几个操作都是有执行的一个依赖关系，需要等待上一个请求完成才可以进行下一个请求，而这些本身就是异步，这样的等待是没有必要的。所以promise可以帮助我们解决这一部分痛点。</p><h4 id="了解一下Promise的特点"><a href="#了解一下Promise的特点" class="headerlink" title="了解一下Promise的特点"></a>了解一下Promise的特点</h4><p>1、对象的状态不受外界影响（Promise对象代表一个异步操作，有三种状态）。</p><ul><li>pending（执行中）</li><li>Resolved（成功，又称Fulfilled）</li><li>rejected（拒绝）  </li></ul><p>其中pending为初始状态，fulfilled和rejected为结束状态（结束状态表示promise的生命周期已结束）。promise只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态.。  </p><p>2、一旦状态改变，就不会再变，任何时候都可以得到这个结果。  </p><p>Promise对象的状态改变，只有两种可能：  </p><ul><li>从Pending变为Resolved</li><li>从Pending变为Rejected<blockquote><p>只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果 </p></blockquote></li></ul><p>3、Promise对象的缺点：</p><ul><li>无法取消Promise，一旦新建它就会立即执行，无法中途取消。</li><li>如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。</li><li>当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成。  </li></ul><p>4、promise兼容性：除了IE这种古老的浏览器和一些低版本的安卓外，大部分的浏览器对于promise的兼容性还是很友好的，所以我们可以在谷歌的控制台直接测试我们的代码。  </p><blockquote><p>接下来用一些例子来看看具体的使用方法</p></blockquote><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><hr><p>1、首先我们new一个Promise,将Promise实例化<br>2、然后在实例化的promise可以传两个参数，一个是成功之后的resolve，一个是失败之后的reject<br>3、Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="function"><span class="keyword">function</span>(<span class="params">isReady</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// do somthing, maybe async</span></span><br><span class="line">        <span class="keyword">if</span> (isReady)&#123;</span><br><span class="line">          <span class="keyword">return</span> resolve(<span class="string">'成功执行'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> reject(<span class="string">'出错了'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。</span></span><br><span class="line">promise(<span class="literal">true</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// success,这里是resolve的回调函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(value);  <span class="comment">//hello world</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// failure，这里是reject的回调函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>上述代码是执行成功，返回成功执行,如果想测试一下失败后的返回值，可以把promise(true).then…这里改为 promise(false).then…在控制台试下</p></blockquote><h3 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h3><hr><p>Promise并不只是简化层层回调的写法，更重要的在于是通过传递状态的方式来使回调方式能够及时的调用，因此，相比于callback，它更灵活，更简单。下面我们来看看Promise的链式操作：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">makePromise1()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="keyword">return</span> makePromise2();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="keyword">return</span> makePromise3();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePromise1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//异步操作</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'异步1'</span>);</span><br><span class="line">            resolve(<span class="string">'异步1参数'</span>);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;            </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePromise2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//异步操作</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'异步2'</span>);</span><br><span class="line">            resolve(<span class="string">'异步2参数'</span>);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;            </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePromise3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//异步操作</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'异步3'</span>);</span><br><span class="line">            resolve(<span class="string">'异步3参数'</span>);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>上面的代码中，有三个异步操作，makePromise1,makePromise2,makePromise3。其中第二个和第三个依次执行，也就是上一个操作完成之后才可以进行。会相继的打印出异步1，异步1参数···</p></blockquote><h3 id="Promise的catch方法"><a href="#Promise的catch方法" class="headerlink" title="Promise的catch方法"></a>Promise的catch方法</h3><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="function"><span class="keyword">function</span>(<span class="params">isReady</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isReady)&#123;</span><br><span class="line">          <span class="keyword">return</span> resolve(<span class="string">'成功执行'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> reject(<span class="string">'失败'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">promise(<span class="literal">true</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resolved'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="built_in">console</span>.log(wawa); <span class="comment">//此处的wawa未定义</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rejected'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>catch 方法是 then(onFulfilled, onRejected) 方法当中 onRejected 函数的一个简单的写法，也就是说可以写成 then(fn).catch(fn),相当于 then(fn).then(null, fn)使用 catch 的写法比一般的写法更加清晰明确，其实可以类比成try/catch，这样，其中有报错的地方不会阻塞运行。比如定义了一个未定义wawa,正常来说它上面的代码也不会运行，因为被这个报错阻塞了，有了catch,它上面的代码可以正常运行下去  </p></blockquote><h3 id="promise-all方法"><a href="#promise-all方法" class="headerlink" title="promise.all方法"></a>promise.all方法</h3><hr><blockquote><p>Promise.all 可以接收一个元素为 Promise 对象的数组作为参数，当这个数组里面所有的 Promise 对象都变为 resolve 时，该方法才会返回。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        resolve(<span class="string">"第一个promise"</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        resolve(<span class="string">"第二个promise"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2]).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// ["第一个promise", "第二个promise"]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>上面的代码中，all接收一个数组作为参数，p1,p2是并行执行的，等两个都执行完了，才会进入到then，all会把所有的结果放到一个数组中返回，所以我们打印出我们的结果为一个数组。值得注意的是，虽然p2的执行顺序比p1快，但是all会按照参数里面的数组顺序来返回结果。</p></blockquote><h3 id="promise-race方法"><a href="#promise-race方法" class="headerlink" title="promise.race方法"></a>promise.race方法</h3><hr><p> race的意思为赛跑，因此，promise.race也是传入一个数组，但是与promise.all不同的是，race只返回跑的快的值，也就是说result返回比较快执行的那个。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        resolve(<span class="string">"第一个promise"</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">        resolve(<span class="string">"第二个promise"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2]).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 第二个promise</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><blockquote><p>在这边可以看到，传的值中，只有p2的返回了，但是p1没有停止，依然有执行。race的应用场景为，比如我们可以设置为网路请求超时。写两个promise，如果在一定的时间内如果成功的那个我们没有执行到，我们就执行失败的那个</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Promise的作用以及基本使用&quot;&gt;&lt;a href=&quot;#Promise的作用以及基本使用&quot; class=&quot;headerlink&quot; title=&quot;Promise的作用以及基本使用&quot;&gt;&lt;/a&gt;Promise的作用以及基本使用&lt;/h3&gt;&lt;h4 id=&quot;关于Promise
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://itlinnnn.github.io/linhui.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://itlinnnn.github.io/linhui.github.io/正则表达式/</id>
    <published>2018-09-14T16:00:00.000Z</published>
    <updated>2018-09-16T04:06:13.237Z</updated>
    
    <content type="html"><![CDATA[<h4 id="正则表达式在平时工作中非常常见，工作中用到的大部分正则都是去网上搜索得来的，再复杂一点看着文档费时费力的拼凑一下。所以觉得很有必要对一些常用的正则内容进行一个归纳和总结。"><a href="#正则表达式在平时工作中非常常见，工作中用到的大部分正则都是去网上搜索得来的，再复杂一点看着文档费时费力的拼凑一下。所以觉得很有必要对一些常用的正则内容进行一个归纳和总结。" class="headerlink" title="正则表达式在平时工作中非常常见，工作中用到的大部分正则都是去网上搜索得来的，再复杂一点看着文档费时费力的拼凑一下。所以觉得很有必要对一些常用的正则内容进行一个归纳和总结。"></a>正则表达式在平时工作中非常常见，工作中用到的大部分正则都是去网上搜索得来的，再复杂一点看着文档费时费力的拼凑一下。所以觉得很有必要对一些常用的正则内容进行一个归纳和总结。</h4><blockquote><p>概念： Regular Expression使用单个字符串来描述、匹配一系列符合某个语法规则的字符串。说简单了就是按照某种规则去匹配符合条件的字符串。</p></blockquote><h3 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h3><hr><p>javaScript中通过内置对象 RegExp 支持正则表达式，有两种方法实例化 RegExp 对象：   </p><p>1.字面量<br>2.构造函数  </p><h3 id="1-字面量"><a href="#1-字面量" class="headerlink" title="1.字面量"></a>1.字面量</h3><p>假设你需要把一句英文里面的小写is匹配成大写的 IS，可以这样做：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/is/</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'He is a boy, This is a dog. Where is she?'</span>;</span><br><span class="line"><span class="keyword">var</span> result = text.replace(reg,<span class="string">'IS'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">//He IS a boy, This is a dog. Where is she?</span></span><br></pre></td></tr></table></figure></p><p>这样就把第一个英文单词’is’替换成了’IS’，假如你想把该句中所有的单词’is’都替换成’IS’,应该这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/is/g</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'He is a boy, This is a dog. Where is she?'</span>;</span><br><span class="line"><span class="keyword">var</span> result = text.replace(reg,<span class="string">'IS'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">//He IS a boy, ThIS IS a dog. Where IS she?</span></span><br></pre></td></tr></table></figure></p><p>在正则的末尾加上’g’就好，’g’表示global，是全局匹配的意思。’g’是正则表达式的一个修饰符，修饰符有:  </p><ul><li>‘g’: global 全文搜索，不添加的话，搜索到第一个停止</li><li>‘i’: ignore case 忽略大小写，默认大小写敏感</li><li>‘m’: multiple 多行搜索，检测字符串中的换行符，主要是影响字符串开始标识符^和结束标识符$的使用    </li></ul><p>但是这样的话也改变了this中is的大小写，这显然不是我们想要的，所以这个时候可以这样做<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\bis\b/g</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'He is a boy, This is a dog. Where is she?'</span>;</span><br><span class="line"><span class="keyword">var</span> result = text.replace(reg,<span class="string">'IS'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">//He IS a boy, This IS a dog. Where IS she?</span></span><br></pre></td></tr></table></figure></p><p>‘\b’:匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。这里的正则在’is’的前后都有’\b’，这样就只能匹配单词’is’了。</p><h3 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2.构造函数"></a>2.构造函数</h3><p>倘若你需要使用构造函数的方式实例化正则，则上面的字面量形式可以改成这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\bis\\b'</span>,<span class="string">'g'</span>);</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'He is a boy, This is a dog. Where is she?'</span>;</span><br><span class="line"><span class="keyword">var</span> result = text.replace(reg,<span class="string">'IS'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">//He IS a boy, This IS a dog. Where IS she?</span></span><br></pre></td></tr></table></figure></p><p>用这种方式就不需要’/‘符号开始和结尾以表示是正则了。但是里面的’\’等特殊字符需要用’\’转义。  </p><p>“\”:将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\n”匹配一个换行符。串行“\ \”匹配“\”而“\ (”则匹配“(”。</p><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><hr><p>正则表达式由两种基本字符类型组成：  </p><ul><li>原义文本字符，即代表它原本含义的字符</li><li>元字符，元字符是在正则表达式中有特殊含义的非字母字符，例如上文提到的’\b’，表示匹配单词边界，并不是匹配’\b’，在正则中主要存在这些特殊字符：*,+,?,$,^,.,|,\,(,),{,},[,]</li></ul><h3 id="字符类（字符集合）"><a href="#字符类（字符集合）" class="headerlink" title="字符类（字符集合）"></a>字符类（字符集合）</h3><hr><p>一般情况下，正则表达式一个字符对应字符串一个字符  </p><blockquote><p>思考： var text = ‘a1b2c3d4’; 把英文字母都换成X</p></blockquote><p>但是更多的时候，我们匹配的并不是某个字符，而是符合一系列特征的字符串。这时候，我们就可以使用元字符’[]’来构建一个简单的类，所谓类是指符合某些特性的对象，一个泛指，而不是特指某个字符，例如：表达式’[abc]’把字符a或b或c归为一类，表达式可以匹配这样的字符。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[abc]/g</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'a1b2c3d4'</span>;</span><br><span class="line"><span class="keyword">var</span> result = text.replace(reg,<span class="string">'X'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//X1X2X3d4</span></span><br></pre></td></tr></table></figure></p><h4 id="字符类取反"><a href="#字符类取反" class="headerlink" title="字符类取反"></a>字符类取反</h4><p>使用元字符’^’创建 反向类/负向类。反向类的意思是不属于类的内容，表达式’[^abc]’表示不是字符a或b或c的内容,例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^abc]/g</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'a1b2c3d4'</span>;</span><br><span class="line"><span class="keyword">var</span> result = text.replace(reg,<span class="string">'X'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//aXbXcXXX</span></span><br></pre></td></tr></table></figure></p><h3 id="范围类"><a href="#范围类" class="headerlink" title="范围类"></a>范围类</h3><hr><blockquote><p>思考： var text = ‘a1b2c3d4z9’; 把英文字母都换成Q  </p></blockquote><p>倘若我们需要用字符类匹配数字，按照前面的匹配方式，书写可能会很麻烦，需要这样：’[0123456789]’，对于 a 到 z 的字符更是如此。  </p><p>为此，正则表达式给我们提供了范围类，我们可以使用[a-z]来连接两个字符，表示从a到z的任意字符，这是一个闭区间，包含 a 和 z 本身。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]/g</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'a1b2c3d4z9'</span>;</span><br><span class="line"><span class="keyword">var</span> result = text.replace(reg,<span class="string">'Q'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//Q1Q2Q3Q4Q9</span></span><br></pre></td></tr></table></figure></p><p>可以发现，这样就方便了许多。此外，在’[]’组成的类的内部是可以连写的[a-zA-Z]，这样就形成了大写字母小写字母完全匹配:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-zA-Z]/g</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'a1b2c3d4z9ASDFHDFH'</span>;</span><br><span class="line"><span class="keyword">var</span> result = text.replace(reg,<span class="string">'Q'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//Q1Q2Q3Q4Q9QQQQQQQQ</span></span><br></pre></td></tr></table></figure></p><h3 id="预定义类及边界"><a href="#预定义类及边界" class="headerlink" title="预定义类及边界"></a>预定义类及边界</h3><hr><h4 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h4><blockquote><p>思考： 匹配一个 ab+数字+任意字符 的字符串：</p></blockquote><p>正则表达式提供预预定义类来匹配常见的字符类，让我们书写更方便。</p><table><thead><tr><th>字符</th><th>等价类</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>[^\r\n]</td><td>除了回车符和换行符之外的所有字符</td></tr><tr><td>\d</td><td>[0-9]</td><td>数字字符</td></tr><tr><td>\D</td><td>[^0-9]</td><td>非数字字符</td></tr><tr><td>\s</td><td>[\t\n\x0B\f\r]</td><td>空白符</td></tr><tr><td>\S</td><td>[^\t\n\x0B\f\r]</td><td>非空白符</td></tr><tr><td>\w</td><td>[a-zA-Z_0-9]</td><td>单词字符（字母、数字、下划线）</td></tr><tr><td>\w</td><td>[a-zA-Z_0-9]</td><td>单词字符（字母、数字、下划线）</td></tr><tr><td>\W</td><td>[^a-zA-Z_0-9]</td><td>非单词字符</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab\d./</span>; <span class="comment">//之前我们可能会这样写：ab[0-9][^\r\n]</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'absdlkjflab91323'</span>;</span><br><span class="line"><span class="keyword">var</span> result = text.replace(reg,<span class="string">'AAAA'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//absdlkjflAAAA323</span></span><br></pre></td></tr></table></figure><h4 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h4><blockquote><p>思考： var text = ‘He is a boy, This is a dog. Where is she?’;  我们在第一个例子中用到过’\b’单词边界，这里我们做一个跟上面第一个例子相反的，只把’This’中的’is’替换为’IS’</p></blockquote><p>除了预定义类，正则表达式还提供了几个常用的边界字符。</p><table><thead><tr><th>字符</th><th>等价类</th></tr></thead><tbody><tr><td>^</td><td>以xxx开始</td></tr><tr><td>$</td><td>以xxx结束</td></tr><tr><td>\b</td><td>单词边界</td></tr><tr><td>\B</td><td>非单词边界</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg = /\Bis\b/g;</span><br><span class="line">var text = &apos;He is a boy, This is a dog. Where is she?&apos;;</span><br><span class="line">var result = text.replace(reg,&apos;IS&apos;);</span><br><span class="line">console.log(result) //He is a boy, ThIS is a dog. Where is she?</span><br></pre></td></tr></table></figure><p>在类’[]’中’^’表示取反，但是不在类中的时候’^’表示以xxx开始，’$’表示以xxx结束，这两个边界字符一般放在正则的开始和结束位置。</p><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><hr><p>倘若我们希望匹配一个连续出现20次的数字的字符串，通过我们之前学习的知识，我们可能会写出连续20个’\d’。假如20次你还可以接受，那100次，1000次，甚至更多次，你怎么办？<br>为了解决这个问题，正则表达式引入了量词的概念，下面是一些量词和他们的含义：</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>？</td><td>出现零次或一次（最多出现一次）</td></tr><tr><td>+</td><td>出现一次或者多次（至少出现一次</td></tr><tr><td>*</td><td>出现零次或者多次（任意次）</td></tr><tr><td>{n}</td><td>出现n次</td></tr><tr><td>{n,m}</td><td>出现n到m次</td></tr><tr><td>{n,}</td><td>至少出现n次</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg = /\d&#123;4&#125;[/-]\d&#123;2&#125;[/-]\d&#123;2&#125;/g;</span><br><span class="line">var text = &apos;2018-02-23，2018/02/24，2018~02/25&apos;;</span><br><span class="line">var result = text.replace(reg,&apos;匹配正确日期格式&apos;);</span><br><span class="line">console.log(result);//匹配正确日期格式，匹配正确的日期格式，2018~02/25</span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><hr><blockquote><p>思考： var text = ‘ByronByronByronnn’;将单词Byron替换为数字0  </p></blockquote><p>匹配字符串 Byron 连续出现3次的场景，根据前面所了解的，我们可能会这样写：Byron{3}。<br>但是这样是错误的，试试你会发现只有Byronnn才能匹配成功，即最后的n重复了3次，并不能匹配整个单词重复三次的情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg = /Byron&#123;3&#125;/g;</span><br><span class="line">var text = &apos;ByronByronByronnn&apos;;</span><br><span class="line">var result = text.replace(reg,&apos;0&apos;);</span><br><span class="line">console.log(result);//ByronByron0</span><br></pre></td></tr></table></figure></p><p>那么，我们要怎么匹配Byron连续出现3次的情况呢，这时候，正则表达式的分组’()’就帮我们解决了这个问题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(Byron)&#123;3&#125;/g</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'ByronByronByronnn'</span>;</span><br><span class="line"><span class="keyword">var</span> result = text.replace(reg,<span class="string">'0'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//0nn</span></span><br></pre></td></tr></table></figure></p><h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><p>有时候，我们可能会需要在匹配时用到或者的关系，利用之前的’[]’字符类（字符集合）可能只能匹配单个字符的或者关系，比如匹配a或b，你可以这样写：’[ab]’，但是如果你需要匹配的是一整个单词的或者关系呢，这个时候’[]’就不好使了。这时候，我们用’|’可以达到或的效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//匹配单词Byron或者Casper</span><br><span class="line">var reg = /Byron|Casper/g;</span><br><span class="line">var text = &apos;ByronCasper&apos;</span><br><span class="line">var result = text.replace(reg,&apos;X&apos;);</span><br><span class="line">console.log(result);//XX</span><br><span class="line"></span><br><span class="line">//匹配Byr+on或Ca+sper</span><br><span class="line">var reg = /Byr(on|Ca)sper/g;</span><br><span class="line">var text = &apos;ByronsperByrCasper&apos;</span><br><span class="line">var result1 = text.replace(reg,&apos;X&apos;);</span><br><span class="line">console.log(result1);//XX</span><br></pre></td></tr></table></figure></p><h4 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h4><blockquote><p>思考：把日期’2015-12-25’替换成’12/25/2015’  </p></blockquote><p>这时候，正则的反向引用就可以取到作用了。表达式在匹配时，表达式引擎会将小括号 “( )” 包含的表达式所匹配到的字符串记录（分组捕获）下来。在获取匹配结果的时候，小括号包含的表达式所匹配到的字符串可以单独获取。    </p><p>在js中正则匹配成功的字符串可以用$1表示第一次匹配成功，$3表示第三次匹配成功的字符，以此类推至$99）。于是，上面的例子就可以这样写了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/g</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'2015-12-25'</span></span><br><span class="line"><span class="keyword">var</span> result = text.replace(reg,<span class="string">'$2/$3/$1'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//12/25/2015</span></span><br></pre></td></tr></table></figure></p><h4 id="忽略分组"><a href="#忽略分组" class="headerlink" title="忽略分组"></a>忽略分组</h4><p>在上面的反向引用中，我们默认是根据’()’全部捕获记录为$1~$99的，倘若我们想忽略某个捕获要怎么办呢？  </p><p>不希望捕获某些分组，只需要在分组内加上’?:’就可以了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?:Byron)(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/g</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'Byron2016-12-05'</span></span><br><span class="line"><span class="keyword">var</span> result = text.replace(reg,<span class="string">'$2/$3/$1'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//12/05/2016</span></span><br></pre></td></tr></table></figure></p><h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3><hr><blockquote><p>思考：   var reg1 = /\w/; var reg2 = /\w/g;那么reg1.test(‘a’)和 reg2.test(‘ab’)的结果分别是什么？  </p></blockquote><p>我们在用正则表达式相关的方法时，经常会用到正则表达式相关的一些对象属性，下面我们总结一下正则表达式相关的对象属性：</p><ul><li>golbal: 是否全文搜索，默认false</li><li>ignore case: 是否大小写敏感，默认false</li><li>multiline: 多行搜索，默认false</li><li>lastIndex: 是当前表达式匹配内容的最后一个字符的下一个位置</li><li>source: 正则表达式的文本字符串</li></ul><p>其中前面三个我们在上文中已经提到过了，source的话，我们一起结合起来看看代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/\w/</span>;</span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/\w/gim</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg1.global);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.ignoreCase);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.multiline);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg2.global);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.ignoreCase);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.multiline);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg1.source);<span class="comment">//\w</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.source);<span class="comment">//\w</span></span><br></pre></td></tr></table></figure></p><h3 id="支持正则表达式的-String-对象的方法"><a href="#支持正则表达式的-String-对象的方法" class="headerlink" title="支持正则表达式的 String 对象的方法"></a>支持正则表达式的 String 对象的方法</h3><hr><p>支持正则表达式的 String 对象的方法有：</p><ul><li>search： 检索与正则表达式相匹配的值</li><li>match： 找到一个或多个正则表达式的匹配。</li><li>replace： 替换与正则表达式匹配的子串。</li><li>split： 把字符串分割为字符串数组。<h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式匹配的子字符串<br>语法为stringObject.search(regexp),结果返回 stringObject 中第一个与 regexp 相匹配的子串的起始位置index，如果没有找到任何匹配的子串，则返回 -1。需要注意的是，search() 方法不执行全局匹配，它将忽略修饰符’g’,并且总是从字符串的开始进行检索。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'a1b2c3d4'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="string">'1'</span>)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="string">'10'</span>)); <span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/b2/</span>)); <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/\w\d/g</span>)); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/\w\d/g</span>)); <span class="comment">//0 忽略'g',执行多次未返回不同结果</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><p>match() 方法将检索字符串，以找到一个或多个与 RegExp 匹配的文本，在 RegExp 是否有修饰符’g’影响很大。它返回指定的值，而不是字符串的位置。    </p><p>语法为stringObject.match(searchvalue)或stringObject.match(regexp)，结果返回存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。  </p><h4 id="1-非全局调用"><a href="#1-非全局调用" class="headerlink" title="1.非全局调用"></a>1.非全局调用</h4><ul><li>如果 regexp 没有标志 g ，那么 match() 方法就只能在字符串中执行匹配一次</li><li>如果没有找到任何匹配文本，返回 null</li><li>否则它将返回一个数组，其中存放了与它找到的匹配文本有关的信息：</li><li>数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/\d(\w)\d/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'1a2b3c4d5e'</span>;</span><br><span class="line"><span class="keyword">var</span> arr = str.match(reg3);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//  [1a2, a]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="全局调用"><a href="#全局调用" class="headerlink" title="全局调用"></a>全局调用</h4><p>全局调用就和 exec() 不同了：</p><ul><li>如果 regexp 具有标志 g 则 match() 方法将执行全局检索，找到字符串中所有匹配的子字符串</li><li>没有找到任何匹配的子字符串则返回 null</li><li>如果找到了一个或者多个匹配字串，则返回一个数组</li><li>数组元素中存放的是字符串中所有匹配的字串，而且也没有index属性和input属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg4 = <span class="regexp">/\d(\w)(\w)\d/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'$1az2bb3cy4dd5ee'</span>;</span><br><span class="line"><span class="keyword">var</span> arr = str.match(reg4)</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["1az2", "3cy4"]</span></span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>我们经常用它把字符串分割为数组。但是你可能不知道，我们在一些复杂情况下我们可以使用正则表达式解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'a,b,c,d'</span>;</span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">','</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//['a','b','c','d']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--那如果是这样的字符串呢--&gt;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'a1b2c3d'</span>;</span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="regexp">/\d/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//['a','b','c','d']</span></span><br></pre></td></tr></table></figure><blockquote><p>其实，我们在用 split() 分割字符’,’的时候，split() 方法也是把’,’ 隐士转换成正则’/,/‘的, search() 方法和 replace() 方法也是一样的。</p></blockquote><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。<br>语法为stringObject.replace(regexp/substr,replacement),结果返回一个新的字符串，是用 replacement 替换了 regexp 的第一次匹配或所有匹配之后得到的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;正则表达式在平时工作中非常常见，工作中用到的大部分正则都是去网上搜索得来的，再复杂一点看着文档费时费力的拼凑一下。所以觉得很有必要对一些常用的正则内容进行一个归纳和总结。&quot;&gt;&lt;a href=&quot;#正则表达式在平时工作中非常常见，工作中用到的大部分正则都是去网上搜索得
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js中this的指向</title>
    <link href="https://itlinnnn.github.io/linhui.github.io/js%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/"/>
    <id>https://itlinnnn.github.io/linhui.github.io/js中this的指向/</id>
    <published>2018-07-21T09:38:00.000Z</published>
    <updated>2018-07-22T05:51:14.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要使用this-解决的问题？"><a href="#为什么要使用this-解决的问题？" class="headerlink" title="为什么要使用this? 解决的问题？"></a>为什么要使用this? 解决的问题？</h2><blockquote><p>可以先通过一个例子了解下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="keyword">this</span>.name</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello I am --"</span> + name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> me = &#123;</span><br><span class="line">  name: <span class="string">'a'</span>,</span><br><span class="line">  speak: speak</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> you = &#123;</span><br><span class="line">  name: <span class="string">'b'</span>,</span><br><span class="line">  speak: speak</span><br><span class="line">&#125;</span><br><span class="line">me.speak()  <span class="comment">//Hello I am -- a</span></span><br><span class="line">you.speak()  <span class="comment">//Hello I am -- b</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>this可以在同一个执行环境中使用不同的上下文对象。它其实提供了一种更加优雅的方式来隐式“传递”一个对象引用，因此可以使API设计的更加简洁且易于复用。</p></blockquote><h4 id="定义：this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象"><a href="#定义：this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象" class="headerlink" title="定义：this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象"></a>定义：this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象</h4><p>其实关于this的指向问题可以从函数的执行调用过程中理解，当一个函数被调用时，会创建一个活动记录(执行上下文)。这个记录会包含函数在哪里被调用、函数的调用方法、传入的参数等信息，this也是这里的一个属性。当函数被某个对象调用时可以理解为在函数调用的那一刻它被调用对象拥有。所以this指向调用其的对象。</p><blockquote><p>对于this的指向问题，一般都是根据以上的解释去理解，虽然在一般的情况下这样的理解是不会有问题的，但是当在某些场景下这样的解释并不是很准确，所以会让人感觉一直琢磨不透的感觉。今天可以就不同情况展开讨论下this指向的问题。看看下面的打印结果会是什么</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="comment">// 例子二</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  b: <span class="number">20</span>,</span><br><span class="line">  fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.b); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.fn();</span><br></pre></td></tr></table></figure><blockquote><p>按照上面的定义this最终指向的是调用它的对象，这里的函数test实际是被Window对象所点出来的。所以例子1中的this指向的是windows。在例子2中函数的执行是通过o.fn()调用的，所以this的指向的当然是对象o了。这两个例子可以验证上面的定义，但是还是不够准确的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子三</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  b: <span class="number">20</span>,</span><br><span class="line">  fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.b); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.o.fn();</span><br></pre></td></tr></table></figure></p></blockquote><p>此时打印的应该是什么呢？这段代码和上面的那段代码几乎是一样的，但是这里的this为什么不是指向window，如果按照上面的理论，最终this指向的是调用它的对象，在此处就显得不是很准确了。所以关于函数中this的指向其实是可以分为三种情况的</p><ul><li>如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window</li><li>如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。</li><li>如果一个函数中有this，这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象，这就可以解释例子三中的this不是指向window了<h4 id="那么以下的打印结果又应该是什么？"><a href="#那么以下的打印结果又应该是什么？" class="headerlink" title="那么以下的打印结果又应该是什么？"></a>那么以下的打印结果又应该是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子4</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a:<span class="number">10</span>,</span><br><span class="line">  b:&#123;</span><br><span class="line">    a:<span class="number">12</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> j = o.b.fn;</span><br><span class="line">j();</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>此处的this指向的是window,其实这里只需要理解清楚一句话”this永远指向的是最后调用它的对象”,也就是看它执行的时候是谁调用的，例子4中虽然函数fn是被对象b所引用，但是在将fn赋值给变量j的时候并没有执行所以最终指向的是window，这和例子3是不一样的，例子3是直接执行了fn。所以说，那例子5中的打印结果又应该是什么呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; </span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  foo: foo </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = obj.foo; <span class="comment">// 函数别名!</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"xxxxx"</span></span><br><span class="line">bar();</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="不同情况下this的使用"><a href="#不同情况下this的使用" class="headerlink" title="不同情况下this的使用"></a>不同情况下this的使用</h3><p>1.构造函数版this<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.user = <span class="string">"lh"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(a.user);</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不使用new指向window</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// window</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="string">'inwe'</span>)</span><br><span class="line"><span class="comment">//使用new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//people</span></span><br><span class="line">      self = <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> people = <span class="keyword">new</span> Person(<span class="string">'iwen'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(self === people) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>这里之所以对象a可以点出函数Fn里面的user是因为new关键字可以改变this的指向，将这个this指向对象a，我们这里用变量a创建了一个Fn的实例（相当于复制了一份Fn到对象a里面），此时仅仅只是创建，并没有执行，而调用这个函数Fn的是对象a，那么this指向的自然是对象a，那么为什么对象Fn中会有user，因为已经复制了一份Fn函数到对象a中，用了new关键字就等同于复制了一份。</p></blockquote><p>！当this遇上return时<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子7</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.user = <span class="string">'lh'</span>;  </span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子8</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.user = <span class="string">'lh'</span>;  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line">  <span class="built_in">console</span>.log(a.user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子9</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.user = <span class="string">'lh'</span>;  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user);</span><br></pre></td></tr></table></figure></p><blockquote><p>由上可知，如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。</p></blockquote><p>2.箭头函数中的this<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line"> x:<span class="number">22</span>,</span><br><span class="line"> say:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say();</span><br></pre></td></tr></table></figure></p><blockquote><p>箭头函数不是通过function关键字定义的，也就不遵循以上的this规则，而是“继承”外层作用域中的this指向。箭头函数中的this是在定义函数的时候绑定，而不是在执行函数的时候绑定。所谓的定义时候绑定，就是this是继承自父执行上下文！！中的this，比如这里的箭头函数中的this.x，箭头函数本身与say平级以key:value的形式，也就是箭头函数本身所在的对象为obj，而obj的父执行上下文就是window，因此这里的this.x实际上表示的是window.x，因此输出的是11。</p></blockquote><h3 id="改变this指向的几种方法（apply，call-bind）"><a href="#改变this指向的几种方法（apply，call-bind）" class="headerlink" title="改变this指向的几种方法（apply，call, bind）"></a>改变this指向的几种方法（apply，call, bind）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  user:<span class="string">"lh"</span>,</span><br><span class="line">  fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><ul><li>此时要改变this的指向，可以通过call方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  user:<span class="string">"lh"</span>,</span><br><span class="line">  fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.user);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b.call(a);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>通过在call方法，给第一个参数添加要把b添加到哪个环境中，也就是说，this就会指向那个对象。<br>call方法除了第一个参数以外还可以添加多个参数，如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  user:<span class="string">"lh"</span>,</span><br><span class="line">  fn:<span class="function"><span class="keyword">function</span>(<span class="params">p1, p2</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.user)</span><br><span class="line">    <span class="built_in">console</span>.log(p1+p2)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b.call(a, <span class="number">1</span>, <span class="number">3</span>）</span><br></pre></td></tr></table></figure><ul><li>使用apply()方法，改变this指向的效果和call相似，在于他们传递的参数格式不同，第二个参数必须是一个数组，如下:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  user:<span class="string">"lh"</span>,</span><br><span class="line">  fn:<span class="function"><span class="keyword">function</span>(<span class="params">p1, p2</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.user)</span><br><span class="line">    <span class="built_in">console</span>.log(p1+p2)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b.apply(a, [<span class="number">1</span>, <span class="number">3</span>]）</span><br></pre></td></tr></table></figure></li></ul><h3 id="当call和apply的第一个参数写的是null，那么this指向的是window对象"><a href="#当call和apply的第一个参数写的是null，那么this指向的是window对象" class="headerlink" title="!当call和apply的第一个参数写的是null，那么this指向的是window对象"></a>!当call和apply的第一个参数写的是null，那么this指向的是window对象</h3><ul><li>bind()方法<blockquote><p>bind()方法也可用来改变this的指向，但是和call,apply方法在用法上有区别,如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    user:<span class="string">"lh"</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b.bind(a);</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>此时发现并不打印任何的结果，这是因为bind方法返回的是一个修改过后的函数,此时执行conole.log(b.bind(a))会得到的结果是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ƒ () &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>call和apply都是改变上下文中的this并立即执行这个函数，bind方法可以让对应的函数想什么时候调就什么时候调用，并且可以将参数在执行的时候添加，这是它们的区别，根据自己的实际情况来选择使用。并且也是可以像call和apply一样传递参数</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要使用this-解决的问题？&quot;&gt;&lt;a href=&quot;#为什么要使用this-解决的问题？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用this? 解决的问题？&quot;&gt;&lt;/a&gt;为什么要使用this? 解决的问题？&lt;/h2&gt;&lt;blockquote
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端路由实现原理</title>
    <link href="https://itlinnnn.github.io/linhui.github.io/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://itlinnnn.github.io/linhui.github.io/前端路由实现原理/</id>
    <published>2018-07-21T03:04:46.000Z</published>
    <updated>2018-07-21T03:05:00.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端路由实现（history）"><a href="#前端路由实现（history）" class="headerlink" title="前端路由实现（history）"></a>前端路由实现（history）</h2><h3 id="了解："><a href="#了解：" class="headerlink" title="了解："></a>了解：</h3><blockquote><p>HTML5 history新增了两个API:history.pushState和history.replaceState</p></blockquote><h4 id="两个api都接受三个参数"><a href="#两个api都接受三个参数" class="headerlink" title="两个api都接受三个参数"></a>两个api都接受三个参数</h4><ul><li><p>状态对象（state object）：一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。</p></li><li><p>标题（title）：FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。</p></li><li><p>地址（URL）： 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。</p></li></ul><blockquote><p>相同之处是两个API都会操作浏览器的历史记录，而不会引起页面的刷新。不同之处在于pushState会增加一条新的历史记录，而replaceState则会替换当前的历史记录</p></blockquote><h4 id="大家可以先在控制台试试，看看地址栏发生了什么变化"><a href="#大家可以先在控制台试试，看看地址栏发生了什么变化" class="headerlink" title="大家可以先在控制台试试，看看地址栏发生了什么变化"></a>大家可以先在控制台试试，看看地址栏发生了什么变化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"/test"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"#/hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"?name="</span>);</span><br><span class="line">&lt;<span class="regexp">/code&gt;&lt;/</span>pre&gt;</span><br></pre></td></tr></table></figure><h3 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h3><blockquote><p>建立html文件，index.html<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;前端路由实现&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        .warp&#123;</span></span><br><span class="line"><span class="regexp">            width:400px;</span></span><br><span class="line"><span class="regexp">            height:400px;</span></span><br><span class="line"><span class="regexp">            border:1px solid grey;</span></span><br><span class="line"><span class="regexp">            margin:0 auto;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .nav&#123;</span></span><br><span class="line"><span class="regexp">            border-bottom:1px solid grey;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .nav li&#123;</span></span><br><span class="line"><span class="regexp">            display:inline-block;</span></span><br><span class="line"><span class="regexp">            list-style:none;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .nav li a&#123;</span></span><br><span class="line"><span class="regexp">            display:inline-block;</span></span><br><span class="line"><span class="regexp">            text-decoration: none;</span></span><br><span class="line"><span class="regexp">            padding:10px 15px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .router&#123;</span></span><br><span class="line"><span class="regexp">            padding:20px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        a&#123;</span></span><br><span class="line"><span class="regexp">            cursor: pointer;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;section class="warp"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="nav"&gt;          </span></span><br><span class="line"><span class="regexp">            &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">                &lt;li&gt;&lt;a href="javascript:void(0)" data-path="index"&gt;首页&lt;/</span>a&gt;&lt;/li&gt; </span><br><span class="line">                &lt;li&gt;&lt;a href="javascript:void(0)" data-path="news"&gt;新闻&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href="javascript:void(0)" data-path="about"&gt;关于&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div id=<span class="string">"router"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"router"</span>&gt;</span><br><span class="line">            &lt;!-- 内容加载区域 --&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>section&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"./router.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>此时的页面为：</p><p><img src="https://user-gold-cdn.xitu.io/2018/7/7/164751eaa48e1ec6?w=2794&amp;h=1062&amp;f=jpeg&amp;s=169353" alt=""></p><blockquote><p>引入js文件router.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">  history.replaceState(<span class="literal">null</span>,<span class="literal">null</span>,<span class="string">''</span>);<span class="comment">//最开始的状态，采用replace直接替换</span></span><br><span class="line">  $(<span class="string">'#router'</span>).html(<span class="string">'&lt;p&gt;显示内容区域&lt;/p&gt;'</span>)</span><br><span class="line">  $(<span class="string">'a'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.text)</span><br><span class="line">      <span class="keyword">var</span> text = <span class="keyword">this</span>.text;</span><br><span class="line">      $(<span class="string">'#router'</span>).html(<span class="string">'&lt;p&gt;'</span>+ text +<span class="string">'&lt;/p&gt;'</span>)</span><br><span class="line">      history.pushState(<span class="literal">null</span>,<span class="literal">null</span>,<span class="string">'#/'</span>+text);</span><br><span class="line">  &#125;)    </span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p></blockquote><p>此时点击导航按钮时</p><p><img src="https://user-gold-cdn.xitu.io/2018/7/7/164754924b198bae?w=600&amp;h=185&amp;f=gif&amp;s=3409188" alt=""></p><ul><li>此时当点击不同的导航项的时候，地址栏上的路由进行了对应的改变，展现的内容区域也发生了变化。但是实际上这个并没有实现路由的真正含义。因为内容部分的改变是根据事件的触发而获得当前的内容。</li><li><p>此时如果点击浏览的前进和后退按钮，内容是无法监听到地址栏的变化而作出改变的</p><h4 id="在此基础上变动一下实现方式，将router-js改为："><a href="#在此基础上变动一下实现方式，将router-js改为：" class="headerlink" title="在此基础上变动一下实现方式，将router.js改为："></a>在此基础上变动一下实现方式，将router.js改为：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 状态版</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> count = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    $(<span class="string">'#router'</span>).html(<span class="string">'&lt;p&gt;首页&lt;/p&gt;'</span>+count[<span class="number">0</span>]+<span class="string">'&lt;p&gt;新闻&lt;/p&gt;'</span>+count[<span class="number">1</span>]+<span class="string">'&lt;p&gt;关于&lt;/p&gt;'</span>+count[<span class="number">2</span>])</span><br><span class="line">    <span class="comment">// history.replaceState(count,null,'');//最开始的状态，采用replace直接替换</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i&lt;$(<span class="string">'a'</span>).length; i++)&#123;</span><br><span class="line">        $(<span class="string">'a'</span>)[i].index = i</span><br><span class="line">        $(<span class="string">'a'</span>).eq(i).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.index);</span><br><span class="line">            <span class="keyword">var</span> index = <span class="keyword">this</span>.index;</span><br><span class="line">            count[index]++;</span><br><span class="line">            $(<span class="string">'#router'</span>).html(<span class="string">'&lt;p&gt;首页&lt;/p&gt;'</span>+count[<span class="number">0</span>]+<span class="string">'&lt;p&gt;新闻&lt;/p&gt;'</span>+count[<span class="number">1</span>]+<span class="string">'&lt;p&gt;关于&lt;/p&gt;'</span>+count[<span class="number">2</span>])</span><br><span class="line">            <span class="built_in">console</span>.log(count)</span><br><span class="line">            history.pushState(count,<span class="literal">null</span>,<span class="string">'#/count'</span>+count[index]);<span class="comment">//之后的状态，需要进行保存</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//监听history其他api导致地址栏url改变事件</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.state);</span><br><span class="line">        <span class="keyword">var</span> state = e.state;</span><br><span class="line">        $(<span class="string">'#router'</span>).html(<span class="string">'&lt;p&gt;首页&lt;/p&gt;'</span>+state[<span class="number">0</span>]+<span class="string">'&lt;p&gt;新闻&lt;/p&gt;'</span>+state[<span class="number">1</span>]+<span class="string">'&lt;p&gt;关于&lt;/p&gt;'</span>+state[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>此时的思路是做一个状态记录，记录下每个导航按钮被点击的次数。当每次执行点击导航栏切换的时候，通过history.pushState（count， null, ‘#/count’+count[index]）这个api,传递了状态对象在内，并在第三个参数中将当前已点击数作为地址栏的显示数据。示例如下：</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/7/7/1647564fa8089469?w=600&amp;h=182&amp;f=gif&amp;s=5217399" alt=""></p><ul><li>!!当活动历史记录条目更改时，将触发popstate事件。如果被激活的历史记录条目是通过对history.pushState（）的调用创建的，或者受到对history.replaceState（）的调用的影响，popstate事件的state属性包含历史条目的状态对象的副本。</li><li>需要注意的是调用history.pushState()或history.replaceState()不会触发popstate事件。只有在做出浏览器动作时，才会触发该事件，如用户点击浏览器的回退按钮（或者在Javascript代码中调用history.back()）</li></ul><h4 id="此处通过记录下每次的点击次数来解释了pushState的用法以及参数，其实简单的写法可以表达为："><a href="#此处通过记录下每次的点击次数来解释了pushState的用法以及参数，其实简单的写法可以表达为：" class="headerlink" title="此处通过记录下每次的点击次数来解释了pushState的用法以及参数，其实简单的写法可以表达为："></a>此处通过记录下每次的点击次数来解释了pushState的用法以及参数，其实简单的写法可以表达为：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">'内容展示'</span>;</span><br><span class="line"></span><br><span class="line">    history.replaceState(url,<span class="literal">null</span>,<span class="string">''</span>);<span class="comment">//最开始的状态，采用replace直接替换</span></span><br><span class="line">    $(<span class="string">'#router'</span>).html(<span class="string">'&lt;p&gt;'</span>+url+<span class="string">'&lt;/p&gt;'</span>)</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'a'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.text)</span><br><span class="line">        url = <span class="keyword">this</span>.text;</span><br><span class="line"></span><br><span class="line">        $(<span class="string">'#router'</span>).html(<span class="string">'&lt;p&gt;'</span>+ url +<span class="string">'&lt;/p&gt;'</span>)</span><br><span class="line">        history.pushState(url,<span class="literal">null</span>,<span class="string">'#/'</span>+url);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.state);</span><br><span class="line">        url = e.state</span><br><span class="line">        $(<span class="string">'#router'</span>).html(<span class="string">'&lt;p&gt;'</span>+ url +<span class="string">'&lt;/p&gt;'</span>)</span><br><span class="line"></span><br><span class="line">     &#125;);     </span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/7/7/164756c7b5ff3cfd?w=599&amp;h=195&amp;f=gif&amp;s=4251137" alt=""></p><h5 id="现在的效果看上去其实我们相当于回到了远点，但是解决了无法监听地址栏的地址变化问题，是通过监听popstate来作出响应的。"><a href="#现在的效果看上去其实我们相当于回到了远点，但是解决了无法监听地址栏的地址变化问题，是通过监听popstate来作出响应的。" class="headerlink" title="现在的效果看上去其实我们相当于回到了远点，但是解决了无法监听地址栏的地址变化问题，是通过监听popstate来作出响应的。"></a>现在的效果看上去其实我们相当于回到了远点，但是解决了无法监听地址栏的地址变化问题，是通过监听popstate来作出响应的。</h5><h4 id="现在还只是看了这一部分的路由实现机制，要通过监听作出不同的响应。还需要更深入的与hash进行对比。"><a href="#现在还只是看了这一部分的路由实现机制，要通过监听作出不同的响应。还需要更深入的与hash进行对比。" class="headerlink" title="现在还只是看了这一部分的路由实现机制，要通过监听作出不同的响应。还需要更深入的与hash进行对比。"></a>现在还只是看了这一部分的路由实现机制，要通过监听作出不同的响应。还需要更深入的与hash进行对比。</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端路由实现（history）&quot;&gt;&lt;a href=&quot;#前端路由实现（history）&quot; class=&quot;headerlink&quot; title=&quot;前端路由实现（history）&quot;&gt;&lt;/a&gt;前端路由实现（history）&lt;/h2&gt;&lt;h3 id=&quot;了解：&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue的渲染函数</title>
    <link href="https://itlinnnn.github.io/linhui.github.io/Vue%E7%9A%84%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0/"/>
    <id>https://itlinnnn.github.io/linhui.github.io/Vue的渲染函数/</id>
    <published>2018-04-22T01:06:59.000Z</published>
    <updated>2018-06-29T11:11:17.768Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在Vue中，我们都是绝大部分都是使用template来创建html-框架给予了很好的支持，使用起来也很方便，符合常规的编程方式。但是在一些特殊的场景需要有特殊的判断时，使用template显得会低效率，并且代码的可读性也不高。此时我们可以用到render函数，使用javascript的完全编程能力来实现html的创建。"><a href="#在Vue中，我们都是绝大部分都是使用template来创建html-框架给予了很好的支持，使用起来也很方便，符合常规的编程方式。但是在一些特殊的场景需要有特殊的判断时，使用template显得会低效率，并且代码的可读性也不高。此时我们可以用到render函数，使用javascript的完全编程能力来实现html的创建。" class="headerlink" title="在Vue中，我们都是绝大部分都是使用template来创建html,框架给予了很好的支持，使用起来也很方便，符合常规的编程方式。但是在一些特殊的场景需要有特殊的判断时，使用template显得会低效率，并且代码的可读性也不高。此时我们可以用到render函数，使用javascript的完全编程能力来实现html的创建。"></a>在Vue中，我们都是绝大部分都是使用template来创建html,框架给予了很好的支持，使用起来也很方便，符合常规的编程方式。但是在一些特殊的场景需要有特殊的判断时，使用template显得会低效率，并且代码的可读性也不高。此时我们可以用到render函数，使用javascript的完全编程能力来实现html的创建。</h4><h3 id="情景："><a href="#情景：" class="headerlink" title="情景："></a>情景：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要求是通过size的值来动态生成title-size标签的组件</span></span><br><span class="line">&lt; title-size :size=<span class="string">"1"</span>&gt;Hello world!&lt; /title-size&gt;</span><br></pre></td></tr></table></figure><p>此时采用之前的常规做法，我们会选择</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/x-template"</span> id=<span class="string">"titleSize-template"</span>&gt;</span><br><span class="line">  &lt;h1 v-<span class="keyword">if</span>=<span class="string">"size === 1"</span>&gt;</span><br><span class="line">    &lt;slot&gt;&lt; /slot&gt;</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h2 v-else-if="size === 2"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot&gt;&lt; /</span>slot&gt;</span><br><span class="line">  &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h3 v-else-if="size === 3"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot&gt;&lt; /</span>slot&gt;</span><br><span class="line">  &lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h4 v-else-if="size === 4"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot&gt;&lt; /</span>slot&gt;</span><br><span class="line">  &lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h5 v-else-if="size === 5"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class="line">  &lt;<span class="regexp">/h5&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h6 v-else-if="size === 6"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class="line">  &lt;<span class="regexp">/h6&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'anchored-heading'</span>, &#123;</span><br><span class="line">  template: <span class="string">'#titleSize-template'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    size: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时的组件根据prop取到的数据size值进行选择标签的类型，从而完成动态生成title-size标签的组件。但是这样的话是我们在template中定义不同的h1~h6的标签，然后再去根绝size的值来决定取得是哪个标签，这样的话在数据的处理上显得被动不灵活。并且用这种方式处理时，需要重复使用&lt; slot&gt;&lt; /slot&gt;来插入title-size的内容，反正总结起来就是低效。</p><h4 id="这个时候可以尝试render函数重写上面的例子"><a href="#这个时候可以尝试render函数重写上面的例子" class="headerlink" title="这个时候可以尝试render函数重写上面的例子"></a>这个时候可以尝试render函数重写上面的例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'anchored-heading'</span>, &#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(</span><br><span class="line">      <span class="string">'h'</span> + <span class="keyword">this</span>.size,   <span class="comment">// tag name 标签名称</span></span><br><span class="line">      <span class="keyword">this</span>.$slots.default <span class="comment">// 子组件中的阵列</span></span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    size: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="此时就显得很灵活，直接根据传入的size值进行创建对应的标签，并且也不需要再写那么多冗长的代码了。"><a href="#此时就显得很灵活，直接根据传入的size值进行创建对应的标签，并且也不需要再写那么多冗长的代码了。" class="headerlink" title="此时就显得很灵活，直接根据传入的size值进行创建对应的标签，并且也不需要再写那么多冗长的代码了。"></a>此时就显得很灵活，直接根据传入的size值进行创建对应的标签，并且也不需要再写那么多冗长的代码了。</h4><p>注释： this.$slots.default对用 template的<slot>的使用没有name（作用相当于以上例子中的slot标签）</slot></p><h3 id="节点、树以及虚拟-DOM"><a href="#节点、树以及虚拟-DOM" class="headerlink" title="节点、树以及虚拟 DOM"></a>节点、树以及虚拟 DOM</h3><p>深入渲染函数之前，我们需要了解一些浏览器的工作原理，当浏览器读html代码时，它会建立一个“DOM 节点”树来保持追踪。每个元素都是一个节点。每片文字也是一个节点。甚至注释也都是节点。一个节点就是页面的一个部分。就像家谱树一样，每个节点都可以有孩子节点 (也就是说每个部分可以包含其它的一些部分)。js的运行速度是很快的，但是dom的渲染确实很慢的，往往是影响性能的一个重要因素。</p><h4 id="但是vue是数据驱动的，不需要我们去手动更新节点。只需要告诉-Vue-你希望页面上的-HTML-是什么"><a href="#但是vue是数据驱动的，不需要我们去手动更新节点。只需要告诉-Vue-你希望页面上的-HTML-是什么" class="headerlink" title="但是vue是数据驱动的，不需要我们去手动更新节点。只需要告诉 Vue 你希望页面上的 HTML 是什么"></a>但是vue是数据驱动的，不需要我们去手动更新节点。只需要告诉 Vue 你希望页面上的 HTML 是什么</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; testData &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">'h1'</span>, <span class="keyword">this</span>.testData)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当数据发生改变时，页面的dom都会被及时高效的去渲染，而不需要自己去做其他的处理。</p><h4 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h4><p>Vue 通过建立一个虚拟 DOM 对真实 DOM 发生的变化保持追踪。可以做个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> createElement(<span class="string">'h1'</span>, <span class="keyword">this</span>.testData)</span><br></pre></td></tr></table></figure><p>createElement 返回的是什么呢？其实不是一个实际的 DOM 元素。它更准确的名字可能是 createNodeDescription，因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，及其子节点。我们把这样的节点描述为“虚拟节点 (Virtual Node)”，也常简写它为“VNode”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。</p><h4 id="createElement-参数"><a href="#createElement-参数" class="headerlink" title="createElement 参数"></a>createElement 参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @returns &#123;VNode&#125; 返回的是一个描述对象它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点</span></span><br><span class="line">createElement(</span><br><span class="line">  <span class="comment">// &#123;String | Object | Function&#125; </span></span><br><span class="line">  <span class="comment">// 一个 HTML 标签字符串，组件选项对象，或者</span></span><br><span class="line">  <span class="comment">// 解析上述任何一种的一个 async 异步函数，必要参数。</span></span><br><span class="line">  <span class="string">'div'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;Object&#125;</span></span><br><span class="line">  <span class="comment">// 一个包含模板相关属性的数据对象</span></span><br><span class="line">  <span class="comment">// 这样，可以在 template 中使用这些属性。可选参数。</span></span><br><span class="line">  &#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;String | Array&#125;</span></span><br><span class="line">  <span class="comment">// 子节点 (VNodes)，由 `createElement()` 构建而成，</span></span><br><span class="line">  <span class="comment">// 或使用字符串来生成“文本节点”。可选参数。</span></span><br><span class="line">  [</span><br><span class="line">    <span class="string">'先写一些文字'</span>,</span><br><span class="line">    createElement(<span class="string">'h1'</span>, <span class="string">'一条数据'</span>),</span><br><span class="line">    createElement(MyComponent, &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        someProp: <span class="string">'foobar'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="深入-data-对象"><a href="#深入-data-对象" class="headerlink" title="深入 data 对象"></a>深入 data 对象</h4><p>在使用data时要注意：在模板语法中，v-bind:class 和 v-bind:style ，会被特别对待一样，在 VNode 数据对象中，下列属性名是级别最高的字段。该对象也允许你绑定普通的 HTML 特性，就像 DOM 属性一样，比如 innerHTML (这会取代 v-html 指令)。（此处的官方文档写的很全了，就直接拿过来了）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 和`v-bind:class`一样的 API</span></span><br><span class="line">  <span class="string">'class'</span>: &#123;</span><br><span class="line">    foo: <span class="literal">true</span>,</span><br><span class="line">    bar: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 和`v-bind:style`一样的 API</span></span><br><span class="line">  style: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'14px'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 正常的 HTML 特性</span></span><br><span class="line">  attrs: &#123;</span><br><span class="line">    id: <span class="string">'foo'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 组件 props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    myProp: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// DOM 属性</span></span><br><span class="line">  domProps: &#123;</span><br><span class="line">    innerHTML: <span class="string">'baz'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件监听器基于 `on`</span></span><br><span class="line">  <span class="comment">// 所以不再支持如 `v-on:keyup.enter` 修饰器</span></span><br><span class="line">  <span class="comment">// 需要手动匹配 keyCode。</span></span><br><span class="line">  on: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.clickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 仅对于组件，用于监听原生事件，而不是组件内部使用</span></span><br><span class="line">  <span class="comment">// `vm.$emit` 触发的事件。</span></span><br><span class="line">  nativeOn: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.nativeClickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义指令。注意，你无法对 `binding` 中的 `oldValue`</span></span><br><span class="line">  <span class="comment">// 赋值，因为 Vue 已经自动为你进行了同步。</span></span><br><span class="line">  directives: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'my-custom-directive'</span>,</span><br><span class="line">      value: <span class="string">'2'</span>,</span><br><span class="line">      expression: <span class="string">'1 + 1'</span>,</span><br><span class="line">      arg: <span class="string">'foo'</span>,</span><br><span class="line">      modifiers: &#123;</span><br><span class="line">        bar: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// Scoped slots in the form of</span></span><br><span class="line">  <span class="comment">// &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">  scopedSlots: &#123;</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> createElement(<span class="string">'span'</span>, props.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果组件是其他组件的子组件，需为插槽指定名称</span></span><br><span class="line">  slot: <span class="string">'name-of-slot'</span>,</span><br><span class="line">  <span class="comment">// 其他特殊顶层属性</span></span><br><span class="line">  key: <span class="string">'myKey'</span>,</span><br><span class="line">  ref: <span class="string">'myRef'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="！注意：VNodes-必须唯一"><a href="#！注意：VNodes-必须唯一" class="headerlink" title="！注意：VNodes 必须唯一"></a>！注意：VNodes 必须唯一</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;在Vue中，我们都是绝大部分都是使用template来创建html-框架给予了很好的支持，使用起来也很方便，符合常规的编程方式。但是在一些特殊的场景需要有特殊的判断时，使用template显得会低效率，并且代码的可读性也不高。此时我们可以用到render函数，使用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue.js可复用性</title>
    <link href="https://itlinnnn.github.io/linhui.github.io/Vue-js%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7/"/>
    <id>https://itlinnnn.github.io/linhui.github.io/Vue-js可复用性/</id>
    <published>2018-04-14T15:54:51.000Z</published>
    <updated>2018-06-29T11:00:54.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="混入（mixins）"><a href="#混入（mixins）" class="headerlink" title="混入（mixins）"></a>混入（mixins）</h2><p>在实际的应用中，有很多的业务代码是可以重复使用的，vue.js本身是一个注重于高效率的框架，所以也提供了组件中的复用功能。混入 (mixins) 是一种分发 Vue组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个混入对象</span></span><br><span class="line"><span class="keyword">var</span> mixinTest = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mixinMethod()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    mixinMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'mixinMethod from mixin!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个使用混入对象的组件</span></span><br><span class="line"><span class="keyword">var</span> Component = Vue.extend(&#123;</span><br><span class="line">  mixins: [mixinMethod]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> Component() <span class="comment">// =&gt; "hello from mixin!"</span></span><br></pre></td></tr></table></figure><h3 id="组件和混入对象含有同名选项时"><a href="#组件和混入对象含有同名选项时" class="headerlink" title="组件和混入对象含有同名选项时"></a>组件和混入对象含有同名选项时</h3><p> 从中可以发现当组件混入对象时，对象的方法以及钩子都被混入了该组件的本身。这种方式是很灵活的。那要是组件和混入对象含有同名选项时，也是有规则的，比如，当数据上和组件有同名时，以组件的数据为先。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      testA: <span class="string">'aaaa'</span>,</span><br><span class="line">      testB: <span class="string">'bbbb'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  mixins: [mixin],</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      testA: <span class="string">'AAAA'</span>,</span><br><span class="line">      testC: <span class="string">'CCCC'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data)</span><br><span class="line">    <span class="comment">// =&gt; &#123; testA: "AAAA", testB: "bbbb", testC: "CCCC" &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>mixins对象里的testA和testB混入到了组件中的data中，同时出现了testA与组件同名，所以优先保留了组件的数据。</p><h3 id="混入对象与组件具有同名钩子函数时"><a href="#混入对象与组件具有同名钩子函数时" class="headerlink" title="混入对象与组件具有同名钩子函数时"></a>混入对象与组件具有同名钩子函数时</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'混入对象的钩子'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  mixins: [mixin],</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'组件的钩子'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; "混入对象的钩子"</span></span><br><span class="line"><span class="comment">// =&gt; "组件的钩子"</span></span><br></pre></td></tr></table></figure><p>可以发现混入对象的钩子和组件的钩子都会执行，但是会先执行混入对象的钩子</p><h4 id="值为对象的选项时，例如：methods，components等的时候"><a href="#值为对象的选项时，例如：methods，components等的时候" class="headerlink" title="值为对象的选项时，例如：methods，components等的时候"></a>值为对象的选项时，例如：methods，components等的时候</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    mixinsMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'mixinsMethod'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    sameMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'from mixin'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  mixins: [mixin],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    selfMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'selfMethod'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    sameMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'from self'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.mixinsMethod() <span class="comment">// =&gt; "mixinsMethod"</span></span><br><span class="line">vm.selfMethod() <span class="comment">// =&gt; "selfMethod"</span></span><br><span class="line">vm.sameMethod() <span class="comment">// =&gt; "from self"</span></span><br></pre></td></tr></table></figure><p>由上可得，在值为对象的混入对象混入时，这些将和组件原有的选项混合一起成为一个对象，当对象的键名与组件的键名出现重复时，会使用组件的键名。</p><h4 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h4><p>以上列举的都是单独的引入到某一个组件中使用。也可以全局注册混入对象。这样的话所有的实例就都会被混入的对象所作用。也可以根据自己需要做成一个具体的使用工具类。供全局所有的实例使用。不过也要小心使用，毕竟会影响到所有的组件，需要结合实际场景使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> option = <span class="keyword">this</span>.$options.text</span><br><span class="line">    <span class="keyword">if</span> (option) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(option)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  text: <span class="string">'globalMixins!'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; "globalMixins!"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;混入（mixins）&quot;&gt;&lt;a href=&quot;#混入（mixins）&quot; class=&quot;headerlink&quot; title=&quot;混入（mixins）&quot;&gt;&lt;/a&gt;混入（mixins）&lt;/h2&gt;&lt;p&gt;在实际的应用中，有很多的业务代码是可以重复使用的，vue.js本身是一个注重
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue的内容分发slot的使用</title>
    <link href="https://itlinnnn.github.io/linhui.github.io/Vue%E7%9A%84%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91slot%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://itlinnnn.github.io/linhui.github.io/Vue的内容分发slot的使用/</id>
    <published>2018-04-14T15:48:31.000Z</published>
    <updated>2018-06-29T11:08:09.187Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是内容分发？"><a href="#什么是内容分发？" class="headerlink" title="什么是内容分发？?"></a>什么是内容分发？?</h3><p>概括：将父组件的内容放到子组件指定的位置</p><h4 id="场景：在使用组件时，我们常常需要像这样组合使用"><a href="#场景：在使用组件时，我们常常需要像这样组合使用" class="headerlink" title="场景：在使用组件时，我们常常需要像这样组合使用"></a>场景：在使用组件时，我们常常需要像这样组合使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;app&gt;</span><br><span class="line">  &lt;app-header&gt;&lt;/app-header&gt;</span><br><span class="line">  &lt;app-footer&gt;&lt;/app-footer&gt;</span><br><span class="line">&lt;/app&gt;</span><br></pre></td></tr></table></figure><p>此时有两个点需要注意：</p><ul><li><p>&lt; app&gt; 组件不确定自己所接收的数据。这是由使用 &lt; app&gt; 的父组件所决定的。</p></li><li><p>&lt; app&gt; 作为一个组件使用，可能有自己的模板。 </p></li></ul><h5 id="所以为了让组件可以很好的组合使用，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为内容分发，也就是将父组件的内容放到子组件的指定位置。"><a href="#所以为了让组件可以很好的组合使用，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为内容分发，也就是将父组件的内容放到子组件的指定位置。" class="headerlink" title="所以为了让组件可以很好的组合使用，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为内容分发，也就是将父组件的内容放到子组件的指定位置。"></a>所以为了让组件可以很好的组合使用，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为内容分发，也就是将父组件的内容放到子组件的指定位置。</h5><ol><li>先了解一下 ‘编译作用域’ 的概念 : 父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译!例如：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;child-component&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/child-component&gt;</span></span><br></pre></td></tr></table></figure><p>此时的message应该绑定的是父组件的数据还是子组件的数据？答案是父组件，这就是编译作用域。再看一个很容易犯错误的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//childProperty是子组件中的属性，此时的代码不会如我们预期生效。父组件模版不能取到子组件中的状态</span></span><br><span class="line">&lt;child-component v-show=<span class="string">"childProperty"</span>&gt;&lt;/child-component&gt;</span><br></pre></td></tr></table></figure><p>根据编译作用域，此时正确的做法应该是在子组件模版中进行操作，绑定到相对应的节点中，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'child-component'</span>, &#123;</span><br><span class="line">  <span class="comment">// 有效，因为是在正确的作用域内</span></span><br><span class="line">  template: <span class="string">'&lt;div v-show="childProperty"&gt;Child&lt;/div&gt;'</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      childProperty: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="单个插槽"><a href="#单个插槽" class="headerlink" title="单个插槽"></a>单个插槽</h3><h4 id="场景：-当在父组件模版中使用子组件时，父组件的内容将会被丢弃，如下子组件child-component："><a href="#场景：-当在父组件模版中使用子组件时，父组件的内容将会被丢弃，如下子组件child-component：" class="headerlink" title="场景： 当在父组件模版中使用子组件时，父组件的内容将会被丢弃，如下子组件child-component："></a>场景： 当在父组件模版中使用子组件时，父组件的内容将会被丢弃，如下子组件child-component：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;我是子组件的标题&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>父组件模板:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h1&gt;我是父组件的标题&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;child-component&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;这是一些初始内容&lt;/</span>p&gt;</span><br><span class="line">    &lt;p&gt;这是更多的初始内容&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>child-component&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>此时的渲染结果为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h1&gt;我是父组件的标题&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h2&gt;我是子组件的标题&lt;/</span>h2&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>此时父组件里面的内容就会被替换，此时的解决方法是可以使用slot单个插槽，例如在上面的子组件child-component中:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;我是子组件的标题&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">  &lt;slot&gt;</span></span><br><span class="line"><span class="regexp">   在没有要分发的内容时才会显示。</span></span><br><span class="line"><span class="regexp">  &lt;/</span>solt&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>此时的渲染结果就是 ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h1&gt;我是父组件的标题&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h2&gt;我是子组件的标题&lt; /</span>h2&gt;</span><br><span class="line">     &lt;p&gt;这是一些初始内容&lt; <span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;这是更多的初始内容&lt; /</span>p&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>此时的父组件的内容不会被丢弃。子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 DOM 位置，并替换掉插槽标签本身。<br>最初在 <slot> 标签中的任何内容都被视为备用内容。备用内容在子组件的作用域内编译，并且只有在宿主元素为空，且没有要插入的内容时才显示备用内容。</slot></p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p><slot> 元素可以用一个特殊的特性 name 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 slot 特性的元素。仍然可以有一个匿名插槽，它是默认插槽，作为找不到匹配的内容片段的备用插槽。如果没有默认插槽，这些找不到匹配的内容片段将被抛弃。如下一个child-layout：</slot></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;slot name=<span class="string">"header"</span>&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">  &lt;main&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class="line">  &lt;<span class="regexp">/main&gt;</span></span><br><span class="line"><span class="regexp">  &lt;footer&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot name="footer"&gt;&lt;/</span>slot&gt;</span><br><span class="line">  &lt;<span class="regexp">/footer&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>父组件模板</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;child-layout&gt;</span><br><span class="line">  &lt;h1 slot=<span class="string">"header"</span>&gt;页面标题&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;主要内容&lt; /</span>p&gt;</span><br><span class="line">  &lt;p slot=<span class="string">"footer"</span>&gt;一些信息&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>child-layout&gt;</span><br></pre></td></tr></table></figure><p>此时的渲染结果为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;h1&gt;页面标题&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;p&gt;主要内容。&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/m</span>ain&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;p&gt;一些信息&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>footer&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>由于使用了具名插槽，也就是使用了slot的name属性，使得父组件的内容被插到了子组件的指定位置。由于在子组件的main中使用了匿名slot,所以在父组件的模版中的p标签也没有用name属性，所以就行默认配对，如果此时没有匿名slot那么p标签的内容将会被抛弃。</p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>作用域插槽是一种特殊类型的插槽，用作一个 (能被传递数据的) 可重用模板，来代替已经渲染好的元素。在子组件中，只需将数据传递到插槽，就像你将 prop 传递给组件一样,例如在子组件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"child"</span>&gt;</span><br><span class="line">  &lt;slot data=<span class="string">"data from child"</span>&gt;&lt;/slot&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>此时在父组件模版中，必须要有&lt; template &gt;元素存在，并且要使用特殊属性slot-scope，以此表示它是作用域插槽的模板。slot-scope 的值将被用作一个临时变量名，此变量接收从子组件传递过来的 prop 对象，比如现在有父组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">  &lt;child&gt;</span><br><span class="line">    &lt;template slot-scope=<span class="string">"props"</span>&gt;</span><br><span class="line">      &lt;span&gt;data <span class="keyword">from</span> parent&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span&gt;&#123;&#123; props.data &#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>child&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>此时渲染的结果是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"child"</span>&gt;</span><br><span class="line">    &lt;span&gt;data <span class="keyword">from</span> parent&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;data from child&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是内容分发？&quot;&gt;&lt;a href=&quot;#什么是内容分发？&quot; class=&quot;headerlink&quot; title=&quot;什么是内容分发？?&quot;&gt;&lt;/a&gt;什么是内容分发？?&lt;/h3&gt;&lt;p&gt;概括：将父组件的内容放到子组件指定的位置&lt;/p&gt;
&lt;h4 id=&quot;场景：在使用组件时，我
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue组件间的通信</title>
    <link href="https://itlinnnn.github.io/linhui.github.io/vue%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>https://itlinnnn.github.io/linhui.github.io/vue组件间的通信/</id>
    <published>2018-04-07T15:21:28.000Z</published>
    <updated>2018-06-29T11:16:57.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件间的数据传递"><a href="#组件间的数据传递" class="headerlink" title="组件间的数据传递"></a>组件间的数据传递</h2><hr><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于组件实例的作用域是单独的。所以就不能在一个组件中直接引用另一个组件中的数据，但是在一个项目中数据的处理往往是很频繁的，并且组件设计初衷就是要配合使用的，通过组件间的关联，来更加高效的处理一些问题。所以，简单的介绍一下组件组合后组件间互相通信的方式</p><h2 id="1-父组件-—-gt-子组件（prop）"><a href="#1-父组件-—-gt-子组件（prop）" class="headerlink" title="1.父组件 —-&gt; 子组件（prop）"></a>1.父组件 —-&gt; 子组件（prop）</h2><h3 id="使用-Prop传递数据"><a href="#使用-Prop传递数据" class="headerlink" title="使用 Prop传递数据"></a>使用 Prop传递数据</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;组件的孤立作用域，使得子组件的模板内不能直接引用父组件的数据，在这里可以通过prop进行下发,例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> child = &#123;</span><br><span class="line">  <span class="comment">// 声明 props</span></span><br><span class="line">  props: [<span class="string">'message'</span>],</span><br><span class="line">  <span class="comment">// 就像 data 一样，prop 也可以在模板中使用</span></span><br><span class="line">  template: <span class="string">'&lt;div&gt;&#123;&#123;message&#125;&#125;我是一个子组件!&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   components: &#123;</span><br><span class="line">    <span class="string">'children-componment'</span>: child</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过向组件传入一个字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;children-componment message=<span class="string">"hello"</span> &gt;&lt; /children-componment&gt;</span><br></pre></td></tr></table></figure><p>在此处子组件 children-componment显式地用 props 选项声明预期的数据，在使用时又传入字符串，则可将数据下发到子组件中</p><h3 id="动态-Prop"><a href="#动态-Prop" class="headerlink" title="动态 Prop"></a>动态 Prop</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;往往我们需要子组件来实时的跟踪父组件的数据变化，以做及时的关联处理。此时可以用 v-bind 来动态地将 prop 绑定到父组件的数据。所以每当父组件的数据变化时，该变化也会传导给子组件，可以跟着一起变化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hello"</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">     &lt;input v-model = "parentMsg"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;br&gt;</span></span><br><span class="line"><span class="regexp">     &lt;children-componment :my-message="parentMsg" &gt;&lt;/</span>children-componment&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"><span class="keyword">var</span> child = &#123;</span><br><span class="line">  <span class="comment">// 声明 props</span></span><br><span class="line">  props: [<span class="string">'myMessage'</span>],</span><br><span class="line">  <span class="comment">// 就像 data 一样，prop 也可以在模板中使用</span></span><br><span class="line">  template: <span class="string">'&lt;div&gt; &#123;&#123;myMessage&#125;&#125; 我是一个子组件!&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   components: &#123;</span><br><span class="line">    <span class="string">'children-componment'</span>: child</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'Welcome to Your Vue.js App'</span>,</span><br><span class="line">      parentMsg: <span class="string">'Message from parent'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此时的输入框input是存在于父组件，通过v-model绑定parentMsg,并且将值传递给子组件&lt; children-componment&gt;&lt; /children-componment&gt;，此时的子组件接收的值也是随着父组件的变化而动态改变的。</p><h4 id="单向数据流（数据传递过程中需要解决的问题）"><a href="#单向数据流（数据传递过程中需要解决的问题）" class="headerlink" title="单向数据流（数据传递过程中需要解决的问题）"></a>单向数据流（数据传递过程中需要解决的问题）</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prop 可以实现从父组件到子组件的数据传递，但是同时也要注意，prop是单向绑定的。这也就是意味着当父组件的属性变化时，将传导给子组件，但是当子组件发生改变时却不会反馈给父组件。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。<br>另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。所以存在着两个容易出错的场景：</p><ul><li>Prop 作为初始值传入后，子组件想把它当作局部数据来用</li></ul><p>解决方法 (定义一个局部变量，并用 prop 的值初始化这个局部变量：)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'myMessage'</span>],</span><br><span class="line"><span class="comment">// 就像 data 一样，prop 也可以在模板中使用</span></span><br><span class="line">template: <span class="string">'&lt; div&gt; &#123;&#123;variable&#125;&#125; 我是一个子组件!&lt; /div&gt;'</span>,</span><br><span class="line"> data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; </span><br><span class="line">    variable: <span class="keyword">this</span>.myMessage</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Prop 作为原始数据传入，由子组件处理成其它数据输出</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'param'</span>],</span><br><span class="line">computed: &#123;</span><br><span class="line"><span class="comment">//handleParam为处理过可使用的数据</span></span><br><span class="line">  handleParam: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.param+<span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>！！！注：不能在子组件内部改变 prop</p><h2 id="2-子组件-—-gt-父组件（绑定自定义事件）"><a href="#2-子组件-—-gt-父组件（绑定自定义事件）" class="headerlink" title="2.子组件 —-&gt; 父组件（绑定自定义事件）"></a>2.子组件 —-&gt; 父组件（绑定自定义事件）</h2><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><p>子组件向父组件传递数据使用Vue 的自定义事件系统实现，每个 Vue 实例实现的事件接口：</p><ul><li><p>使用 $on(eventName) 监听事件</p></li><li><p>使用 $emit(eventName, optionalPayload) 触发事件</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处跟着官方文档的例子来梳理一遍</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">   &lt;h1&gt;&#123;&#123;total&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">   /</span><span class="regexp">/3.组件监听到'increment'事件，并且执行'incrementTotal'方法，改变父组件中的total的值</span></span><br><span class="line"><span class="regexp">   &lt;children-componment v-on:increment="incrementTotal"&gt;+&lt;/</span>children-componment&gt;</span><br><span class="line">   &lt;children-componment v-on:increment=<span class="string">"incrementTotal"</span>&gt;+&lt;/children-componment&gt;</span><br><span class="line">  &lt; /div&gt;</span><br><span class="line">  &lt; <span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> child = &#123;</span><br><span class="line"><span class="comment">//1.当子组件的按钮按下时执行incrementCounter方法</span></span><br><span class="line">  template: <span class="string">'&lt;button v-on:click="incrementCounter"&gt;子组件&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          counter: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="number">2.</span>执行方法，将counter的值加<span class="number">1</span>，并且触发了一个<span class="string">'increment'</span>的事件</span><br><span class="line">    incrementCounter: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.counter += <span class="number">1</span></span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      total: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;    </span><br><span class="line">    incrementTotal: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.total += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'children-componment'</span>: child</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件件向父组件传递数据的过程如上注释所标的序号所示：<br></p><ul><li><p>1.当子组件的按钮按下时执行incrementCounter方法</p></li><li><p>2.执行incrementCounter方法，将counter的值加1，并且触发了一个’increment’的事件 </p></li><li><p>3.组件监听到’increment’事件，并且执行’incrementTotal’方法，改变父组件中的total的值</p></li></ul><h4 id="如何使用载荷-payload-数据，就在刚刚的例子中稍加修改："><a href="#如何使用载荷-payload-数据，就在刚刚的例子中稍加修改：" class="headerlink" title="如何使用载荷 (payload) 数据，就在刚刚的例子中稍加修改："></a>如何使用载荷 (payload) 数据，就在刚刚的例子中稍加修改：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> child = &#123;</span><br><span class="line">  template: <span class="string">'&lt; button v-on:click="incrementCounter"&gt;子组件&#123;&#123; counter &#125;&#125;&lt; /button&gt;'</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          counter: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    incrementCounter: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.counter += <span class="number">1</span></span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>,&#123;<span class="attr">number</span>:<span class="number">3</span>&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      total: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;    </span><br><span class="line">    incrementTotal: <span class="function"><span class="keyword">function</span> (<span class="params">payload</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.total += payload.number</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'children-componment'</span>: child</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>此时点击一次按钮时，total就是加3，3即为传过来的payload的数据</p><h2 id="3-非父子组件的数据传递-（bus总线）"><a href="#3-非父子组件的数据传递-（bus总线）" class="headerlink" title="3.非父子组件的数据传递 （bus总线）"></a>3.非父子组件的数据传递 （bus总线）</h2><p>非父子组件之间也需要有数据的传递，此时可以使用空的vue实例bus总线</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发组件 A 中的事件</span></span><br><span class="line">bus.$emit(<span class="string">'selected'</span>)</span><br><span class="line"><span class="comment">// 在组件 B 中监听事件</span></span><br><span class="line">bus.$on(<span class="string">'selected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>简单的数据交互可以使用bus总线的方法，但是在较为复杂的情境下<br>，会使用vuex状态管理来实现。这个会在后续的学习中进一步深入了解，并作分享。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组件间的数据传递&quot;&gt;&lt;a href=&quot;#组件间的数据传递&quot; class=&quot;headerlink&quot; title=&quot;组件间的数据传递&quot;&gt;&lt;/a&gt;组件间的数据传递&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbs
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue的组件的概念与基本使用</title>
    <link href="https://itlinnnn.github.io/linhui.github.io/Vue%E7%9A%84%E7%BB%84%E4%BB%B6%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://itlinnnn.github.io/linhui.github.io/Vue的组件的概念与基本使用/</id>
    <published>2018-04-07T02:41:25.000Z</published>
    <updated>2018-06-29T11:13:45.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是vue的组件（what）"><a href="#什么是vue的组件（what）" class="headerlink" title="什么是vue的组件（what）?"></a>什么是vue的组件（what）?</h3><hr><p>&nbsp;&nbsp;组件(Component)是vue.js中很强大的一个功能，可以将一些可重用的代码进行封重用。所有的 Vue 组件同时也是 Vue 的实例，可以接受使用相同的选项对象和提供相同的生命周期钩子。<br> 一句话概括：组件就是可以扩展HTML元素，封装可重用的HTML代码，可以将组件看作自定义的HTML元素。</p><h3 id="如何使用组件（how）"><a href="#如何使用组件（how）" class="headerlink" title="如何使用组件（how）?"></a>如何使用组件（how）?</h3><hr><ul><li>前提条件: 使用组件名的时候是需要先实例化Vue的，因为组件现在是扩展在Vue中，想使用Vue中的组件就需要先实例化获得这个组件才能够使用</li></ul><ol><li>创建组件<br>创建组件即在Vue构造函数中通过extend()方法添加该组件（ps：可以理解成在刚开学的时候，老师不认识你，但是知道有泡泡这个人）</li><li>注册组件<br>注册组件即在Vue构造函数中通过一个属性名与之关联在一起，有点像var name=’paopao’;这个时候 temp就是泡泡了（ps：这个时候老师把花名册上的’泡泡’和人对应起来了）<br>组件的注册可分为全局注册与局部注册，区别：注册的地方不一致；全局注册就是只要是实例化Vue的范围都可以使用该组件，局部注册就是只能在某一个Vue实例的范围内使用该组件</li></ol><ul><li>全局注册（使用 Vue.component(tagName, options)）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用组件</span></span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">     &lt;my-component&gt;&lt;/my-component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"><span class="comment">//确保在初始化根实例之前注册组件</span></span><br><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt; component test! &lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最终渲染为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;div&gt;component test!&lt;/div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>局部注册</li></ul><p>每个组件都注册到全局的方式显然很不合理，更多的时候采用的往往是局部注册的方式。可以通过某个 Vue 实例/组件的实例选项 components 注册仅在其作用域中可用的组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;一个局部注册的组件!&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">  <span class="comment">// &lt; localRegistration&gt;  只在父组件模板中才可用</span></span><br><span class="line">    <span class="string">'localRegistration'</span>: Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>使用组件</li></ol><p>这个时候就可以在dom中添加所创建的组件名（这个时候你终于可以以’泡泡’的名义去做点什么事了，比如上课，去图书馆等）</p><h3 id="Dom模版解析事项"><a href="#Dom模版解析事项" class="headerlink" title="Dom模版解析事项"></a>Dom模版解析事项</h3><hr><p>&nbsp;&nbsp; 当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。要特别注意的是，像 &lt; ul&gt;、&lt; ol&gt;、&lt; table&gt;、&lt; select&gt; 这样的元素里允许包含的元素有限制，而另一些像 &lt; option&gt; 这样的元素只能出现在某些特定元素的内部。</p><p>例如(&lt; my-row&gt;为自定义的组件)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;my-row&gt;&lt;/my-row&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p><p>此时的自定义组件 &lt; my-row&gt; 被当作无效的内容，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。而此时的table标签还没有被解析，所以在往里面放入自定义组件的时候会导致错误的渲染结果。此时的解决方法是可以使用特殊的 is 特性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr is=<span class="string">"my-row"</span>&gt;&lt;/tr&gt;</span><br><span class="line">&lt;<span class="regexp">/table&gt;</span></span><br></pre></td></tr></table></figure><p> !!! 如果使用来自以下来源之一的字符串模板，则没有此限制:</p><ul><li><p>&lt; script type=”text/x-template”&gt;</p></li><li><p>JavaScript 内联模板字符串 (通过内联的方式使其一同进行加载)</p></li><li><p>.vue 组件</p><p>例如：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components:&#123;</span><br><span class="line">    <span class="string">'selectcomp'</span>:&#123;</span><br><span class="line">      template: <span class="string">' &lt;select&gt; &lt;optioncomp&gt;&lt;/optioncomp&gt;&lt;/select&gt;'</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h3 id="Vue-实例时传入的选项中data-必须是函数"><a href="#Vue-实例时传入的选项中data-必须是函数" class="headerlink" title="Vue 实例时传入的选项中data 必须是函数"></a>Vue 实例时传入的选项中data 必须是函数</h3><hr><p>如果这样的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  msg: <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将会报错：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Vue 会停止运行，并在控制台发出警告，告诉你在组件实例中 data 必须是一个函数。</span></span><br><span class="line"> [HMR] Waiting <span class="keyword">for</span> update signal <span class="keyword">from</span> WDS...</span><br><span class="line">vue.esm.js?efeb:<span class="number">591</span> [Vue warn]: The <span class="string">"data"</span> option should be a <span class="function"><span class="keyword">function</span> <span class="title">that</span> </span></span><br><span class="line"><span class="function"><span class="title">returns</span> <span class="title">a</span> <span class="title">per</span>-<span class="title">instance</span> <span class="title">value</span> <span class="title">in</span> <span class="title">component</span> <span class="title">definitions</span>.</span></span><br></pre></td></tr></table></figure></p><p>举个例子来对比一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt; div id=<span class="string">"example"</span>&gt;</span><br><span class="line">  &lt;simple-counter&gt;&lt;/simple-counter&gt;</span><br><span class="line">  &lt;simple-counter&gt;&lt;/simple-counter&gt;</span><br><span class="line">  &lt;simple-counter&gt;&lt;/simple-counter&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;</span><br><span class="line">Vue.component(<span class="string">'simple-counter'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt; button v-on:click="counter += 1"&gt;&#123;&#123; counter &#125;&#125;&lt; /button&gt;'</span>,</span><br><span class="line">  <span class="comment">// data 的确是一个函数了，因此 Vue 不会警告，</span></span><br><span class="line">  <span class="comment">// 但是我们却给每个组件实例返回了同一个对象的引用(此处是为了做对比)</span></span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 现在的结果是有三个可以计数的按钮，但是不论点击的是哪一个，所有的按钮的所记数都会加1，因为每个组件实例返回的是同一个对象的引用，不论哪个按钮的对数据进行操作，都会影响到其他的按钮组件计数结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将其data的格式写成如下，此时每个 counter 都有自己内部的状态了，都是独立存在的，</span></span><br><span class="line">每个组件返回的都是全新的数据对象：</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是vue的组件（what）&quot;&gt;&lt;a href=&quot;#什么是vue的组件（what）&quot; class=&quot;headerlink&quot; title=&quot;什么是vue的组件（what）?&quot;&gt;&lt;/a&gt;什么是vue的组件（what）?&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>时间、时间戳、带格式时间的转换</title>
    <link href="https://itlinnnn.github.io/linhui.github.io/%E6%97%B6%E9%97%B4%E3%80%81%E6%97%B6%E9%97%B4%E6%88%B3%E3%80%81%E5%B8%A6%E6%A0%BC%E5%BC%8F%E6%97%B6%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://itlinnnn.github.io/linhui.github.io/时间、时间戳、带格式时间的转换/</id>
    <published>2018-04-07T02:40:16.000Z</published>
    <updated>2018-06-29T11:18:04.381Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近正好在工作中遇到一些有关处理时间的问题，就整理了一下关于时间转化的问题，很基础，但相信都会接触的到的"><a href="#最近正好在工作中遇到一些有关处理时间的问题，就整理了一下关于时间转化的问题，很基础，但相信都会接触的到的" class="headerlink" title="最近正好在工作中遇到一些有关处理时间的问题，就整理了一下关于时间转化的问题，很基础，但相信都会接触的到的"></a>最近正好在工作中遇到一些有关处理时间的问题，就整理了一下关于时间转化的问题，很基础，但相信都会接触的到的</h4><ol><li><p>时间转换成时间戳</p><p>获取时间</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="comment">//输出：Sat Mar 24 2018 18:22:00 GMT+0800 (CST) (中国标准时间)</span></span><br></pre></td></tr></table></figure><ul><li>转换：四种方法（不推荐第一种方法，因为毫秒级别会被转化为000）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date1 = <span class="built_in">Date</span>.parse(date);<span class="comment">//毫秒级别的数值被转化为000</span></span><br><span class="line"><span class="built_in">console</span>.log(date1);</span><br><span class="line"><span class="comment">//输出:1521886920000</span></span><br><span class="line"><span class="keyword">let</span> date2 = date.valueOf();<span class="comment">//通过valueOf()函数返回指定对象的原始值获得准确的时间戳值</span></span><br><span class="line"><span class="built_in">console</span>.log(date2);</span><br><span class="line"><span class="comment">//输出:1521886920000</span></span><br><span class="line"><span class="keyword">let</span> date3 = date.getTime();<span class="comment">//通过原型方法直接获得当前时间的毫秒值，准确</span></span><br><span class="line"><span class="built_in">console</span>.log(date3);</span><br><span class="line"><span class="comment">//输出:1521886920000</span></span><br><span class="line"><span class="keyword">let</span> date4 = <span class="built_in">Number</span>(date);<span class="comment">//将时间转化为一个number类型的数值，即时间戳</span></span><br><span class="line"><span class="built_in">console</span>.log(date4);</span><br><span class="line"><span class="comment">//输出:1521886920000</span></span><br></pre></td></tr></table></figure><p>2.时间转换为带格式的时间<br>格式：yyyy-mm-dd</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> y = date.getFullYear();</span><br><span class="line">    <span class="keyword">var</span> m = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">'0'</span> + m : m;</span><br><span class="line">    <span class="keyword">var</span> d = date.getDate();</span><br><span class="line">    d = d &lt; <span class="number">10</span> ? (<span class="string">'0'</span> + d) : d;</span><br><span class="line">    <span class="keyword">return</span> y + <span class="string">'-'</span> + m + <span class="string">'-'</span> + d;<span class="comment">//这里可以写格式</span></span><br><span class="line">    <span class="comment">//输出：2018-03-24</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式：yyyy-mm-dd hh:mm:ss</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDateTime</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = date.getFullYear();</span><br><span class="line">    <span class="keyword">var</span> m = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">    m = m &lt; <span class="number">10</span> ? (<span class="string">'0'</span> + m) : m;</span><br><span class="line">    <span class="keyword">var</span> d = date.getDate();</span><br><span class="line">    d = d &lt; <span class="number">10</span> ? (<span class="string">'0'</span> + d) : d;</span><br><span class="line">    <span class="keyword">var</span> h = date.getHours();</span><br><span class="line">    h=h &lt; <span class="number">10</span> ? (<span class="string">'0'</span> + h) : h;</span><br><span class="line">    <span class="keyword">var</span> minute = date.getMinutes();</span><br><span class="line">    minute = minute &lt; <span class="number">10</span> ? (<span class="string">'0'</span> + minute) : minute;</span><br><span class="line">    <span class="keyword">var</span> second=date.getSeconds();</span><br><span class="line">    second=second &lt; <span class="number">10</span> ? (<span class="string">'0'</span> + second) : second;</span><br><span class="line">    <span class="keyword">return</span> y + <span class="string">'-'</span> + m + <span class="string">'-'</span> + d+<span class="string">' '</span>+h+<span class="string">':'</span>+minute+<span class="string">':'</span>+second;</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="comment">//输出：2018-03-24 18:41:16</span></span><br></pre></td></tr></table></figure><p>3.时间戳转换为带格式的时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date5 = <span class="keyword">new</span> <span class="built_in">Date</span>(date);<span class="comment">//直接用 new Date(时间戳) 格式转化获得时间</span></span><br><span class="line"><span class="built_in">console</span>.log(date5);</span><br><span class="line">formatDate(date5);<span class="comment">//直接调用上方的方法</span></span><br></pre></td></tr></table></figure><p>4.时间格式字符串转为时间戳（毫秒）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> time1=<span class="string">'2018-03-24 18:55:16'</span>;</span><br><span class="line"><span class="keyword">let</span> dateM=<span class="keyword">new</span> <span class="built_in">Date</span>(time1.replace(<span class="regexp">/-/g</span>, <span class="string">'/'</span>));  <span class="comment">//开始时间</span></span><br><span class="line"><span class="keyword">let</span> time2=dateM.getTime();</span><br><span class="line"><span class="built_in">console</span>.log(time2);</span><br><span class="line"><span class="comment">//输出：1521888916000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;最近正好在工作中遇到一些有关处理时间的问题，就整理了一下关于时间转化的问题，很基础，但相信都会接触的到的&quot;&gt;&lt;a href=&quot;#最近正好在工作中遇到一些有关处理时间的问题，就整理了一下关于时间转化的问题，很基础，但相信都会接触的到的&quot; class=&quot;headerl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>运用node实现简单爬虫</title>
    <link href="https://itlinnnn.github.io/linhui.github.io/%E8%BF%90%E7%94%A8node%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/"/>
    <id>https://itlinnnn.github.io/linhui.github.io/运用node实现简单爬虫/</id>
    <published>2018-04-07T02:37:18.000Z</published>
    <updated>2018-04-14T16:27:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>node.js的强大就无需再去重复了，越来越多的公司在使用node.js，还有一点不得不提的优势就是node用的是javascript的语言，对于前端开发工程师来说，没有理由不去get这一强大的技能。现在本人也是在学习阶段，结合自己做的一些demo进行总结。今天给大家分享一下用node.js实现一个简易的爬虫，希望能和大家一起交流探讨。</p><h3 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h3><p>当在浏览器中访问’<a href="http://localhost:3000&#39;的时候，可以以json的形式输出慕课网首页的" target="_blank" rel="noopener">http://localhost:3000&#39;的时候，可以以json的形式输出慕课网首页的</a> 部分热门课程（本人偶尔会去慕课网上看一些学习的视频）</p><p>步骤:</p><p>1.新建一个文件夹，进去之后’npm init’（这个命令的作用就是帮我们互动式地生成一份 最简单的package.json 文件，(<code>init</code> 是 <code>initialize</code> 的意思，初始化）当一路回车并且填写信息完毕后会出现一个package.json文件(首先需要在电脑上安装node.js)。</p><p>2.安装相应的依赖，在此例子中，需要用到的有cheerio，express，superagent。其中 express 是 Node.js 应用最广泛的 web 框架,建议大家有时间可以多去官网看看其API，所以现在开始安装依赖，通过命令cnpm i cheerio express superagent -S完成依赖的安装。安装完成后效果如下图：</p><p><img src="https://user-gold-cdn.xitu.io/2018/2/3/1615b791077f2d8a?w=1136&amp;h=606&amp;f=png&amp;s=137322" alt=""><br>此时就完成了依赖的安装，在package.json中的dependencies目录下会有刚刚安装的三个依赖</p><p>3.现在在文件夹里建一个js文件，比如取名为index.js,接下来就是在里面写代码，话不多说，直接上代码，在代码中也做了较为详细的注释。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"><span class="keyword">var</span> superagent = <span class="built_in">require</span>(<span class="string">'superagent'</span>);</span><br><span class="line"><span class="comment">// 调用 express 实例，它是一个函数，不带参数调用时，会返回一个 express 实例，将这个变量赋予 app 变量。</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="comment">// app 本身有很多方法，其中包括最常用的 get、post、put/patch、delete，在这里我们调用其中的 get 方法，为我们的 `/` 路径指定一个 handler 函数。</span></span><br><span class="line"><span class="comment">// 这个 handler 函数会接收 req 和 res 两个对象，他们分别是请求的 request 和 response。</span></span><br><span class="line"><span class="comment">// request 中包含了浏览器传来的各种信息，比如 query 啊，body 啊，headers 啊之类的，都可以通过 req 对象访问到。</span></span><br><span class="line"><span class="comment">// res 对象，我们一般不从里面取信息，而是通过它来定制我们向浏览器输出的信息，比如 header 信息，比如想要向浏览器输出的内容。</span></span><br><span class="line"><span class="comment">//这里我们调用了它的 #send 方法，向浏览器输出一个字符串。</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  superagent.get(<span class="string">'https://www.imooc.com/'</span>)</span><br><span class="line">    .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, sres</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// sres.text 里面存储着网页的 html 内容，将它传给 cheerio.load 之后</span></span><br><span class="line">      <span class="comment">// 就可以得到一个实现了 jquery 接口的变量，我们习惯性地将它命名为 `$`</span></span><br><span class="line">      <span class="comment">// 剩下就都是 jquery 的内容了</span></span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(sres.text);</span><br><span class="line">      <span class="keyword">var</span> items = [];</span><br><span class="line">      $(<span class="string">'.banner-course-card .clearfix'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">idx, element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $element = $(element);</span><br><span class="line">        items.push(&#123;</span><br><span class="line">          title: $element.attr(<span class="string">'title'</span>),</span><br><span class="line">          href: $element.attr(<span class="string">'href'</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      res.send(items);</span><br><span class="line">      <span class="comment">// 定义好我们 app 的行为之后，让它监听本地的 3000 端口。这里的第二个函数是个回调函数，</span></span><br><span class="line">      <span class="comment">//会在 listen 动作成功后执行，我们这里执行了一个命令行输出操作，告诉我们监听动作已完成。</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'app is listening at port 3000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释:"></a>代码解释:</h3><p>通过请求得到网页的html内容并储存于sres.text中，再传给cheerio.load,得到一个实现jquery接口的变量，然后就类似于jquery选择器的方法对页面的元素的查找，拿到自己想要的数据即可。在定义好行为之后，让它监听本地的 3000 端口。这里的第二个函数是个回调函数，会在 listen 动作成功后执行，我们这里执行了一个命令行输出操作，告诉我们监听动作已完成。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行:"></a>运行:</h3><p>输入命令 ‘ node index.js ‘ , 会看到打印出’app is listening at port 3000 ‘,如图所示：</p><p><img src="https://user-gold-cdn.xitu.io/2018/2/3/1615b8a99d0f42bc?w=766&amp;h=60&amp;f=png&amp;s=20502" alt=""><br>打开浏览器，访问’<a href="http://localhost:3000/&#39;,就可以看到我们爬虫得来的数据哦，如下图所示：" target="_blank" rel="noopener">http://localhost:3000/&#39;,就可以看到我们爬虫得来的数据哦，如下图所示：</a><br><img src="https://user-gold-cdn.xitu.io/2018/2/3/1615b8c089f51d35?w=2874&amp;h=1222&amp;f=png&amp;s=904926" alt=""><br>只是用了最基本的node实现了一个简易的爬虫效果，当然在这个例子中并没有利用到node.js的异步并发特性，待深入研究再做分享，希望和大家多多交流探讨。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;node.js的强大就无需再去重复了，越来越多的公司在使用node.js，还有一点不得不提的优势就是node用的是javascript的语言，对于前端开发工程师来说，没有理由不去get这一强大的技能。现在本人也是在学习阶段，结合自己做的一些demo进行总结。今天给大家分享一
      
    
    </summary>
    
    
  </entry>
  
</feed>
